
stm32g4_lin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000104f4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  080106d8  080106d8  000116d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ee0  08010ee0  00013410  2**0
                  CONTENTS
  4 .ARM          00000008  08010ee0  08010ee0  00011ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ee8  08010ee8  00013410  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ee8  08010ee8  00011ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010eec  08010eec  00011eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000360  20000000  08010ef0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .non_cache    000010b0  20000360  08011250  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000046a4  20001410  08012300  00013410  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005ab4  08012300  00013ab4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013410  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a493  00000000  00000000  00013440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c20  00000000  00000000  0002d8d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001530  00000000  00000000  000324f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001006  00000000  00000000  00033a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023525  00000000  00000000  00034a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fadd  00000000  00000000  00057f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bea5e  00000000  00000000  00077a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013648e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067a8  00000000  00000000  001364d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0013cc7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001410 	.word	0x20001410
 80001fc:	00000000 	.word	0x00000000
 8000200:	080106bc 	.word	0x080106bc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001414 	.word	0x20001414
 800021c:	080106bc 	.word	0x080106bc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <apInit>:
#include "ap.h"



void apInit (void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  cliOpen(HW_UART_CH_DEBUG, 115200);
 8000ff8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f999 	bl	8001334 <cliOpen>
  logBoot(false);
 8001002:	2000      	movs	r0, #0
 8001004:	f001 f994 	bl	8002330 <logBoot>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <apMain>:

void apMain (void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	uint32_t pre_time;
	static uint8_t ledStep = 0;
	pre_time = millis ();
 8001012:	f000 f84c 	bl	80010ae <millis>
 8001016:	6078      	str	r0, [r7, #4]
	ledOff (_DEF_LED1);
 8001018:	2000      	movs	r0, #0
 800101a:	f001 f913 	bl	8002244 <ledOff>
	ledOff (_DEF_LED2);
 800101e:	2001      	movs	r0, #1
 8001020:	f001 f910 	bl	8002244 <ledOff>
	ledOff (_DEF_LED3);
 8001024:	2002      	movs	r0, #2
 8001026:	f001 f90d 	bl	8002244 <ledOff>
	while (1)
	{
		if (millis () - pre_time >= 100)
 800102a:	f000 f840 	bl	80010ae <millis>
 800102e:	4602      	mov	r2, r0
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b63      	cmp	r3, #99	@ 0x63
 8001036:	d928      	bls.n	800108a <apMain+0x7e>
		{
			pre_time = millis ();
 8001038:	f000 f839 	bl	80010ae <millis>
 800103c:	6078      	str	r0, [r7, #4]
			switch(ledStep)
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <apMain+0x84>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b02      	cmp	r3, #2
 8001044:	d00e      	beq.n	8001064 <apMain+0x58>
 8001046:	2b02      	cmp	r3, #2
 8001048:	dc10      	bgt.n	800106c <apMain+0x60>
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <apMain+0x48>
 800104e:	2b01      	cmp	r3, #1
 8001050:	d004      	beq.n	800105c <apMain+0x50>
 8001052:	e00b      	b.n	800106c <apMain+0x60>
			{
			case 0:
				ledToggle (_DEF_LED1);
 8001054:	2000      	movs	r0, #0
 8001056:	f001 f915 	bl	8002284 <ledToggle>
				break;
 800105a:	e007      	b.n	800106c <apMain+0x60>
			case 1:
				ledToggle (_DEF_LED2);
 800105c:	2001      	movs	r0, #1
 800105e:	f001 f911 	bl	8002284 <ledToggle>
				break;
 8001062:	e003      	b.n	800106c <apMain+0x60>
			case 2:
				ledToggle (_DEF_LED3);
 8001064:	2002      	movs	r0, #2
 8001066:	f001 f90d 	bl	8002284 <ledToggle>
				break;
 800106a:	bf00      	nop
			}
			ledStep = ((ledStep+1) % 3);
 800106c:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <apMain+0x84>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	1c5a      	adds	r2, r3, #1
 8001072:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <apMain+0x88>)
 8001074:	fb83 3102 	smull	r3, r1, r3, r2
 8001078:	17d3      	asrs	r3, r2, #31
 800107a:	1ac9      	subs	r1, r1, r3
 800107c:	460b      	mov	r3, r1
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	440b      	add	r3, r1
 8001082:	1ad1      	subs	r1, r2, r3
 8001084:	b2ca      	uxtb	r2, r1
 8001086:	4b02      	ldr	r3, [pc, #8]	@ (8001090 <apMain+0x84>)
 8001088:	701a      	strb	r2, [r3, #0]
		}
		cliMain();
 800108a:	f000 fa25 	bl	80014d8 <cliMain>
		if (millis () - pre_time >= 100)
 800108e:	e7cc      	b.n	800102a <apMain+0x1e>
 8001090:	2000142c 	.word	0x2000142c
 8001094:	55555556 	.word	0x55555556

08001098 <delay>:
{
  return true;
}

void delay(uint32_t ms)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f002 fd5d 	bl	8003b60 <HAL_Delay>
#endif
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <millis>:

uint32_t millis(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80010b2:	f002 fd49 	bl	8003b48 <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	bd80      	pop	{r7, pc}

080010bc <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80010c8:	2301      	movs	r3, #1
 80010ca:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2201      	movs	r2, #1
 80010e2:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	68ba      	ldr	r2, [r7, #8]
 80010e8:	611a      	str	r2, [r3, #16]

  return ret;
 80010ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <qbufferWrite>:

  return ret;
}

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b08b      	sub	sp, #44	@ 0x2c
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t next_in;


  for (uint32_t i=0; i<length; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
 800110e:	e043      	b.n	8001198 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	6892      	ldr	r2, [r2, #8]
 800111a:	fbb3 f1f2 	udiv	r1, r3, r2
 800111e:	fb01 f202 	mul.w	r2, r1, r2
 8001122:	1a9b      	subs	r3, r3, r2
 8001124:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	429a      	cmp	r2, r3
 800112e:	d02c      	beq.n	800118a <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d024      	beq.n	8001182 <qbufferWrite+0x8a>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d021      	beq.n	8001182 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	691a      	ldr	r2, [r3, #16]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	68c9      	ldr	r1, [r1, #12]
 800114a:	fb01 f303 	mul.w	r3, r1, r3
 800114e:	4413      	add	r3, r2
 8001150:	617b      	str	r3, [r7, #20]
        for (uint32_t j=0; j<p_node->size; j++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e00a      	b.n	800116e <qbufferWrite+0x76>
        {
          p_buf[j] = p_data[j];
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	441a      	add	r2, r3
 800115e:	6979      	ldr	r1, [r7, #20]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	440b      	add	r3, r1
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	701a      	strb	r2, [r3, #0]
        for (uint32_t j=0; j<p_node->size; j++)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	3301      	adds	r3, #1
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	d3ef      	bcc.n	8001158 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	4413      	add	r3, r2
 8001180:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e003      	b.n	8001192 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 800118a:	2300      	movs	r3, #0
 800118c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001190:	e006      	b.n	80011a0 <qbufferWrite+0xa8>
  for (uint32_t i=0; i<length; i++)
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	3301      	adds	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	6a3a      	ldr	r2, [r7, #32]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3b7      	bcc.n	8001110 <qbufferWrite+0x18>
    }
  }

  return ret;
 80011a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	372c      	adds	r7, #44	@ 0x2c
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	@ 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80011bc:	2301      	movs	r3, #1
 80011be:	77fb      	strb	r3, [r7, #31]


  for (uint32_t i=0; i<length; i++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	e041      	b.n	800124a <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d024      	beq.n	8001218 <qbufferRead+0x68>
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d021      	beq.n	8001218 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	691a      	ldr	r2, [r3, #16]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	68f9      	ldr	r1, [r7, #12]
 80011de:	68c9      	ldr	r1, [r1, #12]
 80011e0:	fb01 f303 	mul.w	r3, r1, r3
 80011e4:	4413      	add	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      for (uint32_t j=0; j<p_node->size; j++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e00a      	b.n	8001204 <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	441a      	add	r2, r3
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	440b      	add	r3, r1
 80011fa:	7812      	ldrb	r2, [r2, #0]
 80011fc:	701a      	strb	r2, [r3, #0]
      for (uint32_t j=0; j<p_node->size; j++)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	429a      	cmp	r2, r3
 800120c:	d3ef      	bcc.n	80011ee <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	4413      	add	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	429a      	cmp	r2, r3
 8001222:	d00c      	beq.n	800123e <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	3301      	adds	r3, #1
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	6892      	ldr	r2, [r2, #8]
 800122e:	fbb3 f1f2 	udiv	r1, r3, r2
 8001232:	fb01 f202 	mul.w	r2, r1, r2
 8001236:	1a9a      	subs	r2, r3, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	e002      	b.n	8001244 <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 800123e:	2300      	movs	r3, #0
 8001240:	77fb      	strb	r3, [r7, #31]
      break;
 8001242:	e006      	b.n	8001252 <qbufferRead+0xa2>
  for (uint32_t i=0; i<length; i++)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	3301      	adds	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	429a      	cmp	r2, r3
 8001250:	d3b9      	bcc.n	80011c6 <qbufferRead+0x16>
    }
  }

  return ret;
 8001252:	7ffb      	ldrb	r3, [r7, #31]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3724      	adds	r7, #36	@ 0x24
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689a      	ldr	r2, [r3, #8]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	441a      	add	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6892      	ldr	r2, [r2, #8]
 800127c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001280:	fb01 f202 	mul.w	r2, r1, r2
 8001284:	1a9b      	subs	r3, r3, r2
 8001286:	60fb      	str	r3, [r7, #12]

  return ret;
 8001288:	68fb      	ldr	r3, [r7, #12]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800129c:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <cliInit+0x78>)
 800129e:	2200      	movs	r2, #0
 80012a0:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <cliInit+0x78>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	725a      	strb	r2, [r3, #9]
  cli_node.is_busy = false;
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <cliInit+0x78>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	729a      	strb	r2, [r3, #10]
  cli_node.state   = CLI_RX_IDLE;
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <cliInit+0x78>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80012b4:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <cliInit+0x78>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <cliInit+0x78>)
 80012be:	2200      	movs	r2, #0
 80012c0:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <cliInit+0x78>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <cliInit+0x78>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80012d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <cliInit+0x78>)
 80012d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001314 <cliInit+0x7c>)
 80012d8:	f8c3 2680 	str.w	r2, [r3, #1664]	@ 0x680
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <cliInit+0x78>)
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <cliInit+0x80>)
 80012e0:	f8c3 2684 	str.w	r2, [r3, #1668]	@ 0x684
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <cliInit+0x78>)
 80012e6:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <cliInit+0x84>)
 80012e8:	f8c3 2688 	str.w	r2, [r3, #1672]	@ 0x688
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <cliInit+0x78>)
 80012ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001320 <cliInit+0x88>)
 80012f0:	f8c3 268c 	str.w	r2, [r3, #1676]	@ 0x68c

  cliLineClean(&cli_node);
 80012f4:	4806      	ldr	r0, [pc, #24]	@ (8001310 <cliInit+0x78>)
 80012f6:	f000 fb9f 	bl	8001a38 <cliLineClean>


  cliAdd("help", cliShowList);
 80012fa:	490a      	ldr	r1, [pc, #40]	@ (8001324 <cliInit+0x8c>)
 80012fc:	480a      	ldr	r0, [pc, #40]	@ (8001328 <cliInit+0x90>)
 80012fe:	f000 fe3b 	bl	8001f78 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001302:	490a      	ldr	r1, [pc, #40]	@ (800132c <cliInit+0x94>)
 8001304:	480a      	ldr	r0, [pc, #40]	@ (8001330 <cliInit+0x98>)
 8001306:	f000 fe37 	bl	8001f78 <cliAdd>

  return true;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20001430 	.word	0x20001430
 8001314:	08001e09 	.word	0x08001e09
 8001318:	08001e59 	.word	0x08001e59
 800131c:	08001eb1 	.word	0x08001eb1
 8001320:	08001ef9 	.word	0x08001ef9
 8001324:	08002009 	.word	0x08002009
 8001328:	080106d8 	.word	0x080106d8
 800132c:	08002079 	.word	0x08002079
 8001330:	080106e0 	.word	0x080106e0

08001334 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001340:	4a11      	ldr	r2, [pc, #68]	@ (8001388 <cliOpen+0x54>)
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	7013      	strb	r3, [r2, #0]


  if (cli_node.is_open == false || cli_node.baud != baud)
 8001346:	4b10      	ldr	r3, [pc, #64]	@ (8001388 <cliOpen+0x54>)
 8001348:	7a1b      	ldrb	r3, [r3, #8]
 800134a:	f083 0301 	eor.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d104      	bne.n	800135e <cliOpen+0x2a>
 8001354:	4b0c      	ldr	r3, [pc, #48]	@ (8001388 <cliOpen+0x54>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	429a      	cmp	r2, r3
 800135c:	d00e      	beq.n	800137c <cliOpen+0x48>
  {
    if (baud > 0)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00b      	beq.n	800137c <cliOpen+0x48>
    {
      cli_node.baud = baud;
 8001364:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <cliOpen+0x54>)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	6053      	str	r3, [r2, #4]
      cli_node.is_open = uartOpen(ch, baud);
 800136a:	79fb      	ldrb	r3, [r7, #7]
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fa18 	bl	80027a4 <uartOpen>
 8001374:	4603      	mov	r3, r0
 8001376:	461a      	mov	r2, r3
 8001378:	4b03      	ldr	r3, [pc, #12]	@ (8001388 <cliOpen+0x54>)
 800137a:	721a      	strb	r2, [r3, #8]
    }
  }

  return cli_node.is_open;
 800137c:	4b02      	ldr	r3, [pc, #8]	@ (8001388 <cliOpen+0x54>)
 800137e:	7a1b      	ldrb	r3, [r3, #8]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20001430 	.word	0x20001430

0800138c <cliGetPort>:
  }
  return ret;
}

uint8_t cliGetPort(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return cli_node.ch;
 8001390:	4b03      	ldr	r3, [pc, #12]	@ (80013a0 <cliGetPort+0x14>)
 8001392:	781b      	ldrb	r3, [r3, #0]
}
 8001394:	4618      	mov	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20001430 	.word	0x20001430

080013a4 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <cliShowLog+0xdc>)
 80013ae:	7a5b      	ldrb	r3, [r3, #9]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d061      	beq.n	8001478 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	7ad8      	ldrb	r0, [r3, #11]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 80013be:	461a      	mov	r2, r3
 80013c0:	4930      	ldr	r1, [pc, #192]	@ (8001484 <cliShowLog+0xe0>)
 80013c2:	f001 fc9f 	bl	8002d04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	7ad8      	ldrb	r0, [r3, #11]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 80013d0:	461a      	mov	r2, r3
 80013d2:	492d      	ldr	r1, [pc, #180]	@ (8001488 <cliShowLog+0xe4>)
 80013d4:	f001 fc96 	bl	8002d04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	7ad8      	ldrb	r0, [r3, #11]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 33f0 	ldrb.w	r3, [r3, #1008]	@ 0x3f0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4929      	ldr	r1, [pc, #164]	@ (800148c <cliShowLog+0xe8>)
 80013e6:	f001 fc8d 	bl	8002d04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7ad8      	ldrb	r0, [r3, #11]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 80013f4:	461a      	mov	r2, r3
 80013f6:	4926      	ldr	r1, [pc, #152]	@ (8001490 <cliShowLog+0xec>)
 80013f8:	f001 fc84 	bl	8002d04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7ad8      	ldrb	r0, [r3, #11]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001406:	461a      	mov	r2, r3
 8001408:	4922      	ldr	r1, [pc, #136]	@ (8001494 <cliShowLog+0xf0>)
 800140a:	f001 fc7b 	bl	8002d04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7ad8      	ldrb	r0, [r3, #11]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001418:	461a      	mov	r2, r3
 800141a:	491f      	ldr	r1, [pc, #124]	@ (8001498 <cliShowLog+0xf4>)
 800141c:	f001 fc72 	bl	8002d04 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7ad8      	ldrb	r0, [r3, #11]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800142a:	461a      	mov	r2, r3
 800142c:	491b      	ldr	r1, [pc, #108]	@ (800149c <cliShowLog+0xf8>)
 800142e:	f001 fc69 	bl	8002d04 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	e012      	b.n	800145e <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	7ad8      	ldrb	r0, [r3, #11]
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4613      	mov	r3, r2
 8001440:	015b      	lsls	r3, r3, #5
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	4413      	add	r3, r2
 8001448:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	4413      	add	r3, r2
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4913      	ldr	r1, [pc, #76]	@ (80014a0 <cliShowLog+0xfc>)
 8001454:	f001 fc56 	bl	8002d04 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	3301      	adds	r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001464:	461a      	mov	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	4293      	cmp	r3, r2
 800146a:	dbe5      	blt.n	8001438 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7adb      	ldrb	r3, [r3, #11]
 8001470:	490c      	ldr	r1, [pc, #48]	@ (80014a4 <cliShowLog+0x100>)
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fc46 	bl	8002d04 <uartPrintf>
  }
}
 8001478:	bf00      	nop
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20001430 	.word	0x20001430
 8001484:	080106e4 	.word	0x080106e4
 8001488:	080106f4 	.word	0x080106f4
 800148c:	08010704 	.word	0x08010704
 8001490:	08010714 	.word	0x08010714
 8001494:	08010724 	.word	0x08010724
 8001498:	08010734 	.word	0x08010734
 800149c:	08010744 	.word	0x08010744
 80014a0:	08010754 	.word	0x08010754
 80014a4:	08010764 	.word	0x08010764

080014a8 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4906      	ldr	r1, [pc, #24]	@ (80014d0 <cliShowPrompt+0x28>)
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fc24 	bl	8002d04 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4904      	ldr	r1, [pc, #16]	@ (80014d4 <cliShowPrompt+0x2c>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f001 fc1e 	bl	8002d04 <uartPrintf>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	08010768 	.word	0x08010768
 80014d4:	0801076c 	.word	0x0801076c

080014d8 <cliMain>:

bool cliMain(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 80014dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <cliMain+0x40>)
 80014de:	7a1b      	ldrb	r3, [r3, #8]
 80014e0:	f083 0301 	eor.w	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <cliMain+0x16>
  {
    return false;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e012      	b.n	8001514 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 80014ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <cliMain+0x40>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f001 fb30 	bl	8002b58 <uartAvailable>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d009      	beq.n	8001512 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <cliMain+0x40>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fb72 	bl	8002bec <uartRead>
 8001508:	4603      	mov	r3, r0
 800150a:	4619      	mov	r1, r3
 800150c:	4802      	ldr	r0, [pc, #8]	@ (8001518 <cliMain+0x40>)
 800150e:	f000 f831 	bl	8001574 <cliUpdate>
  }

  return true;
 8001512:	2301      	movs	r3, #1
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20001430 	.word	0x20001430

0800151c <cliAvailable>:

uint32_t cliAvailable(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  return uartAvailable(cli_node.ch);
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <cliAvailable+0x14>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f001 fb17 	bl	8002b58 <uartAvailable>
 800152a:	4603      	mov	r3, r0
}
 800152c:	4618      	mov	r0, r3
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20001430 	.word	0x20001430

08001534 <cliRead>:

uint8_t cliRead(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  return uartRead(cli_node.ch);
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <cliRead+0x14>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f001 fb55 	bl	8002bec <uartRead>
 8001542:	4603      	mov	r3, r0
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20001430 	.word	0x20001430

0800154c <cliWrite>:

uint32_t cliWrite(uint8_t *p_data, uint32_t length)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  return uartWrite(cli_node.ch, p_data, length);
 8001556:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <cliWrite+0x24>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	683a      	ldr	r2, [r7, #0]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	f001 fb84 	bl	8002c6c <uartWrite>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20001430 	.word	0x20001430

08001574 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08c      	sub	sp, #48	@ 0x30
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	460b      	mov	r3, r1
 800157e:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001580:	2300      	movs	r3, #0
 8001582:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800158c:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	7c1b      	ldrb	r3, [r3, #16]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f040 816d 	bne.w	8001872 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001598:	78fb      	ldrb	r3, [r7, #3]
 800159a:	2b7f      	cmp	r3, #127	@ 0x7f
 800159c:	d02a      	beq.n	80015f4 <cliUpdate+0x80>
 800159e:	2b7f      	cmp	r3, #127	@ 0x7f
 80015a0:	f300 80da 	bgt.w	8001758 <cliUpdate+0x1e4>
 80015a4:	2b1b      	cmp	r3, #27
 80015a6:	d021      	beq.n	80015ec <cliUpdate+0x78>
 80015a8:	2b1b      	cmp	r3, #27
 80015aa:	f300 80d5 	bgt.w	8001758 <cliUpdate+0x1e4>
 80015ae:	2b08      	cmp	r3, #8
 80015b0:	d062      	beq.n	8001678 <cliUpdate+0x104>
 80015b2:	2b0d      	cmp	r3, #13
 80015b4:	f040 80d0 	bne.w	8001758 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 fa52 	bl	8001a6c <cliLineAdd>
          cliRunCmd(p_cli);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f000 fb1d 	bl	8001c08 <cliRunCmd>
        }

        line->count = 0;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	2200      	movs	r2, #0
 80015d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff5f 	bl	80014a8 <cliShowPrompt>
        break;
 80015ea:	e142      	b.n	8001872 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	741a      	strb	r2, [r3, #16]
        break;
 80015f2:	e13e      	b.n	8001872 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001600:	429a      	cmp	r2, r3
 8001602:	f080 8131 	bcs.w	8001868 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001616:	2301      	movs	r3, #1
 8001618:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800161a:	e013      	b.n	8001644 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001622:	461a      	mov	r2, r3
 8001624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001626:	441a      	add	r2, r3
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800162e:	4619      	mov	r1, r3
 8001630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001632:	440b      	add	r3, r1
 8001634:	3b01      	subs	r3, #1
 8001636:	69f9      	ldr	r1, [r7, #28]
 8001638:	5c89      	ldrb	r1, [r1, r2]
 800163a:	69fa      	ldr	r2, [r7, #28]
 800163c:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001640:	3301      	adds	r3, #1
 8001642:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001644:	7efb      	ldrb	r3, [r7, #27]
 8001646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001648:	429a      	cmp	r2, r3
 800164a:	dbe7      	blt.n	800161c <cliUpdate+0xa8>
          }

          line->count--;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001652:	3b01      	subs	r3, #1
 8001654:	b2da      	uxtb	r2, r3
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 800165c:	69fb      	ldr	r3, [r7, #28]
 800165e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001662:	461a      	mov	r2, r3
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2100      	movs	r1, #0
 8001668:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	498d      	ldr	r1, [pc, #564]	@ (80018a4 <cliUpdate+0x330>)
 8001670:	4618      	mov	r0, r3
 8001672:	f001 fb47 	bl	8002d04 <uartPrintf>
        }
        break;
 8001676:	e0f7      	b.n	8001868 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800167e:	2b00      	cmp	r3, #0
 8001680:	d055      	beq.n	800172e <cliUpdate+0x1ba>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001688:	2b00      	cmp	r3, #0
 800168a:	d050      	beq.n	800172e <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001698:	429a      	cmp	r2, r3
 800169a:	d10e      	bne.n	80016ba <cliUpdate+0x146>
          {
            line->count--;
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016a2:	3b01      	subs	r3, #1
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016b2:	461a      	mov	r2, r3
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	2100      	movs	r1, #0
 80016b8:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d231      	bcs.n	800172e <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016de:	e013      	b.n	8001708 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016e6:	461a      	mov	r2, r3
 80016e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016ea:	441a      	add	r2, r3
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016f2:	4619      	mov	r1, r3
 80016f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016f6:	440b      	add	r3, r1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	69f9      	ldr	r1, [r7, #28]
 80016fc:	5c89      	ldrb	r1, [r1, r2]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001704:	3301      	adds	r3, #1
 8001706:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001708:	7ebb      	ldrb	r3, [r7, #26]
 800170a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800170c:	429a      	cmp	r2, r3
 800170e:	dbe7      	blt.n	80016e0 <cliUpdate+0x16c>
            }

            line->count--;
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001716:	3b01      	subs	r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001726:	461a      	mov	r2, r3
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	2100      	movs	r1, #0
 800172c:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 8099 	beq.w	800186c <cliUpdate+0x2f8>
        {
          line->cursor--;
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001740:	3b01      	subs	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	4956      	ldr	r1, [pc, #344]	@ (80018a8 <cliUpdate+0x334>)
 8001750:	4618      	mov	r0, r3
 8001752:	f001 fad7 	bl	8002d04 <uartPrintf>
        }
        break;
 8001756:	e089      	b.n	800186c <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800175e:	3301      	adds	r3, #1
 8001760:	69fa      	ldr	r2, [r7, #28]
 8001762:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 8001766:	4293      	cmp	r3, r2
 8001768:	f280 8082 	bge.w	8001870 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001778:	429a      	cmp	r2, r3
 800177a:	d124      	bne.n	80017c6 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	1cf9      	adds	r1, r7, #3
 8001782:	2201      	movs	r2, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f001 fa71 	bl	8002c6c <uartWrite>

            line->buf[line->cursor] = rx_data;
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001790:	461a      	mov	r2, r3
 8001792:	78f9      	ldrb	r1, [r7, #3]
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017be:	461a      	mov	r2, r3
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	2100      	movs	r1, #0
 80017c4:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d24c      	bcs.n	8001870 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ea:	e013      	b.n	8001814 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017f2:	461a      	mov	r2, r3
 80017f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001800:	4619      	mov	r1, r3
 8001802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001804:	1acb      	subs	r3, r1, r3
 8001806:	69f9      	ldr	r1, [r7, #28]
 8001808:	5c89      	ldrb	r1, [r1, r2]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800180e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001810:	3301      	adds	r3, #1
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
 8001814:	7e7b      	ldrb	r3, [r7, #25]
 8001816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001818:	429a      	cmp	r2, r3
 800181a:	dbe7      	blt.n	80017ec <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001822:	461a      	mov	r2, r3
 8001824:	78f9      	ldrb	r1, [r7, #3]
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	5499      	strb	r1, [r3, r2]
            line->count++;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001830:	3301      	adds	r3, #1
 8001832:	b2da      	uxtb	r2, r3
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001840:	3301      	adds	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001850:	461a      	mov	r2, r3
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	2100      	movs	r1, #0
 8001856:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	78fa      	ldrb	r2, [r7, #3]
 800185e:	4913      	ldr	r1, [pc, #76]	@ (80018ac <cliUpdate+0x338>)
 8001860:	4618      	mov	r0, r3
 8001862:	f001 fa4f 	bl	8002d04 <uartPrintf>
          }
        }
        break;
 8001866:	e003      	b.n	8001870 <cliUpdate+0x2fc>
        break;
 8001868:	bf00      	nop
 800186a:	e002      	b.n	8001872 <cliUpdate+0x2fe>
        break;
 800186c:	bf00      	nop
 800186e:	e000      	b.n	8001872 <cliUpdate+0x2fe>
        break;
 8001870:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7c1b      	ldrb	r3, [r3, #16]
 8001876:	3b01      	subs	r3, #1
 8001878:	2b03      	cmp	r3, #3
 800187a:	f200 80d0 	bhi.w	8001a1e <cliUpdate+0x4aa>
 800187e:	a201      	add	r2, pc, #4	@ (adr r2, 8001884 <cliUpdate+0x310>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001895 	.word	0x08001895
 8001888:	0800189d 	.word	0x0800189d
 800188c:	080018b1 	.word	0x080018b1
 8001890:	08001a15 	.word	0x08001a15
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2202      	movs	r2, #2
 8001898:	741a      	strb	r2, [r3, #16]
      break;
 800189a:	e0c0      	b.n	8001a1e <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	741a      	strb	r2, [r3, #16]
      break;
 80018a2:	e0bc      	b.n	8001a1e <cliUpdate+0x4aa>
 80018a4:	08010774 	.word	0x08010774
 80018a8:	0801077c 	.word	0x0801077c
 80018ac:	08010784 	.word	0x08010784

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	2b44      	cmp	r3, #68	@ 0x44
 80018ba:	d11a      	bne.n	80018f2 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d015      	beq.n	80018f2 <cliUpdate+0x37e>
        {
          line->cursor--;
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018cc:	3b01      	subs	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 80018d6:	231b      	movs	r3, #27
 80018d8:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80018da:	235b      	movs	r3, #91	@ 0x5b
 80018dc:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	f107 010c 	add.w	r1, r7, #12
 80018ea:	2203      	movs	r2, #3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f001 f9bd 	bl	8002c6c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	2b43      	cmp	r3, #67	@ 0x43
 80018f6:	d11d      	bne.n	8001934 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001904:	429a      	cmp	r2, r3
 8001906:	d215      	bcs.n	8001934 <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800190e:	3301      	adds	r3, #1
 8001910:	b2da      	uxtb	r2, r3
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 8001918:	231b      	movs	r3, #27
 800191a:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800191c:	235b      	movs	r3, #91	@ 0x5b
 800191e:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	f107 010c 	add.w	r1, r7, #12
 800192c:	2203      	movs	r2, #3
 800192e:	4618      	mov	r0, r3
 8001930:	f001 f99c 	bl	8002c6c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	2b41      	cmp	r3, #65	@ 0x41
 8001938:	d10c      	bne.n	8001954 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800193a:	2101      	movs	r1, #1
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f8d9 	bl	8001af4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800194c:	4619      	mov	r1, r3
 800194e:	4610      	mov	r0, r2
 8001950:	f001 f9d8 	bl	8002d04 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001954:	78fb      	ldrb	r3, [r7, #3]
 8001956:	2b42      	cmp	r3, #66	@ 0x42
 8001958:	d10c      	bne.n	8001974 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800195a:	2100      	movs	r1, #0
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f8c9 	bl	8001af4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	781a      	ldrb	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 800196c:	4619      	mov	r1, r3
 800196e:	4610      	mov	r0, r2
 8001970:	f001 f9c8 	bl	8002d04 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001974:	78fb      	ldrb	r3, [r7, #3]
 8001976:	2b31      	cmp	r3, #49	@ 0x31
 8001978:	d10f      	bne.n	800199a <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	7818      	ldrb	r0, [r3, #0]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001984:	461a      	mov	r2, r3
 8001986:	492a      	ldr	r1, [pc, #168]	@ (8001a30 <cliUpdate+0x4bc>)
 8001988:	f001 f9bc 	bl	8002d04 <uartPrintf>
        line->cursor = 0;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2204      	movs	r2, #4
 8001998:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	2b34      	cmp	r3, #52	@ 0x34
 800199e:	d13d      	bne.n	8001a1c <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d20f      	bcs.n	80019d0 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019b6:	461a      	mov	r2, r3
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	8afa      	ldrh	r2, [r7, #22]
 80019c8:	491a      	ldr	r1, [pc, #104]	@ (8001a34 <cliUpdate+0x4c0>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f001 f99a 	bl	8002d04 <uartPrintf>
        }
        if (line->cursor > line->count)
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019dc:	429a      	cmp	r2, r3
 80019de:	d90f      	bls.n	8001a00 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e6:	461a      	mov	r2, r3
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	8afa      	ldrh	r2, [r7, #22]
 80019f8:	490d      	ldr	r1, [pc, #52]	@ (8001a30 <cliUpdate+0x4bc>)
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 f982 	bl	8002d04 <uartPrintf>
        }
        line->cursor = line->count;
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001a12:	e003      	b.n	8001a1c <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	741a      	strb	r2, [r3, #16]
      break;
 8001a1a:	e000      	b.n	8001a1e <cliUpdate+0x4aa>
      break;
 8001a1c:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fcc0 	bl	80013a4 <cliShowLog>

  return ret;
 8001a24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3730      	adds	r7, #48	@ 0x30
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	08010790 	.word	0x08010790
 8001a34:	08010798 	.word	0x08010798

08001a38 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 23f2 	strb.w	r2, [r3, #1010]	@ 0x3f2
  p_cli->line.cursor  = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	223f      	movs	r2, #63	@ 0x3f
 8001a54:	f883 23f0 	strb.w	r2, [r3, #1008]	@ 0x3f0
  p_cli->line.buf[0]  = 0;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 23b0 	strb.w	r2, [r3, #944]	@ 0x3b0
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	4413      	add	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	4413      	add	r3, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4610      	mov	r0, r2
 8001a92:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001a96:	2243      	movs	r2, #67	@ 0x43
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f00c fe0c 	bl	800e6b6 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001aa4:	2b07      	cmp	r3, #7
 8001aa6:	d807      	bhi.n	8001ab8 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001abe:	b25a      	sxtb	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001acc:	3301      	adds	r3, #1
 8001ace:	425a      	negs	r2, r3
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	f002 0207 	and.w	r2, r2, #7
 8001ad8:	bf58      	it	pl
 8001ada:	4253      	negpl	r3, r2
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	460b      	mov	r3, r1
 8001afe:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d076      	beq.n	8001bf8 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7818      	ldrb	r0, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 33f1 	ldrb.w	r3, [r3, #1009]	@ 0x3f1
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4937      	ldr	r1, [pc, #220]	@ (8001c00 <cliLineChange+0x10c>)
 8001b22:	f001 f8ef 	bl	8002d04 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7818      	ldrb	r0, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 33f2 	ldrb.w	r3, [r3, #1010]	@ 0x3f2
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	4931      	ldr	r1, [pc, #196]	@ (8001c04 <cliLineChange+0x110>)
 8001b3e:	f001 f8e1 	bl	8002d04 <uartPrintf>
  }


  if (key_up == true)
 8001b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d125      	bne.n	8001b96 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b5a:	b25a      	sxtb	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b68:	461a      	mov	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b70:	4413      	add	r3, r2
 8001b72:	3b01      	subs	r3, #1
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001b7a:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b7e:	fb01 f202 	mul.w	r2, r1, r2
 8001b82:	1a9b      	subs	r3, r3, r2
 8001b84:	b25a      	sxtb	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b92:	73fb      	strb	r3, [r7, #15]
 8001b94:	e013      	b.n	8001bbe <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001ba4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ba8:	fb01 f202 	mul.w	r2, r1, r2
 8001bac:	1a9b      	subs	r3, r3, r2
 8001bae:	b25a      	sxtb	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001bbc:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	015b      	lsls	r3, r3, #5
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	4413      	add	r3, r2
 8001bce:	4403      	add	r3, r0
 8001bd0:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001bd4:	f501 736c 	add.w	r3, r1, #944	@ 0x3b0
 8001bd8:	4611      	mov	r1, r2
 8001bda:	2243      	movs	r2, #67	@ 0x43
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f00c fd6a 	bl	800e6b6 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 23f2 	ldrb.w	r2, [r3, #1010]	@ 0x3f2
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f883 23f1 	strb.w	r2, [r3, #1009]	@ 0x3f1

  p_cli->hist_line_new = false;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001bf6:	e000      	b.n	8001bfa <cliLineChange+0x106>
    return;
 8001bf8:	bf00      	nop
}
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	08010790 	.word	0x08010790
 8001c04:	080107a0 	.word	0x080107a0

08001c08 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b084      	sub	sp, #16
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001c10:	2300      	movs	r3, #0
 8001c12:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f857 	bl	8001cc8 <cliParseArgs>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d04b      	beq.n	8001cb8 <cliRunCmd+0xb0>
  {
    cliPrintf("\r\n");
 8001c20:	4828      	ldr	r0, [pc, #160]	@ (8001cc4 <cliRunCmd+0xbc>)
 8001c22:	f000 f899 	bl	8001d58 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f8b7 	bl	8001da0 <cliToUpper>

    p_cli->is_busy = true;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	729a      	strb	r2, [r3, #10]
    for (int i=0; i<p_cli->cmd_count; i++)
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	e032      	b.n	8001ca4 <cliRunCmd+0x9c>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7fe fae2 	bl	8000220 <strcmp>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d11d      	bne.n	8001c9e <cliRunCmd+0x96>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	b29a      	uxth	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f8a3 2678 	strh.w	r2, [r3, #1656]	@ 0x678
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8c3 267c 	str.w	r2, [r3, #1660]	@ 0x67c
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	4613      	mov	r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4413      	add	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	440b      	add	r3, r1
 8001c8c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	f502 62cf 	add.w	r2, r2, #1656	@ 0x678
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4798      	blx	r3
        break;
 8001c9c:	e009      	b.n	8001cb2 <cliRunCmd+0xaa>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001caa:	461a      	mov	r2, r3
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	dbc5      	blt.n	8001c3e <cliRunCmd+0x36>
      }
    }
    p_cli->is_busy = false;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	729a      	strb	r2, [r3, #10]
  }

  return ret;
 8001cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	080107a8 	.word	0x080107a8

08001cc8 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
 8001ce6:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001cee:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001cf0:	8afb      	ldrh	r3, [r7, #22]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <cliParseArgs+0x8c>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f107 0208 	add.w	r2, r7, #8
 8001d04:	4619      	mov	r1, r3
 8001d06:	6938      	ldr	r0, [r7, #16]
 8001d08:	f00c fc56 	bl	800e5b8 <strtok_r>
 8001d0c:	61b8      	str	r0, [r7, #24]
 8001d0e:	e010      	b.n	8001d32 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001d10:	8afb      	ldrh	r3, [r7, #22]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	82fa      	strh	r2, [r7, #22]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <cliParseArgs+0x8c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f107 0208 	add.w	r2, r7, #8
 8001d28:	4619      	mov	r1, r3
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f00c fc44 	bl	800e5b8 <strtok_r>
 8001d30:	61b8      	str	r0, [r7, #24]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1eb      	bne.n	8001d10 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	8afa      	ldrh	r2, [r7, #22]
 8001d3c:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001d40:	8afb      	ldrh	r3, [r7, #22]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <cliParseArgs+0x82>
  {
    ret = true;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3720      	adds	r7, #32
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20000000 	.word	0x20000000

08001d58 <cliPrintf>:
  
  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8001d58:	b40f      	push	{r0, r1, r2, r3}
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001d66:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <cliPrintf+0x44>)
 8001d68:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f103 0011 	add.w	r0, r3, #17
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d78:	f00c fbce 	bl	800e518 <vsniprintf>
 8001d7c:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	7818      	ldrb	r0, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3311      	adds	r3, #17
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f000 ff6f 	bl	8002c6c <uartWrite>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001d98:	b004      	add	sp, #16
 8001d9a:	4770      	bx	lr
 8001d9c:	20001430 	.word	0x20001430

08001da0 <cliToUpper>:
  
  uartWrite(p_cli->ch, &data, 1);
}

void cliToUpper(char *str)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001da8:	2300      	movs	r3, #0
 8001daa:	81fb      	strh	r3, [r7, #14]
 8001dac:	e018      	b.n	8001de0 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001dae:	89fb      	ldrh	r3, [r7, #14]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d014      	beq.n	8001de8 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001dbe:	7b7b      	ldrb	r3, [r7, #13]
 8001dc0:	2b60      	cmp	r3, #96	@ 0x60
 8001dc2:	d905      	bls.n	8001dd0 <cliToUpper+0x30>
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	2b7a      	cmp	r3, #122	@ 0x7a
 8001dc8:	d802      	bhi.n	8001dd0 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001dca:	7b7b      	ldrb	r3, [r7, #13]
 8001dcc:	3b20      	subs	r3, #32
 8001dce:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001dd0:	89fb      	ldrh	r3, [r7, #14]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	7b7a      	ldrb	r2, [r7, #13]
 8001dd8:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	81fb      	strh	r3, [r7, #14]
 8001de0:	89fb      	ldrh	r3, [r7, #14]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	d9e3      	bls.n	8001dae <cliToUpper+0xe>
 8001de6:	e000      	b.n	8001dea <cliToUpper+0x4a>
      break;
 8001de8:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	2b10      	cmp	r3, #16
 8001dee:	d105      	bne.n	8001dfc <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001df0:	89fb      	ldrh	r3, [r7, #14]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e16:	4b0f      	ldr	r3, [pc, #60]	@ (8001e54 <cliArgsGetData+0x4c>)
 8001e18:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d301      	bcc.n	8001e2c <cliArgsGetData+0x24>
  {
    return 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e00e      	b.n	8001e4a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f00c f9fc 	bl	800e23c <strtoul>
 8001e44:	4603      	mov	r3, r0
 8001e46:	60fb      	str	r3, [r7, #12]

  return ret;
 8001e48:	68fb      	ldr	r3, [r7, #12]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20001430 	.word	0x20001430

08001e58 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	4603      	mov	r3, r0
 8001e60:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e68:	4b10      	ldr	r3, [pc, #64]	@ (8001eac <cliArgsGetFloat+0x54>)
 8001e6a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d302      	bcc.n	8001e80 <cliArgsGetFloat+0x28>
  {
    return 0;
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	e00d      	b.n	8001e9c <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4618      	mov	r0, r3
 8001e92:	f00c f901 	bl	800e098 <strtof>
 8001e96:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
}
 8001e9c:	ee07 3a90 	vmov	s15, r3
 8001ea0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20001430 	.word	0x20001430

08001eb0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <cliArgsGetStr+0x44>)
 8001ec0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d301      	bcc.n	8001ed4 <cliArgsGetStr+0x24>
  {
    return 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e008      	b.n	8001ee6 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	60fb      	str	r3, [r7, #12]

  return ret;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	20001430 	.word	0x20001430

08001ef8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, const char *p_str)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	6039      	str	r1, [r7, #0]
 8001f02:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <cliArgsIsStr+0x50>)
 8001f0a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	f8b3 3678 	ldrh.w	r3, [r3, #1656]	@ 0x678
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d301      	bcc.n	8001f1e <cliArgsIsStr+0x26>
  {
    return 0;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	e010      	b.n	8001f40 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	f8d3 267c 	ldr.w	r2, [r3, #1660]	@ 0x67c
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	6838      	ldr	r0, [r7, #0]
 8001f30:	f7fe f976 	bl	8000220 <strcmp>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <cliArgsIsStr+0x46>
  {
    ret = true;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	20001430 	.word	0x20001430

08001f4c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <cliKeepLoop+0x28>)
 8001f54:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fdfc 	bl	8002b58 <uartAvailable>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <cliKeepLoop+0x1e>
  {
    return true;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8001f6a:	2300      	movs	r3, #0
  }
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20001430 	.word	0x20001430

08001f78 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <cliAdd+0x8c>)
 8001f88:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001f90:	2b1f      	cmp	r3, #31
 8001f92:	d901      	bls.n	8001f98 <cliAdd+0x20>
  {
    return false;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e030      	b.n	8001ffa <cliAdd+0x82>
  }

  index = p_cli->cmd_count;
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001f9e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001fa0:	89fa      	ldrh	r2, [r7, #14]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4413      	add	r3, r2
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f00c fb76 	bl	800e6a6 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001fba:	89fa      	ldrh	r2, [r7, #14]
 8001fbc:	6939      	ldr	r1, [r7, #16]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	440b      	add	r3, r1
 8001fc8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001fd0:	89fa      	ldrh	r2, [r7, #14]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fedc 	bl	8001da0 <cliToUpper>

  p_cli->cmd_count++;
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8001fee:	3301      	adds	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f8a3 23f4 	strh.w	r2, [r3, #1012]	@ 0x3f4

  return ret;
 8001ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20001430 	.word	0x20001430

08002008 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002010:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <cliShowList+0x60>)
 8002012:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002014:	4815      	ldr	r0, [pc, #84]	@ (800206c <cliShowList+0x64>)
 8002016:	f7ff fe9f 	bl	8001d58 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800201a:	4815      	ldr	r0, [pc, #84]	@ (8002070 <cliShowList+0x68>)
 800201c:	f7ff fe9c 	bl	8001d58 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002020:	2300      	movs	r3, #0
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e011      	b.n	800204a <cliShowList+0x42>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	f503 737e 	add.w	r3, r3, #1016	@ 0x3f8
 8002034:	68ba      	ldr	r2, [r7, #8]
 8002036:	4413      	add	r3, r2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fe8d 	bl	8001d58 <cliPrintf>
    cliPrintf("\r\n");
 800203e:	480b      	ldr	r0, [pc, #44]	@ (800206c <cliShowList+0x64>)
 8002040:	f7ff fe8a 	bl	8001d58 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	f8b3 33f4 	ldrh.w	r3, [r3, #1012]	@ 0x3f4
 8002050:	461a      	mov	r2, r3
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	4293      	cmp	r3, r2
 8002056:	dbe6      	blt.n	8002026 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8002058:	4806      	ldr	r0, [pc, #24]	@ (8002074 <cliShowList+0x6c>)
 800205a:	f7ff fe7d 	bl	8001d58 <cliPrintf>
}
 800205e:	bf00      	nop
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20001430 	.word	0x20001430
 800206c:	080107a8 	.word	0x080107a8
 8002070:	080107ac 	.word	0x080107ac
 8002074:	080107cc 	.word	0x080107cc

08002078 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	@ 0x30
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002080:	2310      	movs	r3, #16
 8002082:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	881b      	ldrh	r3, [r3, #0]
 8002088:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d103      	bne.n	80020a0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002098:	4842      	ldr	r0, [pc, #264]	@ (80021a4 <cliMemoryDump+0x12c>)
 800209a:	f7ff fe5d 	bl	8001d58 <cliPrintf>
 800209e:	e07d      	b.n	800219c <cliMemoryDump+0x124>
    return;
  }

  if(argc > 1)
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	dd09      	ble.n	80020ba <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	3304      	adds	r3, #4
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00c f8c3 	bl	800e23c <strtoul>
 80020b6:	4603      	mov	r3, r0
 80020b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f00c f8ba 	bl	800e23c <strtoul>
 80020c8:	4603      	mov	r3, r0
 80020ca:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 80020cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ce:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80020d0:	4835      	ldr	r0, [pc, #212]	@ (80021a8 <cliMemoryDump+0x130>)
 80020d2:	f7ff fe41 	bl	8001d58 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020da:	e05b      	b.n	8002194 <cliMemoryDump+0x11c>
  {
    if((idx%4) == 0)
 80020dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020de:	f003 0303 	and.w	r3, r3, #3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d104      	bne.n	80020f0 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	4619      	mov	r1, r3
 80020ea:	4830      	ldr	r0, [pc, #192]	@ (80021ac <cliMemoryDump+0x134>)
 80020ec:	f7ff fe34 	bl	8001d58 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80020f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4619      	mov	r1, r3
 80020f6:	482e      	ldr	r0, [pc, #184]	@ (80021b0 <cliMemoryDump+0x138>)
 80020f8:	f7ff fe2e 	bl	8001d58 <cliPrintf>

    if ((idx%4) == 3)
 80020fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020fe:	425a      	negs	r2, r3
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	f002 0203 	and.w	r2, r2, #3
 8002108:	bf58      	it	pl
 800210a:	4253      	negpl	r3, r2
 800210c:	2b03      	cmp	r3, #3
 800210e:	d13b      	bne.n	8002188 <cliMemoryDump+0x110>
    {
      cliPrintf ("  |");
 8002110:	4828      	ldr	r0, [pc, #160]	@ (80021b4 <cliMemoryDump+0x13c>)
 8002112:	f7ff fe21 	bl	8001d58 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002116:	2300      	movs	r3, #0
 8002118:	623b      	str	r3, [r7, #32]
 800211a:	e02c      	b.n	8002176 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e01d      	b.n	8002164 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002128:	f107 020c 	add.w	r2, r7, #12
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b1f      	cmp	r3, #31
 8002134:	d910      	bls.n	8002158 <cliMemoryDump+0xe0>
 8002136:	f107 020c 	add.w	r2, r7, #12
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b7e      	cmp	r3, #126	@ 0x7e
 8002142:	d809      	bhi.n	8002158 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002144:	f107 020c 	add.w	r2, r7, #12
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	4413      	add	r3, r2
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	4619      	mov	r1, r3
 8002150:	4819      	ldr	r0, [pc, #100]	@ (80021b8 <cliMemoryDump+0x140>)
 8002152:	f7ff fe01 	bl	8001d58 <cliPrintf>
 8002156:	e002      	b.n	800215e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002158:	4818      	ldr	r0, [pc, #96]	@ (80021bc <cliMemoryDump+0x144>)
 800215a:	f7ff fdfd 	bl	8001d58 <cliPrintf>
        for (i=0;i<4;i++)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3301      	adds	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b03      	cmp	r3, #3
 8002168:	ddde      	ble.n	8002128 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	3304      	adds	r3, #4
 800216e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	3301      	adds	r3, #1
 8002174:	623b      	str	r3, [r7, #32]
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	2b03      	cmp	r3, #3
 800217a:	ddcf      	ble.n	800211c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800217c:	4810      	ldr	r0, [pc, #64]	@ (80021c0 <cliMemoryDump+0x148>)
 800217e:	f7ff fdeb 	bl	8001d58 <cliPrintf>
      delay(1);
 8002182:	2001      	movs	r0, #1
 8002184:	f7fe ff88 	bl	8001098 <delay>
    }
    addr++;
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	3304      	adds	r3, #4
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 800218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002190:	3301      	adds	r3, #1
 8002192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002194:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002198:	429a      	cmp	r2, r3
 800219a:	db9f      	blt.n	80020dc <cliMemoryDump+0x64>
  }
}
 800219c:	3730      	adds	r7, #48	@ 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	080107ec 	.word	0x080107ec
 80021a8:	08010800 	.word	0x08010800
 80021ac:	08010808 	.word	0x08010808
 80021b0:	08010814 	.word	0x08010814
 80021b4:	0801081c 	.word	0x0801081c
 80021b8:	08010820 	.word	0x08010820
 80021bc:	08010824 	.word	0x08010824
 80021c0:	08010828 	.word	0x08010828

080021c4 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
  bool ret = true;
 80021ca:	2301      	movs	r3, #1
 80021cc:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 80021ce:	f00a fac3 	bl	800c758 <cdcIfInit>
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 80021d6:	4a04      	ldr	r2, [pc, #16]	@ (80021e8 <cdcInit+0x24>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	7013      	strb	r3, [r2, #0]

  return ret;
 80021dc:	79fb      	ldrb	r3, [r7, #7]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20001ac0 	.word	0x20001ac0

080021ec <cdcAvailable>:
{
  return cdcIfIsConnected();
}

uint32_t cdcAvailable(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 80021f0:	f00a fad8 	bl	800c7a4 <cdcIfAvailable>
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	bd80      	pop	{r7, pc}

080021fa <cdcRead>:

uint8_t cdcRead(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
  return cdcIfRead();
 80021fe:	f00a fadb 	bl	800c7b8 <cdcIfRead>
 8002202:	4603      	mov	r3, r0
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}

08002208 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f00a fae1 	bl	800c7dc <cdcIfWrite>
 800221a:	4603      	mov	r3, r0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  return cdcIfGetBaud();
 8002228:	f00a fb32 	bl	800c890 <cdcIfGetBaud>
 800222c:	4603      	mov	r3, r0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd80      	pop	{r7, pc}

08002232 <ledInit>:
};



bool ledInit(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return true;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800224e:	79fb      	ldrb	r3, [r7, #7]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d811      	bhi.n	8002278 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	4a0a      	ldr	r2, [pc, #40]	@ (8002280 <ledOff+0x3c>)
 8002258:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <ledOff+0x3c>)
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	8899      	ldrh	r1, [r3, #4]
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	4a05      	ldr	r2, [pc, #20]	@ (8002280 <ledOff+0x3c>)
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	4413      	add	r3, r2
 800226e:	79db      	ldrb	r3, [r3, #7]
 8002270:	461a      	mov	r2, r3
 8002272:	f002 fb13 	bl	800489c <HAL_GPIO_WritePin>
 8002276:	e000      	b.n	800227a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8002278:	bf00      	nop
}
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	08010a6c 	.word	0x08010a6c

08002284 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d80d      	bhi.n	80022b0 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	4a08      	ldr	r2, [pc, #32]	@ (80022b8 <ledToggle+0x34>)
 8002298:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	4906      	ldr	r1, [pc, #24]	@ (80022b8 <ledToggle+0x34>)
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	889b      	ldrh	r3, [r3, #4]
 80022a6:	4619      	mov	r1, r3
 80022a8:	4610      	mov	r0, r2
 80022aa:	f002 fb0f 	bl	80048cc <HAL_GPIO_TogglePin>
 80022ae:	e000      	b.n	80022b2 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 80022b0:	bf00      	nop
}
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	08010a6c 	.word	0x08010a6c

080022bc <logInit>:




bool logInit(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
#ifdef _USE_HW_RTOS
  mutex_lock = xSemaphoreCreateMutex();
#endif

  log_buf_boot.line_index     = 0;
 80022c0:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <logInit+0x58>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	801a      	strh	r2, [r3, #0]
  log_buf_boot.buf_length     = 0;
 80022c6:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <logInit+0x58>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	805a      	strh	r2, [r3, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 80022cc:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <logInit+0x58>)
 80022ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022d2:	809a      	strh	r2, [r3, #4]
  log_buf_boot.buf_index      = 0;
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <logInit+0x58>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	80da      	strh	r2, [r3, #6]
  log_buf_boot.buf            = buf_boot;
 80022da:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <logInit+0x58>)
 80022dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002318 <logInit+0x5c>)
 80022de:	609a      	str	r2, [r3, #8]


  log_buf_list.line_index     = 0;
 80022e0:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <logInit+0x60>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	801a      	strh	r2, [r3, #0]
  log_buf_list.buf_length     = 0;
 80022e6:	4b0d      	ldr	r3, [pc, #52]	@ (800231c <logInit+0x60>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	805a      	strh	r2, [r3, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 80022ec:	4b0b      	ldr	r3, [pc, #44]	@ (800231c <logInit+0x60>)
 80022ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022f2:	809a      	strh	r2, [r3, #4]
  log_buf_list.buf_index      = 0;
 80022f4:	4b09      	ldr	r3, [pc, #36]	@ (800231c <logInit+0x60>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	80da      	strh	r2, [r3, #6]
  log_buf_list.buf            = buf_list;
 80022fa:	4b08      	ldr	r3, [pc, #32]	@ (800231c <logInit+0x60>)
 80022fc:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <logInit+0x64>)
 80022fe:	609a      	str	r2, [r3, #8]


  is_init = true;
 8002300:	4b08      	ldr	r3, [pc, #32]	@ (8002324 <logInit+0x68>)
 8002302:	2201      	movs	r2, #1
 8002304:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("log", cliCmd);
 8002306:	4908      	ldr	r1, [pc, #32]	@ (8002328 <logInit+0x6c>)
 8002308:	4808      	ldr	r0, [pc, #32]	@ (800232c <logInit+0x70>)
 800230a:	f7ff fe35 	bl	8001f78 <cliAdd>
#endif

  return true;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20001ac4 	.word	0x20001ac4
 8002318:	20001adc 	.word	0x20001adc
 800231c:	20001ad0 	.word	0x20001ad0
 8002320:	200022dc 	.word	0x200022dc
 8002324:	200032dc 	.word	0x200032dc
 8002328:	08002501 	.word	0x08002501
 800232c:	08010838 	.word	0x08010838

08002330 <logBoot>:
{
  is_enable = false;
}

void logBoot(uint8_t enable)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	71fb      	strb	r3, [r7, #7]
  is_boot_log = enable;
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf14      	ite	ne
 8002340:	2301      	movne	r3, #1
 8002342:	2300      	moveq	r3, #0
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b04      	ldr	r3, [pc, #16]	@ (8002358 <logBoot+0x28>)
 8002348:	701a      	strb	r2, [r3, #0]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000004 	.word	0x20000004

0800235c <logOpen>:

bool logOpen(uint8_t ch, uint32_t baud)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  log_ch   = ch;
 8002368:	4a0b      	ldr	r2, [pc, #44]	@ (8002398 <logOpen+0x3c>)
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	7013      	strb	r3, [r2, #0]
  log_baud = baud;
 800236e:	4a0b      	ldr	r2, [pc, #44]	@ (800239c <logOpen+0x40>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6013      	str	r3, [r2, #0]
  is_open  = true;
 8002374:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <logOpen+0x44>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]

  is_open = uartOpen(ch, baud);
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	6839      	ldr	r1, [r7, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fa10 	bl	80027a4 <uartOpen>
 8002384:	4603      	mov	r3, r0
 8002386:	461a      	mov	r2, r3
 8002388:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <logOpen+0x44>)
 800238a:	701a      	strb	r2, [r3, #0]

  return is_open;
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <logOpen+0x44>)
 800238e:	781b      	ldrb	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	200032de 	.word	0x200032de
 800239c:	20000008 	.word	0x20000008
 80023a0:	200032dd 	.word	0x200032dd

080023a4 <logBufPrintf>:

bool logBufPrintf(log_buf_t *p_log, char *p_data, uint32_t length)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	@ 0x28
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  uint32_t buf_last;
  uint8_t *p_buf;
  int buf_len;


  buf_last = p_log->buf_index + length + 8;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	88db      	ldrh	r3, [r3, #6]
 80023b4:	461a      	mov	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	3308      	adds	r3, #8
 80023bc:	61fb      	str	r3, [r7, #28]
  if (buf_last > p_log->buf_length_max)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	889b      	ldrh	r3, [r3, #4]
 80023c2:	461a      	mov	r2, r3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d911      	bls.n	80023ee <logBufPrintf+0x4a>
  {
    p_log->buf_index = 0;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	80da      	strh	r2, [r3, #6]
    buf_last = p_log->buf_index + length + 8;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	88db      	ldrh	r3, [r3, #6]
 80023d4:	461a      	mov	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	3308      	adds	r3, #8
 80023dc:	61fb      	str	r3, [r7, #28]

    if (buf_last > p_log->buf_length_max)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	889b      	ldrh	r3, [r3, #4]
 80023e2:	461a      	mov	r2, r3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d901      	bls.n	80023ee <logBufPrintf+0x4a>
    {
      return false;
 80023ea:	2300      	movs	r3, #0
 80023ec:	e033      	b.n	8002456 <logBufPrintf+0xb2>
    }
  }

  p_buf = &p_log->buf[p_log->buf_index];
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	88d2      	ldrh	r2, [r2, #6]
 80023f6:	4413      	add	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]

  buf_len = snprintf((char *)p_buf, length + 8, "%04X\t%s", p_log->line_index, p_data);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f103 0108 	add.w	r1, r3, #8
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	4613      	mov	r3, r2
 800240c:	4a14      	ldr	r2, [pc, #80]	@ (8002460 <logBufPrintf+0xbc>)
 800240e:	69b8      	ldr	r0, [r7, #24]
 8002410:	f00b ffe0 	bl	800e3d4 <sniprintf>
 8002414:	6178      	str	r0, [r7, #20]
  p_log->line_index++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	801a      	strh	r2, [r3, #0]
  p_log->buf_index += buf_len;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	88da      	ldrh	r2, [r3, #6]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	b29b      	uxth	r3, r3
 800242a:	4413      	add	r3, r2
 800242c:	b29a      	uxth	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	80da      	strh	r2, [r3, #6]


  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	885b      	ldrh	r3, [r3, #2]
 8002436:	461a      	mov	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	4413      	add	r3, r2
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	8892      	ldrh	r2, [r2, #4]
 8002440:	4293      	cmp	r3, r2
 8002442:	dc07      	bgt.n	8002454 <logBufPrintf+0xb0>
  {
    p_log->buf_length += buf_len;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	885a      	ldrh	r2, [r3, #2]
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	b29b      	uxth	r3, r3
 800244c:	4413      	add	r3, r2
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	805a      	strh	r2, [r3, #2]
  }

  return true;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	3720      	adds	r7, #32
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	0801083c 	.word	0x0801083c

08002464 <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 8002464:	b40f      	push	{r0, r1, r2, r3}
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 800246c:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <logPrintf+0x7c>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d12a      	bne.n	80024d0 <logPrintf+0x6c>


  va_start(args, fmt);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002488:	4816      	ldr	r0, [pc, #88]	@ (80024e4 <logPrintf+0x80>)
 800248a:	f00c f845 	bl	800e518 <vsniprintf>
 800248e:	6078      	str	r0, [r7, #4]

  if (is_open == true && is_enable == true)
 8002490:	4b15      	ldr	r3, [pc, #84]	@ (80024e8 <logPrintf+0x84>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <logPrintf+0x4a>
 8002498:	4b14      	ldr	r3, [pc, #80]	@ (80024ec <logPrintf+0x88>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <logPrintf+0x4a>
  {
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <logPrintf+0x8c>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	490f      	ldr	r1, [pc, #60]	@ (80024e4 <logPrintf+0x80>)
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fbdf 	bl	8002c6c <uartWrite>
  }

  if (is_boot_log)
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <logPrintf+0x90>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <logPrintf+0x5e>
  {
    logBufPrintf(&log_buf_boot, print_buf, len);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	461a      	mov	r2, r3
 80024ba:	490a      	ldr	r1, [pc, #40]	@ (80024e4 <logPrintf+0x80>)
 80024bc:	480e      	ldr	r0, [pc, #56]	@ (80024f8 <logPrintf+0x94>)
 80024be:	f7ff ff71 	bl	80023a4 <logBufPrintf>
  }
  logBufPrintf(&log_buf_list, print_buf, len);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4907      	ldr	r1, [pc, #28]	@ (80024e4 <logPrintf+0x80>)
 80024c8:	480c      	ldr	r0, [pc, #48]	@ (80024fc <logPrintf+0x98>)
 80024ca:	f7ff ff6b 	bl	80023a4 <logBufPrintf>
 80024ce:	e000      	b.n	80024d2 <logPrintf+0x6e>
  if (is_init != true) return;
 80024d0:	bf00      	nop
  va_end(args);

#ifdef _USE_HW_RTOS
  unLock();
#endif
}
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024da:	b004      	add	sp, #16
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	200032dc 	.word	0x200032dc
 80024e4:	200032e0 	.word	0x200032e0
 80024e8:	200032dd 	.word	0x200032dd
 80024ec:	20000005 	.word	0x20000005
 80024f0:	200032de 	.word	0x200032de
 80024f4:	20000004 	.word	0x20000004
 80024f8:	20001ac4 	.word	0x20001ac4
 80024fc:	20001ad0 	.word	0x20001ad0

08002500 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002508:	2300      	movs	r3, #0
 800250a:	77fb      	strb	r3, [r7, #31]



  if (args->argc == 1 && args->isStr(0, "info"))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d124      	bne.n	800255e <cliCmd+0x5e>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	494c      	ldr	r1, [pc, #304]	@ (800264c <cliCmd+0x14c>)
 800251a:	2000      	movs	r0, #0
 800251c:	4798      	blx	r3
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01c      	beq.n	800255e <cliCmd+0x5e>
  {
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 8002524:	4b4a      	ldr	r3, [pc, #296]	@ (8002650 <cliCmd+0x150>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	4619      	mov	r1, r3
 800252a:	484a      	ldr	r0, [pc, #296]	@ (8002654 <cliCmd+0x154>)
 800252c:	f7ff fc14 	bl	8001d58 <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 8002530:	4b47      	ldr	r3, [pc, #284]	@ (8002650 <cliCmd+0x150>)
 8002532:	885b      	ldrh	r3, [r3, #2]
 8002534:	4619      	mov	r1, r3
 8002536:	4848      	ldr	r0, [pc, #288]	@ (8002658 <cliCmd+0x158>)
 8002538:	f7ff fc0e 	bl	8001d58 <cliPrintf>
    cliPrintf("\n");
 800253c:	4847      	ldr	r0, [pc, #284]	@ (800265c <cliCmd+0x15c>)
 800253e:	f7ff fc0b 	bl	8001d58 <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 8002542:	4b47      	ldr	r3, [pc, #284]	@ (8002660 <cliCmd+0x160>)
 8002544:	881b      	ldrh	r3, [r3, #0]
 8002546:	4619      	mov	r1, r3
 8002548:	4846      	ldr	r0, [pc, #280]	@ (8002664 <cliCmd+0x164>)
 800254a:	f7ff fc05 	bl	8001d58 <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 800254e:	4b44      	ldr	r3, [pc, #272]	@ (8002660 <cliCmd+0x160>)
 8002550:	885b      	ldrh	r3, [r3, #2]
 8002552:	4619      	mov	r1, r3
 8002554:	4844      	ldr	r0, [pc, #272]	@ (8002668 <cliCmd+0x168>)
 8002556:	f7ff fbff 	bl	8001d58 <cliPrintf>

    ret = true;
 800255a:	2301      	movs	r3, #1
 800255c:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	881b      	ldrh	r3, [r3, #0]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d12d      	bne.n	80025c2 <cliCmd+0xc2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4940      	ldr	r1, [pc, #256]	@ (800266c <cliCmd+0x16c>)
 800256c:	2000      	movs	r0, #0
 800256e:	4798      	blx	r3
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d025      	beq.n	80025c2 <cliCmd+0xc2>
  {
    uint32_t index = 0;
 8002576:	2300      	movs	r3, #0
 8002578:	61bb      	str	r3, [r7, #24]

    while(cliKeepLoop())
 800257a:	e019      	b.n	80025b0 <cliCmd+0xb0>
    {
      uint32_t buf_len;

      buf_len = log_buf_boot.buf_length - index;
 800257c:	4b34      	ldr	r3, [pc, #208]	@ (8002650 <cliCmd+0x150>)
 800257e:	885b      	ldrh	r3, [r3, #2]
 8002580:	461a      	mov	r2, r3
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
      if (buf_len == 0)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d016      	beq.n	80025bc <cliCmd+0xbc>
      {
        break;
      }
      if (buf_len > 64)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	2b40      	cmp	r3, #64	@ 0x40
 8002592:	d901      	bls.n	8002598 <cliCmd+0x98>
      {
        buf_len = 64;
 8002594:	2340      	movs	r3, #64	@ 0x40
 8002596:	617b      	str	r3, [r7, #20]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 8002598:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <cliCmd+0x150>)
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	4413      	add	r3, r2
 80025a0:	6979      	ldr	r1, [r7, #20]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe ffd2 	bl	800154c <cliWrite>
      index += buf_len;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	4413      	add	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
    while(cliKeepLoop())
 80025b0:	f7ff fccc 	bl	8001f4c <cliKeepLoop>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e0      	bne.n	800257c <cliCmd+0x7c>
 80025ba:	e000      	b.n	80025be <cliCmd+0xbe>
        break;
 80025bc:	bf00      	nop

      #ifdef _USE_HW_RTOS
      unLock();
      #endif
    }
    ret = true;
 80025be:	2301      	movs	r3, #1
 80025c0:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d12d      	bne.n	8002626 <cliCmd+0x126>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	4928      	ldr	r1, [pc, #160]	@ (8002670 <cliCmd+0x170>)
 80025d0:	2000      	movs	r0, #0
 80025d2:	4798      	blx	r3
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d025      	beq.n	8002626 <cliCmd+0x126>
  {
    uint32_t index = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]

    while(cliKeepLoop())
 80025de:	e019      	b.n	8002614 <cliCmd+0x114>
    {
      uint32_t buf_len;

      buf_len = log_buf_list.buf_length - index;
 80025e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002660 <cliCmd+0x160>)
 80025e2:	885b      	ldrh	r3, [r3, #2]
 80025e4:	461a      	mov	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	60fb      	str	r3, [r7, #12]
      if (buf_len == 0)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d016      	beq.n	8002620 <cliCmd+0x120>
      {
        break;
      }
      if (buf_len > 64)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b40      	cmp	r3, #64	@ 0x40
 80025f6:	d901      	bls.n	80025fc <cliCmd+0xfc>
      {
        buf_len = 64;
 80025f8:	2340      	movs	r3, #64	@ 0x40
 80025fa:	60fb      	str	r3, [r7, #12]

      #ifdef _USE_HW_RTOS
      lock();
      #endif

      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 80025fc:	4b18      	ldr	r3, [pc, #96]	@ (8002660 <cliCmd+0x160>)
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4413      	add	r3, r2
 8002604:	68f9      	ldr	r1, [r7, #12]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe ffa0 	bl	800154c <cliWrite>
      index += buf_len;
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4413      	add	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
    while(cliKeepLoop())
 8002614:	f7ff fc9a 	bl	8001f4c <cliKeepLoop>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e0      	bne.n	80025e0 <cliCmd+0xe0>
 800261e:	e000      	b.n	8002622 <cliCmd+0x122>
        break;
 8002620:	bf00      	nop
      #ifdef _USE_HW_RTOS
      unLock();
      #endif

    }
    ret = true;
 8002622:	2301      	movs	r3, #1
 8002624:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 8002626:	7ffb      	ldrb	r3, [r7, #31]
 8002628:	f083 0301 	eor.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d008      	beq.n	8002644 <cliCmd+0x144>
  {
    cliPrintf("log info\n");
 8002632:	4810      	ldr	r0, [pc, #64]	@ (8002674 <cliCmd+0x174>)
 8002634:	f7ff fb90 	bl	8001d58 <cliPrintf>
    cliPrintf("log boot\n");
 8002638:	480f      	ldr	r0, [pc, #60]	@ (8002678 <cliCmd+0x178>)
 800263a:	f7ff fb8d 	bl	8001d58 <cliPrintf>
    cliPrintf("log list\n");
 800263e:	480f      	ldr	r0, [pc, #60]	@ (800267c <cliCmd+0x17c>)
 8002640:	f7ff fb8a 	bl	8001d58 <cliPrintf>
  }
}
 8002644:	bf00      	nop
 8002646:	3720      	adds	r7, #32
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	08010844 	.word	0x08010844
 8002650:	20001ac4 	.word	0x20001ac4
 8002654:	0801084c 	.word	0x0801084c
 8002658:	08010860 	.word	0x08010860
 800265c:	08010874 	.word	0x08010874
 8002660:	20001ad0 	.word	0x20001ad0
 8002664:	08010878 	.word	0x08010878
 8002668:	0801088c 	.word	0x0801088c
 800266c:	080108a0 	.word	0x080108a0
 8002670:	080108a8 	.word	0x080108a8
 8002674:	080108b0 	.word	0x080108b0
 8002678:	080108bc 	.word	0x080108bc
 800267c:	080108c8 	.word	0x080108c8

08002680 <swtimerInit>:
//-- External Functions
//


bool swtimerInit(void)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
  uint8_t i;
  static uint8_t excute = 0;


  if (excute == 1)
 8002686:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <swtimerInit+0x88>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <swtimerInit+0x12>
  {
    return false;  // 이미 한번 실행했다면 정지.
 800268e:	2300      	movs	r3, #0
 8002690:	e033      	b.n	80026fa <swtimerInit+0x7a>
  }


  // 구조체 초기화
  for(i=0; i<HW_SWTIMER_MAX_CH; i++)
 8002692:	2300      	movs	r3, #0
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	e029      	b.n	80026ec <swtimerInit+0x6c>
  {
    swtimer_tbl[i].Timer_En   = OFF;
 8002698:	79fa      	ldrb	r2, [r7, #7]
 800269a:	491c      	ldr	r1, [pc, #112]	@ (800270c <swtimerInit+0x8c>)
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
    swtimer_tbl[i].Timer_Ctn  = 0;
 80026aa:	79fa      	ldrb	r2, [r7, #7]
 80026ac:	4917      	ldr	r1, [pc, #92]	@ (800270c <swtimerInit+0x8c>)
 80026ae:	4613      	mov	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3304      	adds	r3, #4
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].Timer_Init = 0;
 80026be:	79fa      	ldrb	r2, [r7, #7]
 80026c0:	4912      	ldr	r1, [pc, #72]	@ (800270c <swtimerInit+0x8c>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3308      	adds	r3, #8
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
    swtimer_tbl[i].TmrFnct    = NULL;
 80026d2:	79fa      	ldrb	r2, [r7, #7]
 80026d4:	490d      	ldr	r1, [pc, #52]	@ (800270c <swtimerInit+0x8c>)
 80026d6:	4613      	mov	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4413      	add	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	440b      	add	r3, r1
 80026e0:	330c      	adds	r3, #12
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
  for(i=0; i<HW_SWTIMER_MAX_CH; i++)
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	3301      	adds	r3, #1
 80026ea:	71fb      	strb	r3, [r7, #7]
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	2b07      	cmp	r3, #7
 80026f0:	d9d2      	bls.n	8002698 <swtimerInit+0x18>
  }

  excute = 1;
 80026f2:	4b05      	ldr	r3, [pc, #20]	@ (8002708 <swtimerInit+0x88>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]

  return true;
 80026f8:	2301      	movs	r3, #1
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20003480 	.word	0x20003480
 800270c:	200033e0 	.word	0x200033e0

08002710 <uartInit>:
    {"USART1 LIN1 ", USART1, &huart1, &hdma_usart1_rx, NULL, UART_MODE_LIN},
    {"USART2 LIN2 ", USART2, &huart2, &hdma_usart2_rx, NULL, UART_MODE_LIN},
  };

bool uartInit(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8002716:	2300      	movs	r3, #0
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	e02c      	b.n	8002776 <uartInit+0x66>
  {
    uart_tbl[i].is_open = false;
 800271c:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <uartInit+0x84>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	4413      	add	r3, r2
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].baud = 115200;
 800272e:	4a19      	ldr	r2, [pc, #100]	@ (8002794 <uartInit+0x84>)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002736:	fb01 f303 	mul.w	r3, r1, r3
 800273a:	4413      	add	r3, r2
 800273c:	3304      	adds	r3, #4
 800273e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002742:	601a      	str	r2, [r3, #0]
    uart_tbl[i].rx_cnt = 0;
 8002744:	4a13      	ldr	r2, [pc, #76]	@ (8002794 <uartInit+0x84>)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f240 412c 	movw	r1, #1068	@ 0x42c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
    uart_tbl[i].tx_cnt = 0;    
 800275a:	4a0e      	ldr	r2, [pc, #56]	@ (8002794 <uartInit+0x84>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002762:	fb01 f303 	mul.w	r3, r1, r3
 8002766:	4413      	add	r3, r2
 8002768:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3301      	adds	r3, #1
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b03      	cmp	r3, #3
 800277a:	ddcf      	ble.n	800271c <uartInit+0xc>
  }

  is_init = true;
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <uartInit+0x88>)
 800277e:	2201      	movs	r2, #1
 8002780:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("uart", cliUart);
 8002782:	4906      	ldr	r1, [pc, #24]	@ (800279c <uartInit+0x8c>)
 8002784:	4806      	ldr	r0, [pc, #24]	@ (80027a0 <uartInit+0x90>)
 8002786:	f7ff fbf7 	bl	8001f78 <cliAdd>
#endif

  return true;
 800278a:	2301      	movs	r3, #1
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000360 	.word	0x20000360
 8002798:	20003481 	.word	0x20003481
 800279c:	08002dbd 	.word	0x08002dbd
 80027a0:	08010904 	.word	0x08010904

080027a4 <uartOpen>:
{
  return is_init;
}

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	6039      	str	r1, [r7, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef ret_hal;


  if (ch >= UART_MAX_CH) return false;
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d901      	bls.n	80027be <uartOpen+0x1a>
 80027ba:	2300      	movs	r3, #0
 80027bc:	e1c4      	b.n	8002b48 <uartOpen+0x3a4>

  if (uart_tbl[ch].is_open == true && uart_tbl[ch].baud == baud)
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	4a94      	ldr	r2, [pc, #592]	@ (8002a14 <uartOpen+0x270>)
 80027c2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80027c6:	fb01 f303 	mul.w	r3, r1, r3
 80027ca:	4413      	add	r3, r2
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00d      	beq.n	80027ee <uartOpen+0x4a>
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	4a8f      	ldr	r2, [pc, #572]	@ (8002a14 <uartOpen+0x270>)
 80027d6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80027da:	fb01 f303 	mul.w	r3, r1, r3
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d101      	bne.n	80027ee <uartOpen+0x4a>
  {
    return true;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e1ac      	b.n	8002b48 <uartOpen+0x3a4>
  }


  switch(ch)
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	dc02      	bgt.n	80027fa <uartOpen+0x56>
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da04      	bge.n	8002802 <uartOpen+0x5e>
 80027f8:	e1a5      	b.n	8002b46 <uartOpen+0x3a2>
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	f000 818c 	beq.w	8002b18 <uartOpen+0x374>
 8002800:	e1a1      	b.n	8002b46 <uartOpen+0x3a2>
  {
    case _DEF_UART1:
    case _DEF_UART2:
	case _DEF_UART3:
      uart_tbl[ch].baud      = baud;
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	4a83      	ldr	r2, [pc, #524]	@ (8002a14 <uartOpen+0x270>)
 8002806:	f240 412c 	movw	r1, #1068	@ 0x42c
 800280a:	fb01 f303 	mul.w	r3, r1, r3
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	601a      	str	r2, [r3, #0]

      uart_tbl[ch].p_huart   = uart_hw_tbl[ch].p_huart;
 8002816:	79fa      	ldrb	r2, [r7, #7]
 8002818:	79f9      	ldrb	r1, [r7, #7]
 800281a:	487f      	ldr	r0, [pc, #508]	@ (8002a18 <uartOpen+0x274>)
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4403      	add	r3, r0
 8002826:	3308      	adds	r3, #8
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	487a      	ldr	r0, [pc, #488]	@ (8002a14 <uartOpen+0x270>)
 800282c:	f240 432c 	movw	r3, #1068	@ 0x42c
 8002830:	fb01 f303 	mul.w	r3, r1, r3
 8002834:	4403      	add	r3, r0
 8002836:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800283a:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_hdma_rx = uart_hw_tbl[ch].p_hdma_rx;
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	79f9      	ldrb	r1, [r7, #7]
 8002840:	4875      	ldr	r0, [pc, #468]	@ (8002a18 <uartOpen+0x274>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4403      	add	r3, r0
 800284c:	330c      	adds	r3, #12
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4870      	ldr	r0, [pc, #448]	@ (8002a14 <uartOpen+0x270>)
 8002852:	f240 432c 	movw	r3, #1068	@ 0x42c
 8002856:	fb01 f303 	mul.w	r3, r1, r3
 800285a:	4403      	add	r3, r0
 800285c:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8002860:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].p_huart->Instance = uart_hw_tbl[ch].p_uart;    
 8002862:	79fa      	ldrb	r2, [r7, #7]
 8002864:	79fb      	ldrb	r3, [r7, #7]
 8002866:	496b      	ldr	r1, [pc, #428]	@ (8002a14 <uartOpen+0x270>)
 8002868:	f240 402c 	movw	r0, #1068	@ 0x42c
 800286c:	fb00 f303 	mul.w	r3, r0, r3
 8002870:	440b      	add	r3, r1
 8002872:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002876:	6819      	ldr	r1, [r3, #0]
 8002878:	4867      	ldr	r0, [pc, #412]	@ (8002a18 <uartOpen+0x274>)
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	4403      	add	r3, r0
 8002884:	3304      	adds	r3, #4
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	600b      	str	r3, [r1, #0]

      uart_tbl[ch].p_huart->Init.BaudRate       = baud;
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	4a61      	ldr	r2, [pc, #388]	@ (8002a14 <uartOpen+0x270>)
 800288e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002892:	fb01 f303 	mul.w	r3, r1, r3
 8002896:	4413      	add	r3, r2
 8002898:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	605a      	str	r2, [r3, #4]
      uart_tbl[ch].p_huart->Init.WordLength     = UART_WORDLENGTH_8B;
 80028a2:	79fb      	ldrb	r3, [r7, #7]
 80028a4:	4a5b      	ldr	r2, [pc, #364]	@ (8002a14 <uartOpen+0x270>)
 80028a6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028aa:	fb01 f303 	mul.w	r3, r1, r3
 80028ae:	4413      	add	r3, r2
 80028b0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]
      uart_tbl[ch].p_huart->Init.StopBits       = UART_STOPBITS_1;
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4a55      	ldr	r2, [pc, #340]	@ (8002a14 <uartOpen+0x270>)
 80028be:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	4413      	add	r3, r2
 80028c8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
      uart_tbl[ch].p_huart->Init.Parity         = UART_PARITY_NONE;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a14 <uartOpen+0x270>)
 80028d6:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028da:	fb01 f303 	mul.w	r3, r1, r3
 80028de:	4413      	add	r3, r2
 80028e0:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]
      uart_tbl[ch].p_huart->Init.Mode           = UART_MODE_TX_RX;
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	4a49      	ldr	r2, [pc, #292]	@ (8002a14 <uartOpen+0x270>)
 80028ee:	f240 412c 	movw	r1, #1068	@ 0x42c
 80028f2:	fb01 f303 	mul.w	r3, r1, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	220c      	movs	r2, #12
 8002900:	615a      	str	r2, [r3, #20]
      uart_tbl[ch].p_huart->Init.HwFlowCtl      = UART_HWCONTROL_NONE;
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	4a43      	ldr	r2, [pc, #268]	@ (8002a14 <uartOpen+0x270>)
 8002906:	f240 412c 	movw	r1, #1068	@ 0x42c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
      uart_tbl[ch].p_huart->Init.OverSampling   = UART_OVERSAMPLING_16;
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a14 <uartOpen+0x270>)
 800291e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2200      	movs	r2, #0
 8002930:	61da      	str	r2, [r3, #28]
      uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	4a37      	ldr	r2, [pc, #220]	@ (8002a14 <uartOpen+0x270>)
 8002936:	f240 412c 	movw	r1, #1068	@ 0x42c
 800293a:	fb01 f303 	mul.w	r3, r1, r3
 800293e:	4413      	add	r3, r2
 8002940:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
      uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	4a31      	ldr	r2, [pc, #196]	@ (8002a14 <uartOpen+0x270>)
 800294e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002952:	fb01 f303 	mul.w	r3, r1, r3
 8002956:	4413      	add	r3, r2
 8002958:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	@ 0x24
      uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	4a2b      	ldr	r2, [pc, #172]	@ (8002a14 <uartOpen+0x270>)
 8002966:	f240 412c 	movw	r1, #1068	@ 0x42c
 800296a:	fb01 f303 	mul.w	r3, r1, r3
 800296e:	4413      	add	r3, r2
 8002970:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2200      	movs	r2, #0
 8002978:	629a      	str	r2, [r3, #40]	@ 0x28


      qbufferCreate(&uart_tbl[ch].qbuffer, &uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH);
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002980:	fb02 f303 	mul.w	r3, r2, r3
 8002984:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002988:	4a22      	ldr	r2, [pc, #136]	@ (8002a14 <uartOpen+0x270>)
 800298a:	1898      	adds	r0, r3, r2
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	3308      	adds	r3, #8
 8002998:	4a1e      	ldr	r2, [pc, #120]	@ (8002a14 <uartOpen+0x270>)
 800299a:	4413      	add	r3, r2
 800299c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029a0:	4619      	mov	r1, r3
 80029a2:	f7fe fb8b 	bl	80010bc <qbufferCreate>


      __HAL_RCC_DMA1_CLK_ENABLE();
 80029a6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a1c <uartOpen+0x278>)
 80029a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029aa:	4a1c      	ldr	r2, [pc, #112]	@ (8002a1c <uartOpen+0x278>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80029b2:	4b1a      	ldr	r3, [pc, #104]	@ (8002a1c <uartOpen+0x278>)
 80029b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]

      HAL_UART_DeInit(uart_tbl[ch].p_huart);
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <uartOpen+0x270>)
 80029c2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80029c6:	fb01 f303 	mul.w	r3, r1, r3
 80029ca:	4413      	add	r3, r2
 80029cc:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f004 fd5a 	bl	800748c <HAL_UART_DeInit>

      if (uart_hw_tbl[ch].mode == UART_MODE_RS485)
 80029d8:	79fa      	ldrb	r2, [r7, #7]
 80029da:	490f      	ldr	r1, [pc, #60]	@ (8002a18 <uartOpen+0x274>)
 80029dc:	4613      	mov	r3, r2
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	4413      	add	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	440b      	add	r3, r1
 80029e6:	3314      	adds	r3, #20
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d118      	bne.n	8002a20 <uartOpen+0x27c>
      {
        ret_hal = HAL_RS485Ex_Init(uart_tbl[ch].p_huart, UART_DE_POLARITY_HIGH, 0, 0);
 80029ee:	79fb      	ldrb	r3, [r7, #7]
 80029f0:	4a08      	ldr	r2, [pc, #32]	@ (8002a14 <uartOpen+0x270>)
 80029f2:	f240 412c 	movw	r1, #1068	@ 0x42c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	2300      	movs	r3, #0
 8002a04:	2200      	movs	r2, #0
 8002a06:	2100      	movs	r1, #0
 8002a08:	f005 fd4c 	bl	80084a4 <HAL_RS485Ex_Init>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	73bb      	strb	r3, [r7, #14]
 8002a10:	e020      	b.n	8002a54 <uartOpen+0x2b0>
 8002a12:	bf00      	nop
 8002a14:	20000360 	.word	0x20000360
 8002a18:	08010a84 	.word	0x08010a84
 8002a1c:	40021000 	.word	0x40021000
      }
      else if (uart_hw_tbl[ch].mode == UART_MODE_LIN)
 8002a20:	79fa      	ldrb	r2, [r7, #7]
 8002a22:	494b      	ldr	r1, [pc, #300]	@ (8002b50 <uartOpen+0x3ac>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3314      	adds	r3, #20
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d00e      	beq.n	8002a54 <uartOpen+0x2b0>
      {

      }
      else
      {
        ret_hal = HAL_UART_Init(uart_tbl[ch].p_huart);
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	4a46      	ldr	r2, [pc, #280]	@ (8002b54 <uartOpen+0x3b0>)
 8002a3a:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 fc5e 	bl	800730c <HAL_UART_Init>
 8002a50:	4603      	mov	r3, r0
 8002a52:	73bb      	strb	r3, [r7, #14]
      }

      if (ret_hal == HAL_OK)
 8002a54:	7bbb      	ldrb	r3, [r7, #14]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d174      	bne.n	8002b44 <uartOpen+0x3a0>
      {
        ret = true;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
        uart_tbl[ch].is_open = true;
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	4a3c      	ldr	r2, [pc, #240]	@ (8002b54 <uartOpen+0x3b0>)
 8002a62:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]

        if(HAL_UART_Receive_DMA(uart_tbl[ch].p_huart, (uint8_t *)&uart_tbl[ch].rx_buf[0], UART_RX_BUF_LENGTH) != HAL_OK)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	4a38      	ldr	r2, [pc, #224]	@ (8002b54 <uartOpen+0x3b0>)
 8002a74:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002a78:	fb01 f303 	mul.w	r3, r1, r3
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002a8a:	fb02 f303 	mul.w	r3, r2, r3
 8002a8e:	3308      	adds	r3, #8
 8002a90:	4a30      	ldr	r2, [pc, #192]	@ (8002b54 <uartOpen+0x3b0>)
 8002a92:	4413      	add	r3, r2
 8002a94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f004 fdc5 	bl	8007628 <HAL_UART_Receive_DMA>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <uartOpen+0x304>
        {
          ret = false;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
        }

        uart_tbl[ch].qbuffer.in  = uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_huart->hdmarx->Instance)->CNDTR;
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	4a2a      	ldr	r2, [pc, #168]	@ (8002b54 <uartOpen+0x3b0>)
 8002aac:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8002aba:	6819      	ldr	r1, [r3, #0]
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	4a25      	ldr	r2, [pc, #148]	@ (8002b54 <uartOpen+0x3b0>)
 8002ac0:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002ac4:	fb00 f303 	mul.w	r3, r0, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	1a8a      	subs	r2, r1, r2
 8002adc:	491d      	ldr	r1, [pc, #116]	@ (8002b54 <uartOpen+0x3b0>)
 8002ade:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002ae2:	fb00 f303 	mul.w	r3, r0, r3
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002aec:	601a      	str	r2, [r3, #0]
        uart_tbl[ch].qbuffer.out = uart_tbl[ch].qbuffer.in;
 8002aee:	79fa      	ldrb	r2, [r7, #7]
 8002af0:	79fb      	ldrb	r3, [r7, #7]
 8002af2:	4918      	ldr	r1, [pc, #96]	@ (8002b54 <uartOpen+0x3b0>)
 8002af4:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002af8:	fb00 f202 	mul.w	r2, r0, r2
 8002afc:	440a      	add	r2, r1
 8002afe:	f502 6281 	add.w	r2, r2, #1032	@ 0x408
 8002b02:	6812      	ldr	r2, [r2, #0]
 8002b04:	4913      	ldr	r1, [pc, #76]	@ (8002b54 <uartOpen+0x3b0>)
 8002b06:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002b0a:	fb00 f303 	mul.w	r3, r0, r3
 8002b0e:	440b      	add	r3, r1
 8002b10:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8002b14:	601a      	str	r2, [r3, #0]
      }
      break;
 8002b16:	e015      	b.n	8002b44 <uartOpen+0x3a0>
    case _DEF_UART4:
      uart_tbl[ch].baud    = baud;
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002b54 <uartOpen+0x3b0>)
 8002b1c:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002b20:	fb01 f303 	mul.w	r3, r1, r3
 8002b24:	4413      	add	r3, r2
 8002b26:	3304      	adds	r3, #4
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].is_open = true;
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a09      	ldr	r2, [pc, #36]	@ (8002b54 <uartOpen+0x3b0>)
 8002b30:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002b34:	fb01 f303 	mul.w	r3, r1, r3
 8002b38:	4413      	add	r3, r2
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	701a      	strb	r2, [r3, #0]
      ret = true;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      break;
 8002b42:	e000      	b.n	8002b46 <uartOpen+0x3a2>
      break;
 8002b44:	bf00      	nop
  }

  return ret;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	08010a84 	.word	0x08010a84
 8002b54:	20000360 	.word	0x20000360

08002b58 <uartAvailable>:

  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]


  switch(ch)
 8002b66:	79fb      	ldrb	r3, [r7, #7]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	dc02      	bgt.n	8002b72 <uartAvailable+0x1a>
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	da03      	bge.n	8002b78 <uartAvailable+0x20>
 8002b70:	e035      	b.n	8002bde <uartAvailable+0x86>
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d02f      	beq.n	8002bd6 <uartAvailable+0x7e>
 8002b76:	e032      	b.n	8002bde <uartAvailable+0x86>
  {
    case _DEF_UART1:
    case _DEF_UART2:
    case _DEF_UART3:
		{
			uart_tbl[ch].qbuffer.in = (uart_tbl[ch].qbuffer.len - ((DMA_Channel_TypeDef *)uart_tbl[ch].p_hdma_rx->Instance)->CNDTR);
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002be8 <uartAvailable+0x90>)
 8002b7c:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 6382 	add.w	r3, r3, #1040	@ 0x410
 8002b8a:	6819      	ldr	r1, [r3, #0]
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	4a16      	ldr	r2, [pc, #88]	@ (8002be8 <uartAvailable+0x90>)
 8002b90:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002b94:	fb00 f303 	mul.w	r3, r0, r3
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 6384 	add.w	r3, r3, #1056	@ 0x420
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	1a8a      	subs	r2, r1, r2
 8002ba8:	490f      	ldr	r1, [pc, #60]	@ (8002be8 <uartAvailable+0x90>)
 8002baa:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002bae:	fb00 f303 	mul.w	r3, r0, r3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002bb8:	601a      	str	r2, [r3, #0]
			ret = qbufferAvailable(&uart_tbl[ch].qbuffer);
 8002bba:	79fb      	ldrb	r3, [r7, #7]
 8002bbc:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002bc8:	4a07      	ldr	r2, [pc, #28]	@ (8002be8 <uartAvailable+0x90>)
 8002bca:	4413      	add	r3, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fe fb47 	bl	8001260 <qbufferAvailable>
 8002bd2:	60f8      	str	r0, [r7, #12]
		}
		break;
 8002bd4:	e003      	b.n	8002bde <uartAvailable+0x86>

    case _DEF_UART4:
      ret = cdcAvailable();
 8002bd6:	f7ff fb09 	bl	80021ec <cdcAvailable>
 8002bda:	60f8      	str	r0, [r7, #12]
      break;
 8002bdc:	bf00      	nop
  }

  return ret;
 8002bde:	68fb      	ldr	r3, [r7, #12]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3710      	adds	r7, #16
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	20000360 	.word	0x20000360

08002bec <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	dc02      	bgt.n	8002c06 <uartRead+0x1a>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da03      	bge.n	8002c0c <uartRead+0x20>
 8002c04:	e017      	b.n	8002c36 <uartRead+0x4a>
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d010      	beq.n	8002c2c <uartRead+0x40>
 8002c0a:	e014      	b.n	8002c36 <uartRead+0x4a>
  {
    case _DEF_UART1:
    case _DEF_UART2:
    case _DEF_UART3:
      qbufferRead(&uart_tbl[ch].qbuffer, &ret, 1);
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002c12:	fb02 f303 	mul.w	r3, r2, r3
 8002c16:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8002c1a:	4a13      	ldr	r2, [pc, #76]	@ (8002c68 <uartRead+0x7c>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	f107 010f 	add.w	r1, r7, #15
 8002c22:	2201      	movs	r2, #1
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe fac3 	bl	80011b0 <qbufferRead>
      break;
 8002c2a:	e004      	b.n	8002c36 <uartRead+0x4a>

    case _DEF_UART4:
      ret = cdcRead();
 8002c2c:	f7ff fae5 	bl	80021fa <cdcRead>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]
      break;
 8002c34:	bf00      	nop
  }
  uart_tbl[ch].rx_cnt++;
 8002c36:	79fb      	ldrb	r3, [r7, #7]
 8002c38:	490b      	ldr	r1, [pc, #44]	@ (8002c68 <uartRead+0x7c>)
 8002c3a:	f240 422c 	movw	r2, #1068	@ 0x42c
 8002c3e:	fb03 f202 	mul.w	r2, r3, r2
 8002c42:	440a      	add	r2, r1
 8002c44:	f202 4224 	addw	r2, r2, #1060	@ 0x424
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	3201      	adds	r2, #1
 8002c4c:	4906      	ldr	r1, [pc, #24]	@ (8002c68 <uartRead+0x7c>)
 8002c4e:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	440b      	add	r3, r1
 8002c58:	f203 4324 	addw	r3, r3, #1060	@ 0x424
 8002c5c:	601a      	str	r2, [r3, #0]

  return ret;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000360 	.word	0x20000360

08002c6c <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]


  switch(ch)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	dc02      	bgt.n	8002c8a <uartWrite+0x1e>
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	da03      	bge.n	8002c90 <uartWrite+0x24>
 8002c88:	e01f      	b.n	8002cca <uartWrite+0x5e>
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d016      	beq.n	8002cbc <uartWrite+0x50>
 8002c8e:	e01c      	b.n	8002cca <uartWrite+0x5e>
  {
    case _DEF_UART1:
    case _DEF_UART2:
    case _DEF_UART3:
    	if (HAL_UART_Transmit(uart_tbl[ch].p_huart, p_data, length, 100) == HAL_OK)
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
 8002c92:	4a1b      	ldr	r2, [pc, #108]	@ (8002d00 <uartWrite+0x94>)
 8002c94:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002c98:	fb01 f303 	mul.w	r3, r1, r3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	f203 431c 	addw	r3, r3, #1052	@ 0x41c
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	2364      	movs	r3, #100	@ 0x64
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	f004 fc2d 	bl	800750a <HAL_UART_Transmit>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d108      	bne.n	8002cc8 <uartWrite+0x5c>
			{
				ret = length;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	617b      	str	r3, [r7, #20]
			}
    	break;
 8002cba:	e005      	b.n	8002cc8 <uartWrite+0x5c>

    case _DEF_UART4:
      ret = cdcWrite(p_data, length);
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	68b8      	ldr	r0, [r7, #8]
 8002cc0:	f7ff faa2 	bl	8002208 <cdcWrite>
 8002cc4:	6178      	str	r0, [r7, #20]
      break;
 8002cc6:	e000      	b.n	8002cca <uartWrite+0x5e>
    	break;
 8002cc8:	bf00      	nop
  }
  uart_tbl[ch].tx_cnt += ret;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8002d00 <uartWrite+0x94>)
 8002cce:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	440a      	add	r2, r1
 8002ce4:	4906      	ldr	r1, [pc, #24]	@ (8002d00 <uartWrite+0x94>)
 8002ce6:	f240 402c 	movw	r0, #1068	@ 0x42c
 8002cea:	fb00 f303 	mul.w	r3, r0, r3
 8002cee:	440b      	add	r3, r1
 8002cf0:	f503 6385 	add.w	r3, r3, #1064	@ 0x428
 8002cf4:	601a      	str	r2, [r3, #0]

  return ret;
 8002cf6:	697b      	ldr	r3, [r7, #20]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	20000360 	.word	0x20000360

08002d04 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, const char *fmt, ...)
{
 8002d04:	b40e      	push	{r1, r2, r3}
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b0c7      	sub	sp, #284	@ 0x11c
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002d12:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002d16:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002d18:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002d1c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002d20:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d24:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8002d26:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002d2a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002d2e:	f107 0010 	add.w	r0, r7, #16
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002d38:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d3c:	f00b fbec 	bl	800e518 <vsniprintf>
 8002d40:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8002d44:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002d48:	f107 0110 	add.w	r1, r7, #16
 8002d4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002d50:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff88 	bl	8002c6c <uartWrite>
 8002d5c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8002d60:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d70:	b003      	add	sp, #12
 8002d72:	4770      	bx	lr

08002d74 <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	60fb      	str	r3, [r7, #12]


  if (ch >= UART_MAX_CH) return 0;
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d901      	bls.n	8002d8c <uartGetBaud+0x18>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e011      	b.n	8002db0 <uartGetBaud+0x3c>

  #ifdef _USE_HW_USB
  if (ch == HW_UART_CH_USB)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d103      	bne.n	8002d9a <uartGetBaud+0x26>
    ret = cdcGetBaud();
 8002d92:	f7ff fa47 	bl	8002224 <cdcGetBaud>
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	e009      	b.n	8002dae <uartGetBaud+0x3a>
  else
    ret = uart_tbl[ch].baud;
 8002d9a:	79fb      	ldrb	r3, [r7, #7]
 8002d9c:	4a06      	ldr	r2, [pc, #24]	@ (8002db8 <uartGetBaud+0x44>)
 8002d9e:	f240 412c 	movw	r1, #1068	@ 0x42c
 8002da2:	fb01 f303 	mul.w	r3, r1, r3
 8002da6:	4413      	add	r3, r2
 8002da8:	3304      	adds	r3, #4
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
  #else
  ret = uart_tbl[ch].baud;
  #endif
  
  return ret;
 8002dae:	68fb      	ldr	r3, [r7, #12]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000360 	.word	0x20000360

08002dbc <cliUart>:
  return uart_tbl[ch].tx_cnt;
}

#ifdef _USE_HW_CLI
void cliUart(cli_args_t *args)
{
 8002dbc:	b5b0      	push	{r4, r5, r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "info"))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	881b      	ldrh	r3, [r3, #0]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d127      	bne.n	8002e20 <cliUart+0x64>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	494d      	ldr	r1, [pc, #308]	@ (8002f0c <cliUart+0x150>)
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	4798      	blx	r3
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d01f      	beq.n	8002e20 <cliUart+0x64>
  {
    for (int i=0; i<UART_MAX_CH; i++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	e017      	b.n	8002e16 <cliUart+0x5a>
    {
      cliPrintf("_DEF_UART%d : %s, %d bps\n", i+1, uart_hw_tbl[i].p_msg, uartGetBaud(i));
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1c5c      	adds	r4, r3, #1
 8002dea:	4949      	ldr	r1, [pc, #292]	@ (8002f10 <cliUart+0x154>)
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	440b      	add	r3, r1
 8002df8:	681d      	ldr	r5, [r3, #0]
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ffb8 	bl	8002d74 <uartGetBaud>
 8002e04:	4603      	mov	r3, r0
 8002e06:	462a      	mov	r2, r5
 8002e08:	4621      	mov	r1, r4
 8002e0a:	4842      	ldr	r0, [pc, #264]	@ (8002f14 <cliUart+0x158>)
 8002e0c:	f7fe ffa4 	bl	8001d58 <cliPrintf>
    for (int i=0; i<UART_MAX_CH; i++)
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	3301      	adds	r3, #1
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	dde4      	ble.n	8002de6 <cliUart+0x2a>
    }
    ret = true;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "test"))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d15f      	bne.n	8002ee8 <cliUart+0x12c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	493a      	ldr	r1, [pc, #232]	@ (8002f18 <cliUart+0x15c>)
 8002e2e:	2000      	movs	r0, #0
 8002e30:	4798      	blx	r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d057      	beq.n	8002ee8 <cliUart+0x12c>
  {
    uint8_t uart_ch;

    uart_ch = constrain(args->getData(1), 1, UART_MAX_CH) - 1;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2001      	movs	r0, #1
 8002e3e:	4798      	blx	r3
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	dd11      	ble.n	8002e6a <cliUart+0xae>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2001      	movs	r0, #1
 8002e4c:	4798      	blx	r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	dc08      	bgt.n	8002e66 <cliUart+0xaa>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2001      	movs	r0, #1
 8002e5a:	4798      	blx	r3
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	3b01      	subs	r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	e002      	b.n	8002e6c <cliUart+0xb0>
 8002e66:	2303      	movs	r3, #3
 8002e68:	e000      	b.n	8002e6c <cliUart+0xb0>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]

    if (uart_ch != cliGetPort())
 8002e6e:	f7fe fa8d 	bl	800138c <cliGetPort>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02e      	beq.n	8002eda <cliUart+0x11e>
    {
      uint8_t rx_data;

      while(1)
      {
        if (uartAvailable(uart_ch) > 0)
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fe6a 	bl	8002b58 <uartAvailable>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <cliUart+0xe8>
        {
          rx_data = uartRead(uart_ch);
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff fead 	bl	8002bec <uartRead>
 8002e92:	4603      	mov	r3, r0
 8002e94:	73bb      	strb	r3, [r7, #14]
          cliPrintf("<- _DEF_UART%d RX : 0x%X\n", uart_ch + 1, rx_data);
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	7bba      	ldrb	r2, [r7, #14]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481f      	ldr	r0, [pc, #124]	@ (8002f1c <cliUart+0x160>)
 8002ea0:	f7fe ff5a 	bl	8001d58 <cliPrintf>
        }

        if (cliAvailable() > 0)
 8002ea4:	f7fe fb3a 	bl	800151c <cliAvailable>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0e6      	beq.n	8002e7c <cliUart+0xc0>
        {
          rx_data = cliRead();
 8002eae:	f7fe fb41 	bl	8001534 <cliRead>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	73bb      	strb	r3, [r7, #14]
          if (rx_data == 'q')
 8002eb6:	7bbb      	ldrb	r3, [r7, #14]
 8002eb8:	2b71      	cmp	r3, #113	@ 0x71
 8002eba:	d012      	beq.n	8002ee2 <cliUart+0x126>
          {
            break;
          }
          else
          {
            uartWrite(uart_ch, &rx_data, 1);
 8002ebc:	f107 010e 	add.w	r1, r7, #14
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff fed1 	bl	8002c6c <uartWrite>
            cliPrintf("-> _DEF_UART%d TX : 0x%X\n", uart_ch + 1, rx_data);            
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	7bba      	ldrb	r2, [r7, #14]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4813      	ldr	r0, [pc, #76]	@ (8002f20 <cliUart+0x164>)
 8002ed4:	f7fe ff40 	bl	8001d58 <cliPrintf>
        if (uartAvailable(uart_ch) > 0)
 8002ed8:	e7d0      	b.n	8002e7c <cliUart+0xc0>
        }
      }
    }
    else
    {
      cliPrintf("This is cliPort\n");
 8002eda:	4812      	ldr	r0, [pc, #72]	@ (8002f24 <cliUart+0x168>)
 8002edc:	f7fe ff3c 	bl	8001d58 <cliPrintf>
 8002ee0:	e000      	b.n	8002ee4 <cliUart+0x128>
            break;
 8002ee2:	bf00      	nop
    }
    ret = true;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	75fb      	strb	r3, [r7, #23]
  }

  if (ret == false)
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	f083 0301 	eor.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d006      	beq.n	8002f02 <cliUart+0x146>
  {
    cliPrintf("uart info\n");
 8002ef4:	480c      	ldr	r0, [pc, #48]	@ (8002f28 <cliUart+0x16c>)
 8002ef6:	f7fe ff2f 	bl	8001d58 <cliPrintf>
    cliPrintf("uart test ch[1~%d]\n", HW_UART_MAX_CH);
 8002efa:	2104      	movs	r1, #4
 8002efc:	480b      	ldr	r0, [pc, #44]	@ (8002f2c <cliUart+0x170>)
 8002efe:	f7fe ff2b 	bl	8001d58 <cliPrintf>
  }
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bdb0      	pop	{r4, r5, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	0801090c 	.word	0x0801090c
 8002f10:	08010a84 	.word	0x08010a84
 8002f14:	08010914 	.word	0x08010914
 8002f18:	08010930 	.word	0x08010930
 8002f1c:	08010938 	.word	0x08010938
 8002f20:	08010954 	.word	0x08010954
 8002f24:	08010970 	.word	0x08010970
 8002f28:	08010984 	.word	0x08010984
 8002f2c:	08010990 	.word	0x08010990

08002f30 <hwInit>:




bool hwInit(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
	cliInit();
 8002f36:	f7fe f9af 	bl	8001298 <cliInit>
	logInit();
 8002f3a:	f7ff f9bf 	bl	80022bc <logInit>
	swtimerInit();
 8002f3e:	f7ff fb9f 	bl	8002680 <swtimerInit>
	//gpioInit();
	ledInit();
 8002f42:	f7ff f976 	bl	8002232 <ledInit>
	uartInit();
 8002f46:	f7ff fbe3 	bl	8002710 <uartInit>
	for (int i=0; i<HW_UART_MAX_CH; i++)
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	e009      	b.n	8002f64 <hwInit+0x34>
	{
		uartOpen(i, 115200);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fc23 	bl	80027a4 <uartOpen>
	for (int i=0; i<HW_UART_MAX_CH; i++)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	3301      	adds	r3, #1
 8002f62:	607b      	str	r3, [r7, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	ddf2      	ble.n	8002f50 <hwInit+0x20>
	}
	logOpen(HW_UART_CH_DEBUG, 115200);
 8002f6a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f7ff f9f4 	bl	800235c <logOpen>
	logPrintf("\r\n[ Firmware Begin... ]\r\n");
 8002f74:	4810      	ldr	r0, [pc, #64]	@ (8002fb8 <hwInit+0x88>)
 8002f76:	f7ff fa75 	bl	8002464 <logPrintf>
	logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 8002f7a:	4910      	ldr	r1, [pc, #64]	@ (8002fbc <hwInit+0x8c>)
 8002f7c:	4810      	ldr	r0, [pc, #64]	@ (8002fc0 <hwInit+0x90>)
 8002f7e:	f7ff fa71 	bl	8002464 <logPrintf>
	logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8002f82:	4910      	ldr	r1, [pc, #64]	@ (8002fc4 <hwInit+0x94>)
 8002f84:	4810      	ldr	r0, [pc, #64]	@ (8002fc8 <hwInit+0x98>)
 8002f86:	f7ff fa6d 	bl	8002464 <logPrintf>
	logPrintf("Booting..Clock\t\t: %d Mhz\r\n", (int)HAL_RCC_GetSysClockFreq()/1000000);
 8002f8a:	f003 feef 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	4a0e      	ldr	r2, [pc, #56]	@ (8002fcc <hwInit+0x9c>)
 8002f92:	fb82 1203 	smull	r1, r2, r2, r3
 8002f96:	1492      	asrs	r2, r2, #18
 8002f98:	17db      	asrs	r3, r3, #31
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	480c      	ldr	r0, [pc, #48]	@ (8002fd0 <hwInit+0xa0>)
 8002fa0:	f7ff fa60 	bl	8002464 <logPrintf>
	logPrintf("\n");
 8002fa4:	480b      	ldr	r0, [pc, #44]	@ (8002fd4 <hwInit+0xa4>)
 8002fa6:	f7ff fa5d 	bl	8002464 <logPrintf>
	cdcInit();
 8002faa:	f7ff f90b 	bl	80021c4 <cdcInit>

  return true;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	080109a4 	.word	0x080109a4
 8002fbc:	080109c0 	.word	0x080109c0
 8002fc0:	080109c8 	.word	0x080109c8
 8002fc4:	080109e0 	.word	0x080109e0
 8002fc8:	080109ec 	.word	0x080109ec
 8002fcc:	431bde83 	.word	0x431bde83
 8002fd0:	08010a04 	.word	0x08010a04
 8002fd4:	08010a20 	.word	0x08010a20

08002fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fdc:	f000 fd4f 	bl	8003a7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fe0:	f000 f814 	bl	800300c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fe4:	f000 f97c 	bl	80032e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002fe8:	f000 f940 	bl	800326c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8002fec:	f000 f858 	bl	80030a0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8002ff0:	f000 f8a0 	bl	8003134 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8002ff4:	f000 f8ec 	bl	80031d0 <MX_USART2_UART_Init>
  MX_USB_Device_Init();
 8002ff8:	f009 fb7e 	bl	800c6f8 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  hwInit();
 8002ffc:	f7ff ff98 	bl	8002f30 <hwInit>
  apInit();
 8003000:	f7fd fff8 	bl	8000ff4 <apInit>
  apMain();
 8003004:	f7fe f802 	bl	800100c <apMain>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003008:	bf00      	nop
 800300a:	e7fd      	b.n	8003008 <main+0x30>

0800300c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b094      	sub	sp, #80	@ 0x50
 8003010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003012:	f107 0318 	add.w	r3, r7, #24
 8003016:	2238      	movs	r2, #56	@ 0x38
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f00b fa8a 	bl	800e534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	60da      	str	r2, [r3, #12]
 800302c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800302e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003032:	f003 f999 	bl	8006368 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003036:	2301      	movs	r3, #1
 8003038:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800303a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800303e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003040:	2302      	movs	r3, #2
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003044:	2303      	movs	r3, #3
 8003046:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8003048:	2303      	movs	r3, #3
 800304a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 108;
 800304c:	236c      	movs	r3, #108	@ 0x6c
 800304e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003050:	2302      	movs	r3, #2
 8003052:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8003054:	2306      	movs	r3, #6
 8003056:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003058:	2302      	movs	r3, #2
 800305a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800305c:	f107 0318 	add.w	r3, r7, #24
 8003060:	4618      	mov	r0, r3
 8003062:	f003 fa35 	bl	80064d0 <HAL_RCC_OscConfig>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800306c:	f000 f9a6 	bl	80033bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003070:	230f      	movs	r3, #15
 8003072:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003074:	2303      	movs	r3, #3
 8003076:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003078:	2300      	movs	r3, #0
 800307a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800307c:	2300      	movs	r3, #0
 800307e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003084:	1d3b      	adds	r3, r7, #4
 8003086:	2104      	movs	r1, #4
 8003088:	4618      	mov	r0, r3
 800308a:	f003 fd33 	bl	8006af4 <HAL_RCC_ClockConfig>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003094:	f000 f992 	bl	80033bc <Error_Handler>
  }
}
 8003098:	bf00      	nop
 800309a:	3750      	adds	r7, #80	@ 0x50
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80030a4:	4b20      	ldr	r3, [pc, #128]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030a6:	4a21      	ldr	r2, [pc, #132]	@ (800312c <MX_LPUART1_UART_Init+0x8c>)
 80030a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80030aa:	4b1f      	ldr	r3, [pc, #124]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030ac:	4a20      	ldr	r2, [pc, #128]	@ (8003130 <MX_LPUART1_UART_Init+0x90>)
 80030ae:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80030b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80030bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80030c2:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030c4:	220c      	movs	r2, #12
 80030c6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030c8:	4b17      	ldr	r3, [pc, #92]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80030ce:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80030d4:	4b14      	ldr	r3, [pc, #80]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80030da:	4b13      	ldr	r3, [pc, #76]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030dc:	2200      	movs	r2, #0
 80030de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80030e0:	4811      	ldr	r0, [pc, #68]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030e2:	f004 f913 	bl	800730c <HAL_UART_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80030ec:	f000 f966 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80030f0:	2100      	movs	r1, #0
 80030f2:	480d      	ldr	r0, [pc, #52]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 80030f4:	f005 fa78 	bl	80085e8 <HAL_UARTEx_SetTxFifoThreshold>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80030fe:	f000 f95d 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003102:	2100      	movs	r1, #0
 8003104:	4808      	ldr	r0, [pc, #32]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 8003106:	f005 faad 	bl	8008664 <HAL_UARTEx_SetRxFifoThreshold>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8003110:	f000 f954 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8003114:	4804      	ldr	r0, [pc, #16]	@ (8003128 <MX_LPUART1_UART_Init+0x88>)
 8003116:	f005 fa2e 	bl	8008576 <HAL_UARTEx_DisableFifoMode>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8003120:	f000 f94c 	bl	80033bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20003484 	.word	0x20003484
 800312c:	40008000 	.word	0x40008000
 8003130:	00033324 	.word	0x00033324

08003134 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003138:	4b23      	ldr	r3, [pc, #140]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 800313a:	4a24      	ldr	r2, [pc, #144]	@ (80031cc <MX_USART1_UART_Init+0x98>)
 800313c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800313e:	4b22      	ldr	r3, [pc, #136]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003140:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003144:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003146:	4b20      	ldr	r3, [pc, #128]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003148:	2200      	movs	r2, #0
 800314a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800314c:	4b1e      	ldr	r3, [pc, #120]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 800314e:	2200      	movs	r2, #0
 8003150:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003152:	4b1d      	ldr	r3, [pc, #116]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003154:	2200      	movs	r2, #0
 8003156:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003158:	4b1b      	ldr	r3, [pc, #108]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 800315a:	220c      	movs	r2, #12
 800315c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800315e:	4b1a      	ldr	r3, [pc, #104]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003164:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003166:	2200      	movs	r2, #0
 8003168:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800316a:	4b17      	ldr	r3, [pc, #92]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003170:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003176:	4b14      	ldr	r3, [pc, #80]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003178:	2200      	movs	r2, #0
 800317a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LIN_Init(&huart1, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 800317c:	2100      	movs	r1, #0
 800317e:	4812      	ldr	r0, [pc, #72]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003180:	f004 f914 	bl	80073ac <HAL_LIN_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800318a:	f000 f917 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800318e:	2100      	movs	r1, #0
 8003190:	480d      	ldr	r0, [pc, #52]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 8003192:	f005 fa29 	bl	80085e8 <HAL_UARTEx_SetTxFifoThreshold>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 800319c:	f000 f90e 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031a0:	2100      	movs	r1, #0
 80031a2:	4809      	ldr	r0, [pc, #36]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 80031a4:	f005 fa5e 	bl	8008664 <HAL_UARTEx_SetRxFifoThreshold>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80031ae:	f000 f905 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80031b2:	4805      	ldr	r0, [pc, #20]	@ (80031c8 <MX_USART1_UART_Init+0x94>)
 80031b4:	f005 f9df 	bl	8008576 <HAL_UARTEx_DisableFifoMode>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80031be:	f000 f8fd 	bl	80033bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20003518 	.word	0x20003518
 80031cc:	40013800 	.word	0x40013800

080031d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031d4:	4b23      	ldr	r3, [pc, #140]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 80031d6:	4a24      	ldr	r2, [pc, #144]	@ (8003268 <MX_USART2_UART_Init+0x98>)
 80031d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031da:	4b22      	ldr	r3, [pc, #136]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 80031dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031e2:	4b20      	ldr	r3, [pc, #128]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031e8:	4b1e      	ldr	r3, [pc, #120]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 80031f6:	220c      	movs	r2, #12
 80031f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003200:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 8003202:	2200      	movs	r2, #0
 8003204:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003206:	4b17      	ldr	r3, [pc, #92]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 8003208:	2200      	movs	r2, #0
 800320a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800320c:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 800320e:	2200      	movs	r2, #0
 8003210:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003212:	4b14      	ldr	r3, [pc, #80]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 8003214:	2200      	movs	r2, #0
 8003216:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LIN_Init(&huart2, UART_LINBREAKDETECTLENGTH_10B) != HAL_OK)
 8003218:	2100      	movs	r1, #0
 800321a:	4812      	ldr	r0, [pc, #72]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 800321c:	f004 f8c6 	bl	80073ac <HAL_LIN_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8003226:	f000 f8c9 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800322a:	2100      	movs	r1, #0
 800322c:	480d      	ldr	r0, [pc, #52]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 800322e:	f005 f9db 	bl	80085e8 <HAL_UARTEx_SetTxFifoThreshold>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003238:	f000 f8c0 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800323c:	2100      	movs	r1, #0
 800323e:	4809      	ldr	r0, [pc, #36]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 8003240:	f005 fa10 	bl	8008664 <HAL_UARTEx_SetRxFifoThreshold>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800324a:	f000 f8b7 	bl	80033bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800324e:	4805      	ldr	r0, [pc, #20]	@ (8003264 <MX_USART2_UART_Init+0x94>)
 8003250:	f005 f991 	bl	8008576 <HAL_UARTEx_DisableFifoMode>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800325a:	f000 f8af 	bl	80033bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	200035ac 	.word	0x200035ac
 8003268:	40004400 	.word	0x40004400

0800326c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003272:	4b1a      	ldr	r3, [pc, #104]	@ (80032dc <MX_DMA_Init+0x70>)
 8003274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003276:	4a19      	ldr	r2, [pc, #100]	@ (80032dc <MX_DMA_Init+0x70>)
 8003278:	f043 0304 	orr.w	r3, r3, #4
 800327c:	6493      	str	r3, [r2, #72]	@ 0x48
 800327e:	4b17      	ldr	r3, [pc, #92]	@ (80032dc <MX_DMA_Init+0x70>)
 8003280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800328a:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <MX_DMA_Init+0x70>)
 800328c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800328e:	4a13      	ldr	r2, [pc, #76]	@ (80032dc <MX_DMA_Init+0x70>)
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	6493      	str	r3, [r2, #72]	@ 0x48
 8003296:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <MX_DMA_Init+0x70>)
 8003298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	200b      	movs	r0, #11
 80032a8:	f000 fd57 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80032ac:	200b      	movs	r0, #11
 80032ae:	f000 fd6e 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	2100      	movs	r1, #0
 80032b6:	200c      	movs	r0, #12
 80032b8:	f000 fd4f 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80032bc:	200c      	movs	r0, #12
 80032be:	f000 fd66 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	200d      	movs	r0, #13
 80032c8:	f000 fd47 	bl	8003d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80032cc:	200d      	movs	r0, #13
 80032ce:	f000 fd5e 	bl	8003d8e <HAL_NVIC_EnableIRQ>

}
 80032d2:	bf00      	nop
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40021000 	.word	0x40021000

080032e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e6:	f107 030c 	add.w	r3, r7, #12
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]
 80032f0:	609a      	str	r2, [r3, #8]
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80032f6:	4b2f      	ldr	r3, [pc, #188]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 80032f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fa:	4a2e      	ldr	r2, [pc, #184]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 80032fc:	f043 0320 	orr.w	r3, r3, #32
 8003300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003302:	4b2c      	ldr	r3, [pc, #176]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800330e:	4b29      	ldr	r3, [pc, #164]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 8003310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003312:	4a28      	ldr	r2, [pc, #160]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800331a:	4b26      	ldr	r3, [pc, #152]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 800331c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	4b23      	ldr	r3, [pc, #140]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 8003328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800332a:	4a22      	ldr	r2, [pc, #136]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 800332c:	f043 0302 	orr.w	r3, r3, #2
 8003330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003332:	4b20      	ldr	r3, [pc, #128]	@ (80033b4 <MX_GPIO_Init+0xd4>)
 8003334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 800333e:	2200      	movs	r2, #0
 8003340:	2122      	movs	r1, #34	@ 0x22
 8003342:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003346:	f001 faa9 	bl	800489c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 800334a:	2200      	movs	r2, #0
 800334c:	2170      	movs	r1, #112	@ 0x70
 800334e:	481a      	ldr	r0, [pc, #104]	@ (80033b8 <MX_GPIO_Init+0xd8>)
 8003350:	f001 faa4 	bl	800489c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8003354:	2322      	movs	r3, #34	@ 0x22
 8003356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003358:	2301      	movs	r3, #1
 800335a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003360:	2300      	movs	r3, #0
 8003362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4619      	mov	r1, r3
 800336a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800336e:	f001 f831 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_8;
 8003372:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8003376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003378:	2300      	movs	r3, #0
 800337a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003380:	f107 030c 	add.w	r3, r7, #12
 8003384:	4619      	mov	r1, r3
 8003386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800338a:	f001 f823 	bl	80043d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800338e:	2370      	movs	r3, #112	@ 0x70
 8003390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003392:	2301      	movs	r3, #1
 8003394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003396:	2300      	movs	r3, #0
 8003398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	4619      	mov	r1, r3
 80033a4:	4804      	ldr	r0, [pc, #16]	@ (80033b8 <MX_GPIO_Init+0xd8>)
 80033a6:	f001 f815 	bl	80043d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80033aa:	bf00      	nop
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	48000400 	.word	0x48000400

080033bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033c0:	b672      	cpsid	i
}
 80033c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033c4:	bf00      	nop
 80033c6:	e7fd      	b.n	80033c4 <Error_Handler+0x8>

080033c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ce:	4b0f      	ldr	r3, [pc, #60]	@ (800340c <HAL_MspInit+0x44>)
 80033d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033d2:	4a0e      	ldr	r2, [pc, #56]	@ (800340c <HAL_MspInit+0x44>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80033da:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <HAL_MspInit+0x44>)
 80033dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	4b09      	ldr	r3, [pc, #36]	@ (800340c <HAL_MspInit+0x44>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	4a08      	ldr	r2, [pc, #32]	@ (800340c <HAL_MspInit+0x44>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_MspInit+0x44>)
 80033f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80033fe:	f003 f857 	bl	80064b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40021000 	.word	0x40021000

08003410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b0a0      	sub	sp, #128	@ 0x80
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003418:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003428:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800342c:	2244      	movs	r2, #68	@ 0x44
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f00b f87f 	bl	800e534 <memset>
  if(huart->Instance==LPUART1)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a66      	ldr	r2, [pc, #408]	@ (80035d4 <HAL_UART_MspInit+0x1c4>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d161      	bne.n	8003504 <HAL_UART_MspInit+0xf4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8003440:	2320      	movs	r3, #32
 8003442:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8003444:	2300      	movs	r3, #0
 8003446:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003448:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800344c:	4618      	mov	r0, r3
 800344e:	f003 fd6d 	bl	8006f2c <HAL_RCCEx_PeriphCLKConfig>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003458:	f7ff ffb0 	bl	80033bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800345c:	4b5e      	ldr	r3, [pc, #376]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 800345e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003460:	4a5d      	ldr	r2, [pc, #372]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8003468:	4b5b      	ldr	r3, [pc, #364]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 800346a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346c:	f003 0301 	and.w	r3, r3, #1
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
 8003472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003474:	4b58      	ldr	r3, [pc, #352]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003478:	4a57      	ldr	r2, [pc, #348]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 800347a:	f043 0301 	orr.w	r3, r3, #1
 800347e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003480:	4b55      	ldr	r3, [pc, #340]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	623b      	str	r3, [r7, #32]
 800348a:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800348c:	230c      	movs	r3, #12
 800348e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003490:	2302      	movs	r3, #2
 8003492:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003494:	2300      	movs	r3, #0
 8003496:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003498:	2300      	movs	r3, #0
 800349a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800349c:	230c      	movs	r3, #12
 800349e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80034a4:	4619      	mov	r1, r3
 80034a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034aa:	f000 ff93 	bl	80043d4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 80034ae:	4b4b      	ldr	r3, [pc, #300]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034b0:	4a4b      	ldr	r2, [pc, #300]	@ (80035e0 <HAL_UART_MspInit+0x1d0>)
 80034b2:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80034b4:	4b49      	ldr	r3, [pc, #292]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034b6:	2222      	movs	r2, #34	@ 0x22
 80034b8:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ba:	4b48      	ldr	r3, [pc, #288]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034c0:	4b46      	ldr	r3, [pc, #280]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034c6:	4b45      	ldr	r3, [pc, #276]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034c8:	2280      	movs	r2, #128	@ 0x80
 80034ca:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034cc:	4b43      	ldr	r3, [pc, #268]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034d2:	4b42      	ldr	r3, [pc, #264]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 80034d8:	4b40      	ldr	r3, [pc, #256]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034da:	2220      	movs	r2, #32
 80034dc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034de:	4b3f      	ldr	r3, [pc, #252]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80034e4:	483d      	ldr	r0, [pc, #244]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034e6:	f000 fc6d 	bl	8003dc4 <HAL_DMA_Init>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 80034f0:	f7ff ff64 	bl	80033bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a39      	ldr	r2, [pc, #228]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80034fc:	4a37      	ldr	r2, [pc, #220]	@ (80035dc <HAL_UART_MspInit+0x1cc>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003502:	e0f8      	b.n	80036f6 <HAL_UART_MspInit+0x2e6>
  else if(huart->Instance==USART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a36      	ldr	r2, [pc, #216]	@ (80035e4 <HAL_UART_MspInit+0x1d4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d170      	bne.n	80035f0 <HAL_UART_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800350e:	2301      	movs	r3, #1
 8003510:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003512:	2300      	movs	r3, #0
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003516:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800351a:	4618      	mov	r0, r3
 800351c:	f003 fd06 	bl	8006f2c <HAL_RCCEx_PeriphCLKConfig>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_UART_MspInit+0x11a>
      Error_Handler();
 8003526:	f7ff ff49 	bl	80033bc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800352a:	4b2b      	ldr	r3, [pc, #172]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 800352c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352e:	4a2a      	ldr	r2, [pc, #168]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 8003530:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003534:	6613      	str	r3, [r2, #96]	@ 0x60
 8003536:	4b28      	ldr	r3, [pc, #160]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 8003544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003546:	4a24      	ldr	r2, [pc, #144]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800354e:	4b22      	ldr	r3, [pc, #136]	@ (80035d8 <HAL_UART_MspInit+0x1c8>)
 8003550:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	61bb      	str	r3, [r7, #24]
 8003558:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800355a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800355e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003560:	2302      	movs	r3, #2
 8003562:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003564:	2300      	movs	r3, #0
 8003566:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003568:	2300      	movs	r3, #0
 800356a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800356c:	2307      	movs	r3, #7
 800356e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003570:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003574:	4619      	mov	r1, r3
 8003576:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800357a:	f000 ff2b 	bl	80043d4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800357e:	4b1a      	ldr	r3, [pc, #104]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 8003580:	4a1a      	ldr	r2, [pc, #104]	@ (80035ec <HAL_UART_MspInit+0x1dc>)
 8003582:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003584:	4b18      	ldr	r3, [pc, #96]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 8003586:	2218      	movs	r2, #24
 8003588:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800358a:	4b17      	ldr	r3, [pc, #92]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 800358c:	2200      	movs	r2, #0
 800358e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003590:	4b15      	ldr	r3, [pc, #84]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 8003592:	2200      	movs	r2, #0
 8003594:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003596:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 8003598:	2280      	movs	r2, #128	@ 0x80
 800359a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800359c:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 800359e:	2200      	movs	r2, #0
 80035a0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a2:	4b11      	ldr	r3, [pc, #68]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80035a8:	4b0f      	ldr	r3, [pc, #60]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 80035aa:	2220      	movs	r2, #32
 80035ac:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ae:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80035b4:	480c      	ldr	r0, [pc, #48]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 80035b6:	f000 fc05 	bl	8003dc4 <HAL_DMA_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_UART_MspInit+0x1b4>
      Error_Handler();
 80035c0:	f7ff fefc 	bl	80033bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a08      	ldr	r2, [pc, #32]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 80035c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80035cc:	4a06      	ldr	r2, [pc, #24]	@ (80035e8 <HAL_UART_MspInit+0x1d8>)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80035d2:	e090      	b.n	80036f6 <HAL_UART_MspInit+0x2e6>
 80035d4:	40008000 	.word	0x40008000
 80035d8:	40021000 	.word	0x40021000
 80035dc:	20003640 	.word	0x20003640
 80035e0:	40020030 	.word	0x40020030
 80035e4:	40013800 	.word	0x40013800
 80035e8:	200036a0 	.word	0x200036a0
 80035ec:	40020008 	.word	0x40020008
  else if(huart->Instance==USART2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a42      	ldr	r2, [pc, #264]	@ (8003700 <HAL_UART_MspInit+0x2f0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d17d      	bne.n	80036f6 <HAL_UART_MspInit+0x2e6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80035fa:	2302      	movs	r3, #2
 80035fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80035fe:	2300      	movs	r3, #0
 8003600:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fc90 	bl	8006f2c <HAL_RCCEx_PeriphCLKConfig>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_UART_MspInit+0x206>
      Error_Handler();
 8003612:	f7ff fed3 	bl	80033bc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003616:	4b3b      	ldr	r3, [pc, #236]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	4a3a      	ldr	r2, [pc, #232]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 800361c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003620:	6593      	str	r3, [r2, #88]	@ 0x58
 8003622:	4b38      	ldr	r3, [pc, #224]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	4b35      	ldr	r3, [pc, #212]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 8003630:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003632:	4a34      	ldr	r2, [pc, #208]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 8003634:	f043 0301 	orr.w	r3, r3, #1
 8003638:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800363a:	4b32      	ldr	r3, [pc, #200]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 800363c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	613b      	str	r3, [r7, #16]
 8003644:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003646:	4b2f      	ldr	r3, [pc, #188]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 8003648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800364a:	4a2e      	ldr	r2, [pc, #184]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 800364c:	f043 0302 	orr.w	r3, r3, #2
 8003650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003652:	4b2c      	ldr	r3, [pc, #176]	@ (8003704 <HAL_UART_MspInit+0x2f4>)
 8003654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800365e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003662:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366c:	2300      	movs	r3, #0
 800366e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003670:	2307      	movs	r3, #7
 8003672:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003674:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003678:	4619      	mov	r1, r3
 800367a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800367e:	f000 fea9 	bl	80043d4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003682:	2308      	movs	r3, #8
 8003684:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003686:	2302      	movs	r3, #2
 8003688:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368a:	2300      	movs	r3, #0
 800368c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800368e:	2300      	movs	r3, #0
 8003690:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003692:	2307      	movs	r3, #7
 8003694:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003696:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800369a:	4619      	mov	r1, r3
 800369c:	481a      	ldr	r0, [pc, #104]	@ (8003708 <HAL_UART_MspInit+0x2f8>)
 800369e:	f000 fe99 	bl	80043d4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel2;
 80036a2:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003710 <HAL_UART_MspInit+0x300>)
 80036a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80036a8:	4b18      	ldr	r3, [pc, #96]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036aa:	221a      	movs	r2, #26
 80036ac:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ae:	4b17      	ldr	r3, [pc, #92]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036b4:	4b15      	ldr	r3, [pc, #84]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036ba:	4b14      	ldr	r3, [pc, #80]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036bc:	2280      	movs	r2, #128	@ 0x80
 80036be:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036c0:	4b12      	ldr	r3, [pc, #72]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036c6:	4b11      	ldr	r3, [pc, #68]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80036cc:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036ce:	2220      	movs	r2, #32
 80036d0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036d2:	4b0e      	ldr	r3, [pc, #56]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036d8:	480c      	ldr	r0, [pc, #48]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036da:	f000 fb73 	bl	8003dc4 <HAL_DMA_Init>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 80036e4:	f7ff fe6a 	bl	80033bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a08      	ldr	r2, [pc, #32]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80036f0:	4a06      	ldr	r2, [pc, #24]	@ (800370c <HAL_UART_MspInit+0x2fc>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80036f6:	bf00      	nop
 80036f8:	3780      	adds	r7, #128	@ 0x80
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	40004400 	.word	0x40004400
 8003704:	40021000 	.word	0x40021000
 8003708:	48000400 	.word	0x48000400
 800370c:	20003700 	.word	0x20003700
 8003710:	4002001c 	.word	0x4002001c

08003714 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a25      	ldr	r2, [pc, #148]	@ (80037b8 <HAL_UART_MspDeInit+0xa4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d111      	bne.n	800374a <HAL_UART_MspDeInit+0x36>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8003726:	4b25      	ldr	r3, [pc, #148]	@ (80037bc <HAL_UART_MspDeInit+0xa8>)
 8003728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372a:	4a24      	ldr	r2, [pc, #144]	@ (80037bc <HAL_UART_MspDeInit+0xa8>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	65d3      	str	r3, [r2, #92]	@ 0x5c

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003732:	210c      	movs	r1, #12
 8003734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003738:	f000 ffce 	bl	80046d8 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003742:	4618      	mov	r0, r3
 8003744:	f000 fbe6 	bl	8003f14 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8003748:	e032      	b.n	80037b0 <HAL_UART_MspDeInit+0x9c>
  else if(huart->Instance==USART1)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1c      	ldr	r2, [pc, #112]	@ (80037c0 <HAL_UART_MspDeInit+0xac>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d112      	bne.n	800377a <HAL_UART_MspDeInit+0x66>
    __HAL_RCC_USART1_CLK_DISABLE();
 8003754:	4b19      	ldr	r3, [pc, #100]	@ (80037bc <HAL_UART_MspDeInit+0xa8>)
 8003756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003758:	4a18      	ldr	r2, [pc, #96]	@ (80037bc <HAL_UART_MspDeInit+0xa8>)
 800375a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800375e:	6613      	str	r3, [r2, #96]	@ 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003760:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003764:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003768:	f000 ffb6 	bl	80046d8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fbce 	bl	8003f14 <HAL_DMA_DeInit>
}
 8003778:	e01a      	b.n	80037b0 <HAL_UART_MspDeInit+0x9c>
  else if(huart->Instance==USART2)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a11      	ldr	r2, [pc, #68]	@ (80037c4 <HAL_UART_MspDeInit+0xb0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d115      	bne.n	80037b0 <HAL_UART_MspDeInit+0x9c>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003784:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <HAL_UART_MspDeInit+0xa8>)
 8003786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003788:	4a0c      	ldr	r2, [pc, #48]	@ (80037bc <HAL_UART_MspDeInit+0xa8>)
 800378a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800378e:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 8003790:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003794:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003798:	f000 ff9e 	bl	80046d8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 800379c:	2108      	movs	r1, #8
 800379e:	480a      	ldr	r0, [pc, #40]	@ (80037c8 <HAL_UART_MspDeInit+0xb4>)
 80037a0:	f000 ff9a 	bl	80046d8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fbb2 	bl	8003f14 <HAL_DMA_DeInit>
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40008000 	.word	0x40008000
 80037bc:	40021000 	.word	0x40021000
 80037c0:	40013800 	.word	0x40013800
 80037c4:	40004400 	.word	0x40004400
 80037c8:	48000400 	.word	0x48000400

080037cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80037d0:	bf00      	nop
 80037d2:	e7fd      	b.n	80037d0 <NMI_Handler+0x4>

080037d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <HardFault_Handler+0x4>

080037dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <MemManage_Handler+0x4>

080037e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e8:	bf00      	nop
 80037ea:	e7fd      	b.n	80037e8 <BusFault_Handler+0x4>

080037ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037f0:	bf00      	nop
 80037f2:	e7fd      	b.n	80037f0 <UsageFault_Handler+0x4>

080037f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037f8:	bf00      	nop
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003802:	b480      	push	{r7}
 8003804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003806:	bf00      	nop
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003822:	f000 f97f 	bl	8003b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003826:	bf00      	nop
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003830:	4802      	ldr	r0, [pc, #8]	@ (800383c <DMA1_Channel1_IRQHandler+0x10>)
 8003832:	f000 fc80 	bl	8004136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003836:	bf00      	nop
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	200036a0 	.word	0x200036a0

08003840 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003844:	4802      	ldr	r0, [pc, #8]	@ (8003850 <DMA1_Channel2_IRQHandler+0x10>)
 8003846:	f000 fc76 	bl	8004136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800384a:	bf00      	nop
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	20003700 	.word	0x20003700

08003854 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8003858:	4802      	ldr	r0, [pc, #8]	@ (8003864 <DMA1_Channel3_IRQHandler+0x10>)
 800385a:	f000 fc6c 	bl	8004136 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20003640 	.word	0x20003640

08003868 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800386c:	4802      	ldr	r0, [pc, #8]	@ (8003878 <USB_LP_IRQHandler+0x10>)
 800386e:	f001 f937 	bl	8004ae0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	2000546c 	.word	0x2000546c

0800387c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return 1;
 8003880:	2301      	movs	r3, #1
}
 8003882:	4618      	mov	r0, r3
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_kill>:

int _kill(int pid, int sig)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003896:	f00a fed9 	bl	800e64c <__errno>
 800389a:	4603      	mov	r3, r0
 800389c:	2216      	movs	r2, #22
 800389e:	601a      	str	r2, [r3, #0]
  return -1;
 80038a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_exit>:

void _exit (int status)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80038b4:	f04f 31ff 	mov.w	r1, #4294967295
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff ffe7 	bl	800388c <_kill>
  while (1) {}    /* Make sure we hang here */
 80038be:	bf00      	nop
 80038c0:	e7fd      	b.n	80038be <_exit+0x12>

080038c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b086      	sub	sp, #24
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e00a      	b.n	80038ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80038d4:	f3af 8000 	nop.w
 80038d8:	4601      	mov	r1, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	60ba      	str	r2, [r7, #8]
 80038e0:	b2ca      	uxtb	r2, r1
 80038e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	3301      	adds	r3, #1
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	dbf0      	blt.n	80038d4 <_read+0x12>
  }

  return len;
 80038f2:	687b      	ldr	r3, [r7, #4]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e009      	b.n	8003922 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	60ba      	str	r2, [r7, #8]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	4618      	mov	r0, r3
 8003918:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3301      	adds	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	429a      	cmp	r2, r3
 8003928:	dbf1      	blt.n	800390e <_write+0x12>
  }
  return len;
 800392a:	687b      	ldr	r3, [r7, #4]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <_close>:

int _close(int file)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800393c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800395c:	605a      	str	r2, [r3, #4]
  return 0;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <_isatty>:

int _isatty(int file)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003974:	2301      	movs	r3, #1
}
 8003976:	4618      	mov	r0, r3
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003982:	b480      	push	{r7}
 8003984:	b085      	sub	sp, #20
 8003986:	af00      	add	r7, sp, #0
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039a4:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <_sbrk+0x5c>)
 80039a6:	4b15      	ldr	r3, [pc, #84]	@ (80039fc <_sbrk+0x60>)
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039b0:	4b13      	ldr	r3, [pc, #76]	@ (8003a00 <_sbrk+0x64>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039b8:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <_sbrk+0x64>)
 80039ba:	4a12      	ldr	r2, [pc, #72]	@ (8003a04 <_sbrk+0x68>)
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039be:	4b10      	ldr	r3, [pc, #64]	@ (8003a00 <_sbrk+0x64>)
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4413      	add	r3, r2
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d207      	bcs.n	80039dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039cc:	f00a fe3e 	bl	800e64c <__errno>
 80039d0:	4603      	mov	r3, r0
 80039d2:	220c      	movs	r2, #12
 80039d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039d6:	f04f 33ff 	mov.w	r3, #4294967295
 80039da:	e009      	b.n	80039f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039dc:	4b08      	ldr	r3, [pc, #32]	@ (8003a00 <_sbrk+0x64>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039e2:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <_sbrk+0x64>)
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	4a05      	ldr	r2, [pc, #20]	@ (8003a00 <_sbrk+0x64>)
 80039ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20008000 	.word	0x20008000
 80039fc:	00000400 	.word	0x00000400
 8003a00:	20003760 	.word	0x20003760
 8003a04:	20005ab8 	.word	0x20005ab8

08003a08 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003a0c:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <SystemInit+0x20>)
 8003a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a12:	4a05      	ldr	r2, [pc, #20]	@ (8003a28 <SystemInit+0x20>)
 8003a14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a1c:	bf00      	nop
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a2c:	480d      	ldr	r0, [pc, #52]	@ (8003a64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a30:	f7ff ffea 	bl	8003a08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a34:	480c      	ldr	r0, [pc, #48]	@ (8003a68 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a36:	490d      	ldr	r1, [pc, #52]	@ (8003a6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a38:	4a0d      	ldr	r2, [pc, #52]	@ (8003a70 <LoopForever+0xe>)
  movs r3, #0
 8003a3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003a3c:	e002      	b.n	8003a44 <LoopCopyDataInit>

08003a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a42:	3304      	adds	r3, #4

08003a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a48:	d3f9      	bcc.n	8003a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003a78 <LoopForever+0x16>)
  movs r3, #0
 8003a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a50:	e001      	b.n	8003a56 <LoopFillZerobss>

08003a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a54:	3204      	adds	r2, #4

08003a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a58:	d3fb      	bcc.n	8003a52 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003a5a:	f00a fdfd 	bl	800e658 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a5e:	f7ff fabb 	bl	8002fd8 <main>

08003a62 <LoopForever>:

LoopForever:
    b LoopForever
 8003a62:	e7fe      	b.n	8003a62 <LoopForever>
  ldr   r0, =_estack
 8003a64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a6c:	20000360 	.word	0x20000360
  ldr r2, =_sidata
 8003a70:	08010ef0 	.word	0x08010ef0
  ldr r2, =_sbss
 8003a74:	20001410 	.word	0x20001410
  ldr r4, =_ebss
 8003a78:	20005ab4 	.word	0x20005ab4

08003a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a7c:	e7fe      	b.n	8003a7c <ADC1_2_IRQHandler>

08003a7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a88:	2003      	movs	r0, #3
 8003a8a:	f000 f95b 	bl	8003d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a8e:	200f      	movs	r0, #15
 8003a90:	f000 f80e 	bl	8003ab0 <HAL_InitTick>
 8003a94:	4603      	mov	r3, r0
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	71fb      	strb	r3, [r7, #7]
 8003a9e:	e001      	b.n	8003aa4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003aa0:	f7ff fc92 	bl	80033c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003aa4:	79fb      	ldrb	r3, [r7, #7]

}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3708      	adds	r7, #8
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003abc:	4b16      	ldr	r3, [pc, #88]	@ (8003b18 <HAL_InitTick+0x68>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d022      	beq.n	8003b0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003ac4:	4b15      	ldr	r3, [pc, #84]	@ (8003b1c <HAL_InitTick+0x6c>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	4b13      	ldr	r3, [pc, #76]	@ (8003b18 <HAL_InitTick+0x68>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 f966 	bl	8003daa <HAL_SYSTICK_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10f      	bne.n	8003b04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2b0f      	cmp	r3, #15
 8003ae8:	d809      	bhi.n	8003afe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003aea:	2200      	movs	r2, #0
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295
 8003af2:	f000 f932 	bl	8003d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003af6:	4a0a      	ldr	r2, [pc, #40]	@ (8003b20 <HAL_InitTick+0x70>)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6013      	str	r3, [r2, #0]
 8003afc:	e007      	b.n	8003b0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
 8003b02:	e004      	b.n	8003b0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e001      	b.n	8003b0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20000014 	.word	0x20000014
 8003b1c:	2000000c 	.word	0x2000000c
 8003b20:	20000010 	.word	0x20000010

08003b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_IncTick+0x1c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b05      	ldr	r3, [pc, #20]	@ (8003b44 <HAL_IncTick+0x20>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4413      	add	r3, r2
 8003b32:	4a03      	ldr	r2, [pc, #12]	@ (8003b40 <HAL_IncTick+0x1c>)
 8003b34:	6013      	str	r3, [r2, #0]
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	20003764 	.word	0x20003764
 8003b44:	20000014 	.word	0x20000014

08003b48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b4c:	4b03      	ldr	r3, [pc, #12]	@ (8003b5c <HAL_GetTick+0x14>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	20003764 	.word	0x20003764

08003b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b68:	f7ff ffee 	bl	8003b48 <HAL_GetTick>
 8003b6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b78:	d004      	beq.n	8003b84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <HAL_Delay+0x40>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b84:	bf00      	nop
 8003b86:	f7ff ffdf 	bl	8003b48 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d8f7      	bhi.n	8003b86 <HAL_Delay+0x26>
  {
  }
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	20000014 	.word	0x20000014

08003ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd6:	4a04      	ldr	r2, [pc, #16]	@ (8003be8 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	60d3      	str	r3, [r2, #12]
}
 8003bdc:	bf00      	nop
 8003bde:	3714      	adds	r7, #20
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bf0:	4b04      	ldr	r3, [pc, #16]	@ (8003c04 <__NVIC_GetPriorityGrouping+0x18>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	0a1b      	lsrs	r3, r3, #8
 8003bf6:	f003 0307 	and.w	r3, r3, #7
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	e000ed00 	.word	0xe000ed00

08003c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	db0b      	blt.n	8003c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4907      	ldr	r1, [pc, #28]	@ (8003c40 <__NVIC_EnableIRQ+0x38>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c32:	bf00      	nop
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db0a      	blt.n	8003c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	490c      	ldr	r1, [pc, #48]	@ (8003c90 <__NVIC_SetPriority+0x4c>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c6c:	e00a      	b.n	8003c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4908      	ldr	r1, [pc, #32]	@ (8003c94 <__NVIC_SetPriority+0x50>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	440b      	add	r3, r1
 8003c82:	761a      	strb	r2, [r3, #24]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr
 8003c90:	e000e100 	.word	0xe000e100
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	@ 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f1c3 0307 	rsb	r3, r3, #7
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	bf28      	it	cs
 8003cb6:	2304      	movcs	r3, #4
 8003cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d902      	bls.n	8003cc8 <NVIC_EncodePriority+0x30>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3b03      	subs	r3, #3
 8003cc6:	e000      	b.n	8003cca <NVIC_EncodePriority+0x32>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	401a      	ands	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43d9      	mvns	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	4313      	orrs	r3, r2
         );
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	@ 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d10:	d301      	bcc.n	8003d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d12:	2301      	movs	r3, #1
 8003d14:	e00f      	b.n	8003d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d16:	4a0a      	ldr	r2, [pc, #40]	@ (8003d40 <SysTick_Config+0x40>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1e:	210f      	movs	r1, #15
 8003d20:	f04f 30ff 	mov.w	r0, #4294967295
 8003d24:	f7ff ff8e 	bl	8003c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d28:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <SysTick_Config+0x40>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2e:	4b04      	ldr	r3, [pc, #16]	@ (8003d40 <SysTick_Config+0x40>)
 8003d30:	2207      	movs	r2, #7
 8003d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	e000e010 	.word	0xe000e010

08003d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff ff29 	bl	8003ba4 <__NVIC_SetPriorityGrouping>
}
 8003d52:	bf00      	nop
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b086      	sub	sp, #24
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	4603      	mov	r3, r0
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d68:	f7ff ff40 	bl	8003bec <__NVIC_GetPriorityGrouping>
 8003d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	6978      	ldr	r0, [r7, #20]
 8003d74:	f7ff ff90 	bl	8003c98 <NVIC_EncodePriority>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff5f 	bl	8003c44 <__NVIC_SetPriority>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff ff33 	bl	8003c08 <__NVIC_EnableIRQ>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7ff ffa4 	bl	8003d00 <SysTick_Config>
 8003db8:	4603      	mov	r3, r0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3708      	adds	r7, #8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e08d      	b.n	8003ef2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4b47      	ldr	r3, [pc, #284]	@ (8003efc <HAL_DMA_Init+0x138>)
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d80f      	bhi.n	8003e02 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	461a      	mov	r2, r3
 8003de8:	4b45      	ldr	r3, [pc, #276]	@ (8003f00 <HAL_DMA_Init+0x13c>)
 8003dea:	4413      	add	r3, r2
 8003dec:	4a45      	ldr	r2, [pc, #276]	@ (8003f04 <HAL_DMA_Init+0x140>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	091b      	lsrs	r3, r3, #4
 8003df4:	009a      	lsls	r2, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a42      	ldr	r2, [pc, #264]	@ (8003f08 <HAL_DMA_Init+0x144>)
 8003dfe:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e00:	e00e      	b.n	8003e20 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	4b40      	ldr	r3, [pc, #256]	@ (8003f0c <HAL_DMA_Init+0x148>)
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4a3d      	ldr	r2, [pc, #244]	@ (8003f04 <HAL_DMA_Init+0x140>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	091b      	lsrs	r3, r3, #4
 8003e14:	009a      	lsls	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003f10 <HAL_DMA_Init+0x14c>)
 8003e1e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e64:	68fa      	ldr	r2, [r7, #12]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 fa4c 	bl	8004310 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e80:	d102      	bne.n	8003e88 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e9c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d010      	beq.n	8003ec8 <HAL_DMA_Init+0x104>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d80c      	bhi.n	8003ec8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fa6c 	bl	800438c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ec4:	605a      	str	r2, [r3, #4]
 8003ec6:	e008      	b.n	8003eda <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40020407 	.word	0x40020407
 8003f00:	bffdfff8 	.word	0xbffdfff8
 8003f04:	cccccccd 	.word	0xcccccccd
 8003f08:	40020000 	.word	0x40020000
 8003f0c:	bffdfbf8 	.word	0xbffdfbf8
 8003f10:	40020400 	.word	0x40020400

08003f14 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e07b      	b.n	800401e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0201 	bic.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	4b3a      	ldr	r3, [pc, #232]	@ (8004028 <HAL_DMA_DeInit+0x114>)
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d80f      	bhi.n	8003f62 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	461a      	mov	r2, r3
 8003f48:	4b38      	ldr	r3, [pc, #224]	@ (800402c <HAL_DMA_DeInit+0x118>)
 8003f4a:	4413      	add	r3, r2
 8003f4c:	4a38      	ldr	r2, [pc, #224]	@ (8004030 <HAL_DMA_DeInit+0x11c>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a35      	ldr	r2, [pc, #212]	@ (8004034 <HAL_DMA_DeInit+0x120>)
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003f60:	e00e      	b.n	8003f80 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b33      	ldr	r3, [pc, #204]	@ (8004038 <HAL_DMA_DeInit+0x124>)
 8003f6a:	4413      	add	r3, r2
 8003f6c:	4a30      	ldr	r2, [pc, #192]	@ (8004030 <HAL_DMA_DeInit+0x11c>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	091b      	lsrs	r3, r3, #4
 8003f74:	009a      	lsls	r2, r3, #2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a2f      	ldr	r2, [pc, #188]	@ (800403c <HAL_DMA_DeInit+0x128>)
 8003f7e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8c:	f003 021f 	and.w	r2, r3, #31
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f202 	lsl.w	r2, r1, r2
 8003f9a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 f9b7 	bl	8004310 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003fb2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00f      	beq.n	8003fdc <HAL_DMA_DeInit+0xc8>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b04      	cmp	r3, #4
 8003fc2:	d80b      	bhi.n	8003fdc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f9e1 	bl	800438c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003fda:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40020407 	.word	0x40020407
 800402c:	bffdfff8 	.word	0xbffdfff8
 8004030:	cccccccd 	.word	0xcccccccd
 8004034:	40020000 	.word	0x40020000
 8004038:	bffdfbf8 	.word	0xbffdfbf8
 800403c:	40020400 	.word	0x40020400

08004040 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_DMA_Start_IT+0x20>
 800405c:	2302      	movs	r3, #2
 800405e:	e066      	b.n	800412e <HAL_DMA_Start_IT+0xee>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d155      	bne.n	8004120 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	68f8      	ldr	r0, [r7, #12]
 800409a:	f000 f8fb 	bl	8004294 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d008      	beq.n	80040b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 020e 	orr.w	r2, r2, #14
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	e00f      	b.n	80040d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 020a 	orr.w	r2, r2, #10
 80040d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004108:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800410c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	e005      	b.n	800412c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004128:	2302      	movs	r3, #2
 800412a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800412c:	7dfb      	ldrb	r3, [r7, #23]
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b084      	sub	sp, #16
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004152:	f003 031f 	and.w	r3, r3, #31
 8004156:	2204      	movs	r2, #4
 8004158:	409a      	lsls	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4013      	ands	r3, r2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d026      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x7a>
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f003 0304 	and.w	r3, r3, #4
 8004168:	2b00      	cmp	r3, #0
 800416a:	d021      	beq.n	80041b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0320 	and.w	r3, r3, #32
 8004176:	2b00      	cmp	r3, #0
 8004178:	d107      	bne.n	800418a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0204 	bic.w	r2, r2, #4
 8004188:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800418e:	f003 021f 	and.w	r2, r3, #31
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	2104      	movs	r1, #4
 8004198:	fa01 f202 	lsl.w	r2, r1, r2
 800419c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d071      	beq.n	800428a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80041ae:	e06c      	b.n	800428a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	2202      	movs	r2, #2
 80041ba:	409a      	lsls	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4013      	ands	r3, r2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d02e      	beq.n	8004222 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d029      	beq.n	8004222 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10b      	bne.n	80041f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 020a 	bic.w	r2, r2, #10
 80041ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f8:	f003 021f 	and.w	r2, r3, #31
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004200:	2102      	movs	r1, #2
 8004202:	fa01 f202 	lsl.w	r2, r1, r2
 8004206:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d038      	beq.n	800428a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004220:	e033      	b.n	800428a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2208      	movs	r2, #8
 800422c:	409a      	lsls	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d02a      	beq.n	800428c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d025      	beq.n	800428c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020e 	bic.w	r2, r2, #14
 800424e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004254:	f003 021f 	and.w	r2, r3, #31
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425c:	2101      	movs	r1, #1
 800425e:	fa01 f202 	lsl.w	r2, r1, r2
 8004262:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427e:	2b00      	cmp	r3, #0
 8004280:	d004      	beq.n	800428c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800428a:	bf00      	nop
 800428c:	bf00      	nop
}
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80042bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c2:	f003 021f 	and.w	r2, r3, #31
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ca:	2101      	movs	r1, #1
 80042cc:	fa01 f202 	lsl.w	r2, r1, r2
 80042d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	2b10      	cmp	r3, #16
 80042e0:	d108      	bne.n	80042f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80042f2:	e007      	b.n	8004304 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	60da      	str	r2, [r3, #12]
}
 8004304:	bf00      	nop
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004310:	b480      	push	{r7}
 8004312:	b087      	sub	sp, #28
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	461a      	mov	r2, r3
 800431e:	4b16      	ldr	r3, [pc, #88]	@ (8004378 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004320:	429a      	cmp	r2, r3
 8004322:	d802      	bhi.n	800432a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004324:	4b15      	ldr	r3, [pc, #84]	@ (800437c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e001      	b.n	800432e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800432a:	4b15      	ldr	r3, [pc, #84]	@ (8004380 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800432c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	3b08      	subs	r3, #8
 800433a:	4a12      	ldr	r2, [pc, #72]	@ (8004384 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	091b      	lsrs	r3, r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004348:	089b      	lsrs	r3, r3, #2
 800434a:	009a      	lsls	r2, r3, #2
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	461a      	mov	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a0b      	ldr	r2, [pc, #44]	@ (8004388 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800435a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 031f 	and.w	r3, r3, #31
 8004362:	2201      	movs	r2, #1
 8004364:	409a      	lsls	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40020407 	.word	0x40020407
 800437c:	40020800 	.word	0x40020800
 8004380:	40020820 	.word	0x40020820
 8004384:	cccccccd 	.word	0xcccccccd
 8004388:	40020880 	.word	0x40020880

0800438c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	461a      	mov	r2, r3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a08      	ldr	r2, [pc, #32]	@ (80043d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80043ae:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2201      	movs	r2, #1
 80043ba:	409a      	lsls	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	1000823f 	.word	0x1000823f
 80043d0:	40020940 	.word	0x40020940

080043d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b087      	sub	sp, #28
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80043e2:	e15a      	b.n	800469a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2101      	movs	r1, #1
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	fa01 f303 	lsl.w	r3, r1, r3
 80043f0:	4013      	ands	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 814c 	beq.w	8004694 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d005      	beq.n	8004414 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004410:	2b02      	cmp	r3, #2
 8004412:	d130      	bne.n	8004476 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	2203      	movs	r2, #3
 8004420:	fa02 f303 	lsl.w	r3, r2, r3
 8004424:	43db      	mvns	r3, r3
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4013      	ands	r3, r2
 800442a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	005b      	lsls	r3, r3, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800444a:	2201      	movs	r2, #1
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	693a      	ldr	r2, [r7, #16]
 8004456:	4013      	ands	r3, r2
 8004458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	f003 0201 	and.w	r2, r3, #1
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f003 0303 	and.w	r3, r3, #3
 800447e:	2b03      	cmp	r3, #3
 8004480:	d017      	beq.n	80044b2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	2203      	movs	r2, #3
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	4013      	ands	r3, r2
 8004498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	005b      	lsls	r3, r3, #1
 80044a2:	fa02 f303 	lsl.w	r3, r2, r3
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f003 0303 	and.w	r3, r3, #3
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d123      	bne.n	8004506 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	08da      	lsrs	r2, r3, #3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3208      	adds	r2, #8
 80044c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	220f      	movs	r2, #15
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	4013      	ands	r3, r2
 80044e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	08da      	lsrs	r2, r3, #3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3208      	adds	r2, #8
 8004500:	6939      	ldr	r1, [r7, #16]
 8004502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	2203      	movs	r2, #3
 8004512:	fa02 f303 	lsl.w	r3, r2, r3
 8004516:	43db      	mvns	r3, r3
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4013      	ands	r3, r2
 800451c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 0203 	and.w	r2, r3, #3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	fa02 f303 	lsl.w	r3, r2, r3
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4313      	orrs	r3, r2
 8004532:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 80a6 	beq.w	8004694 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004548:	4b5b      	ldr	r3, [pc, #364]	@ (80046b8 <HAL_GPIO_Init+0x2e4>)
 800454a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454c:	4a5a      	ldr	r2, [pc, #360]	@ (80046b8 <HAL_GPIO_Init+0x2e4>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6613      	str	r3, [r2, #96]	@ 0x60
 8004554:	4b58      	ldr	r3, [pc, #352]	@ (80046b8 <HAL_GPIO_Init+0x2e4>)
 8004556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004560:	4a56      	ldr	r2, [pc, #344]	@ (80046bc <HAL_GPIO_Init+0x2e8>)
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	089b      	lsrs	r3, r3, #2
 8004566:	3302      	adds	r3, #2
 8004568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800456c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	220f      	movs	r2, #15
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4013      	ands	r3, r2
 8004582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800458a:	d01f      	beq.n	80045cc <HAL_GPIO_Init+0x1f8>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a4c      	ldr	r2, [pc, #304]	@ (80046c0 <HAL_GPIO_Init+0x2ec>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d019      	beq.n	80045c8 <HAL_GPIO_Init+0x1f4>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a4b      	ldr	r2, [pc, #300]	@ (80046c4 <HAL_GPIO_Init+0x2f0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d013      	beq.n	80045c4 <HAL_GPIO_Init+0x1f0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a4a      	ldr	r2, [pc, #296]	@ (80046c8 <HAL_GPIO_Init+0x2f4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00d      	beq.n	80045c0 <HAL_GPIO_Init+0x1ec>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a49      	ldr	r2, [pc, #292]	@ (80046cc <HAL_GPIO_Init+0x2f8>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d007      	beq.n	80045bc <HAL_GPIO_Init+0x1e8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a48      	ldr	r2, [pc, #288]	@ (80046d0 <HAL_GPIO_Init+0x2fc>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_GPIO_Init+0x1e4>
 80045b4:	2305      	movs	r3, #5
 80045b6:	e00a      	b.n	80045ce <HAL_GPIO_Init+0x1fa>
 80045b8:	2306      	movs	r3, #6
 80045ba:	e008      	b.n	80045ce <HAL_GPIO_Init+0x1fa>
 80045bc:	2304      	movs	r3, #4
 80045be:	e006      	b.n	80045ce <HAL_GPIO_Init+0x1fa>
 80045c0:	2303      	movs	r3, #3
 80045c2:	e004      	b.n	80045ce <HAL_GPIO_Init+0x1fa>
 80045c4:	2302      	movs	r3, #2
 80045c6:	e002      	b.n	80045ce <HAL_GPIO_Init+0x1fa>
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <HAL_GPIO_Init+0x1fa>
 80045cc:	2300      	movs	r3, #0
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	f002 0203 	and.w	r2, r2, #3
 80045d4:	0092      	lsls	r2, r2, #2
 80045d6:	4093      	lsls	r3, r2
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80045de:	4937      	ldr	r1, [pc, #220]	@ (80046bc <HAL_GPIO_Init+0x2e8>)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	089b      	lsrs	r3, r3, #2
 80045e4:	3302      	adds	r3, #2
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045ec:	4b39      	ldr	r3, [pc, #228]	@ (80046d4 <HAL_GPIO_Init+0x300>)
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	43db      	mvns	r3, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004610:	4a30      	ldr	r2, [pc, #192]	@ (80046d4 <HAL_GPIO_Init+0x300>)
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004616:	4b2f      	ldr	r3, [pc, #188]	@ (80046d4 <HAL_GPIO_Init+0x300>)
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	43db      	mvns	r3, r3
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4013      	ands	r3, r2
 8004624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800463a:	4a26      	ldr	r2, [pc, #152]	@ (80046d4 <HAL_GPIO_Init+0x300>)
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004640:	4b24      	ldr	r3, [pc, #144]	@ (80046d4 <HAL_GPIO_Init+0x300>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	43db      	mvns	r3, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4013      	ands	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004664:	4a1b      	ldr	r2, [pc, #108]	@ (80046d4 <HAL_GPIO_Init+0x300>)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800466a:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <HAL_GPIO_Init+0x300>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	43db      	mvns	r3, r3
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4013      	ands	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800468e:	4a11      	ldr	r2, [pc, #68]	@ (80046d4 <HAL_GPIO_Init+0x300>)
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	3301      	adds	r3, #1
 8004698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	fa22 f303 	lsr.w	r3, r2, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f47f ae9d 	bne.w	80043e4 <HAL_GPIO_Init+0x10>
  }
}
 80046aa:	bf00      	nop
 80046ac:	bf00      	nop
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40021000 	.word	0x40021000
 80046bc:	40010000 	.word	0x40010000
 80046c0:	48000400 	.word	0x48000400
 80046c4:	48000800 	.word	0x48000800
 80046c8:	48000c00 	.word	0x48000c00
 80046cc:	48001000 	.word	0x48001000
 80046d0:	48001400 	.word	0x48001400
 80046d4:	40010400 	.word	0x40010400

080046d8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80046e6:	e0bd      	b.n	8004864 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 80046e8:	2201      	movs	r2, #1
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 80b0 	beq.w	800485e <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80046fe:	4a60      	ldr	r2, [pc, #384]	@ (8004880 <HAL_GPIO_DeInit+0x1a8>)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	089b      	lsrs	r3, r3, #2
 8004704:	3302      	adds	r3, #2
 8004706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	220f      	movs	r2, #15
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004726:	d01f      	beq.n	8004768 <HAL_GPIO_DeInit+0x90>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a56      	ldr	r2, [pc, #344]	@ (8004884 <HAL_GPIO_DeInit+0x1ac>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d019      	beq.n	8004764 <HAL_GPIO_DeInit+0x8c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a55      	ldr	r2, [pc, #340]	@ (8004888 <HAL_GPIO_DeInit+0x1b0>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <HAL_GPIO_DeInit+0x88>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a54      	ldr	r2, [pc, #336]	@ (800488c <HAL_GPIO_DeInit+0x1b4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d00d      	beq.n	800475c <HAL_GPIO_DeInit+0x84>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	4a53      	ldr	r2, [pc, #332]	@ (8004890 <HAL_GPIO_DeInit+0x1b8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d007      	beq.n	8004758 <HAL_GPIO_DeInit+0x80>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a52      	ldr	r2, [pc, #328]	@ (8004894 <HAL_GPIO_DeInit+0x1bc>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d101      	bne.n	8004754 <HAL_GPIO_DeInit+0x7c>
 8004750:	2305      	movs	r3, #5
 8004752:	e00a      	b.n	800476a <HAL_GPIO_DeInit+0x92>
 8004754:	2306      	movs	r3, #6
 8004756:	e008      	b.n	800476a <HAL_GPIO_DeInit+0x92>
 8004758:	2304      	movs	r3, #4
 800475a:	e006      	b.n	800476a <HAL_GPIO_DeInit+0x92>
 800475c:	2303      	movs	r3, #3
 800475e:	e004      	b.n	800476a <HAL_GPIO_DeInit+0x92>
 8004760:	2302      	movs	r3, #2
 8004762:	e002      	b.n	800476a <HAL_GPIO_DeInit+0x92>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_GPIO_DeInit+0x92>
 8004768:	2300      	movs	r3, #0
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	f002 0203 	and.w	r2, r2, #3
 8004770:	0092      	lsls	r2, r2, #2
 8004772:	4093      	lsls	r3, r2
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	429a      	cmp	r2, r3
 8004778:	d132      	bne.n	80047e0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800477a:	4b47      	ldr	r3, [pc, #284]	@ (8004898 <HAL_GPIO_DeInit+0x1c0>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	43db      	mvns	r3, r3
 8004782:	4945      	ldr	r1, [pc, #276]	@ (8004898 <HAL_GPIO_DeInit+0x1c0>)
 8004784:	4013      	ands	r3, r2
 8004786:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004788:	4b43      	ldr	r3, [pc, #268]	@ (8004898 <HAL_GPIO_DeInit+0x1c0>)
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	43db      	mvns	r3, r3
 8004790:	4941      	ldr	r1, [pc, #260]	@ (8004898 <HAL_GPIO_DeInit+0x1c0>)
 8004792:	4013      	ands	r3, r2
 8004794:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8004796:	4b40      	ldr	r3, [pc, #256]	@ (8004898 <HAL_GPIO_DeInit+0x1c0>)
 8004798:	68da      	ldr	r2, [r3, #12]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	43db      	mvns	r3, r3
 800479e:	493e      	ldr	r1, [pc, #248]	@ (8004898 <HAL_GPIO_DeInit+0x1c0>)
 80047a0:	4013      	ands	r3, r2
 80047a2:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80047a4:	4b3c      	ldr	r3, [pc, #240]	@ (8004898 <HAL_GPIO_DeInit+0x1c0>)
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	43db      	mvns	r3, r3
 80047ac:	493a      	ldr	r1, [pc, #232]	@ (8004898 <HAL_GPIO_DeInit+0x1c0>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	220f      	movs	r2, #15
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80047c2:	4a2f      	ldr	r2, [pc, #188]	@ (8004880 <HAL_GPIO_DeInit+0x1a8>)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	089b      	lsrs	r3, r3, #2
 80047c8:	3302      	adds	r3, #2
 80047ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	43da      	mvns	r2, r3
 80047d2:	482b      	ldr	r0, [pc, #172]	@ (8004880 <HAL_GPIO_DeInit+0x1a8>)
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	089b      	lsrs	r3, r3, #2
 80047d8:	400a      	ands	r2, r1
 80047da:	3302      	adds	r3, #2
 80047dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	2103      	movs	r1, #3
 80047ea:	fa01 f303 	lsl.w	r3, r1, r3
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	08da      	lsrs	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3208      	adds	r2, #8
 80047fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f003 0307 	and.w	r3, r3, #7
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	220f      	movs	r2, #15
 800480a:	fa02 f303 	lsl.w	r3, r2, r3
 800480e:	43db      	mvns	r3, r3
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	08d2      	lsrs	r2, r2, #3
 8004814:	4019      	ands	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	3208      	adds	r2, #8
 800481a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2103      	movs	r1, #3
 8004828:	fa01 f303 	lsl.w	r3, r1, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	401a      	ands	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	2101      	movs	r1, #1
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	fa01 f303 	lsl.w	r3, r1, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	401a      	ands	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	2103      	movs	r1, #3
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	401a      	ands	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	609a      	str	r2, [r3, #8]
    }

    position++;
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	3301      	adds	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	f47f af3b 	bne.w	80046e8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004872:	bf00      	nop
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	40010000 	.word	0x40010000
 8004884:	48000400 	.word	0x48000400
 8004888:	48000800 	.word	0x48000800
 800488c:	48000c00 	.word	0x48000c00
 8004890:	48001000 	.word	0x48001000
 8004894:	48001400 	.word	0x48001400
 8004898:	40010400 	.word	0x40010400

0800489c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	807b      	strh	r3, [r7, #2]
 80048a8:	4613      	mov	r3, r2
 80048aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80048ac:	787b      	ldrb	r3, [r7, #1]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80048b2:	887a      	ldrh	r2, [r7, #2]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048b8:	e002      	b.n	80048c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048ba:	887a      	ldrh	r2, [r7, #2]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	460b      	mov	r3, r1
 80048d6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80048de:	887a      	ldrh	r2, [r7, #2]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4013      	ands	r3, r2
 80048e4:	041a      	lsls	r2, r3, #16
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	43d9      	mvns	r1, r3
 80048ea:	887b      	ldrh	r3, [r7, #2]
 80048ec:	400b      	ands	r3, r1
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	619a      	str	r2, [r3, #24]
}
 80048f4:	bf00      	nop
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e0c0      	b.n	8004a94 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f008 fab0 	bl	800ce8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2203      	movs	r2, #3
 8004930:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4618      	mov	r0, r3
 800493a:	f003 ff36 	bl	80087aa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800493e:	2300      	movs	r3, #0
 8004940:	73fb      	strb	r3, [r7, #15]
 8004942:	e03e      	b.n	80049c2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004944:	7bfa      	ldrb	r2, [r7, #15]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	440b      	add	r3, r1
 8004952:	3311      	adds	r3, #17
 8004954:	2201      	movs	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004958:	7bfa      	ldrb	r2, [r7, #15]
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	440b      	add	r3, r1
 8004966:	3310      	adds	r3, #16
 8004968:	7bfa      	ldrb	r2, [r7, #15]
 800496a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	440b      	add	r3, r1
 800497a:	3313      	adds	r3, #19
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004980:	7bfa      	ldrb	r2, [r7, #15]
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	4613      	mov	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	440b      	add	r3, r1
 800498e:	3320      	adds	r3, #32
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004994:	7bfa      	ldrb	r2, [r7, #15]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	3324      	adds	r3, #36	@ 0x24
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	1c5a      	adds	r2, r3, #1
 80049ae:	4613      	mov	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	4413      	add	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	440b      	add	r3, r1
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	3301      	adds	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	791b      	ldrb	r3, [r3, #4]
 80049c6:	7bfa      	ldrb	r2, [r7, #15]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3bb      	bcc.n	8004944 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049cc:	2300      	movs	r3, #0
 80049ce:	73fb      	strb	r3, [r7, #15]
 80049d0:	e044      	b.n	8004a5c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049e8:	7bfa      	ldrb	r2, [r7, #15]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	440b      	add	r3, r1
 80049f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049fa:	7bfa      	ldrb	r2, [r7, #15]
 80049fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	440b      	add	r3, r1
 8004a0c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a14:	7bfa      	ldrb	r2, [r7, #15]
 8004a16:	6879      	ldr	r1, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	440b      	add	r3, r1
 8004a22:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	440b      	add	r3, r1
 8004a38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a40:	7bfa      	ldrb	r2, [r7, #15]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	440b      	add	r3, r1
 8004a4e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	73fb      	strb	r3, [r7, #15]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	791b      	ldrb	r3, [r3, #4]
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d3b5      	bcc.n	80049d2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3304      	adds	r3, #4
 8004a6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004a72:	f003 feb5 	bl	80087e0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	7a9b      	ldrb	r3, [r3, #10]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d102      	bne.n	8004a92 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 fc40 	bl	8006312 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d101      	bne.n	8004ab2 <HAL_PCD_Start+0x16>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e012      	b.n	8004ad8 <HAL_PCD_Start+0x3c>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f003 fe5c 	bl	800877c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f006 f91c 	bl	800ad06 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f006 f921 	bl	800ad34 <USB_ReadInterrupts>
 8004af2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fb04 	bl	800510c <PCD_EP_ISR_Handler>

    return;
 8004b04:	e110      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b22:	b292      	uxth	r2, r2
 8004b24:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f008 fa40 	bl	800cfae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b2e:	2100      	movs	r1, #0
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f8fc 	bl	8004d2e <HAL_PCD_SetAddress>

    return;
 8004b36:	e0f7      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00c      	beq.n	8004b5c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004b54:	b292      	uxth	r2, r2
 8004b56:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b5a:	e0e5      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b6e:	b29a      	uxth	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b78:	b292      	uxth	r2, r2
 8004b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004b7e:	e0d3      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d034      	beq.n	8004bf4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f022 0204 	bic.w	r2, r2, #4
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0208 	bic.w	r2, r2, #8
 8004bb4:	b292      	uxth	r2, r2
 8004bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d107      	bne.n	8004bd4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bcc:	2100      	movs	r1, #0
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f008 fbe0 	bl	800d394 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f008 fa23 	bl	800d020 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004bec:	b292      	uxth	r2, r2
 8004bee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004bf2:	e099      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d027      	beq.n	8004c4e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0208 	orr.w	r2, r2, #8
 8004c10:	b292      	uxth	r2, r2
 8004c12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c28:	b292      	uxth	r2, r2
 8004c2a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0204 	orr.w	r2, r2, #4
 8004c40:	b292      	uxth	r2, r2
 8004c42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f008 f9d0 	bl	800cfec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c4c:	e06c      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d040      	beq.n	8004cda <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c6a:	b292      	uxth	r2, r2
 8004c6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d12b      	bne.n	8004cd2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0204 	orr.w	r2, r2, #4
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 0208 	orr.w	r2, r2, #8
 8004ca4:	b292      	uxth	r2, r2
 8004ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	089b      	lsrs	r3, r3, #2
 8004cbe:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cc8:	2101      	movs	r1, #1
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f008 fb62 	bl	800d394 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004cd0:	e02a      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f008 f98a 	bl	800cfec <HAL_PCD_SuspendCallback>
    return;
 8004cd8:	e026      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00f      	beq.n	8004d04 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004cf6:	b292      	uxth	r2, r2
 8004cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f008 f948 	bl	800cf92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d02:	e011      	b.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00c      	beq.n	8004d28 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d20:	b292      	uxth	r2, r2
 8004d22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d26:	bf00      	nop
  }
}
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b082      	sub	sp, #8
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	460b      	mov	r3, r1
 8004d38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_PCD_SetAddress+0x1a>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e012      	b.n	8004d6e <HAL_PCD_SetAddress+0x40>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	78fa      	ldrb	r2, [r7, #3]
 8004d54:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	78fa      	ldrb	r2, [r7, #3]
 8004d5c:	4611      	mov	r1, r2
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f005 ffbd 	bl	800acde <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	4608      	mov	r0, r1
 8004d80:	4611      	mov	r1, r2
 8004d82:	461a      	mov	r2, r3
 8004d84:	4603      	mov	r3, r0
 8004d86:	70fb      	strb	r3, [r7, #3]
 8004d88:	460b      	mov	r3, r1
 8004d8a:	803b      	strh	r3, [r7, #0]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004d90:	2300      	movs	r3, #0
 8004d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	da0e      	bge.n	8004dba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	f003 0207 	and.w	r2, r3, #7
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	3310      	adds	r3, #16
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4413      	add	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	705a      	strb	r2, [r3, #1]
 8004db8:	e00e      	b.n	8004dd8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004dba:	78fb      	ldrb	r3, [r7, #3]
 8004dbc:	f003 0207 	and.w	r2, r3, #7
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4413      	add	r3, r2
 8004dc6:	00db      	lsls	r3, r3, #3
 8004dc8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004dcc:	687a      	ldr	r2, [r7, #4]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004de4:	883a      	ldrh	r2, [r7, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	78ba      	ldrb	r2, [r7, #2]
 8004dee:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004df0:	78bb      	ldrb	r3, [r7, #2]
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d102      	bne.n	8004dfc <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d101      	bne.n	8004e0a <HAL_PCD_EP_Open+0x94>
 8004e06:	2302      	movs	r3, #2
 8004e08:	e00e      	b.n	8004e28 <HAL_PCD_EP_Open+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68f9      	ldr	r1, [r7, #12]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f003 fcff 	bl	800881c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004e26:	7afb      	ldrb	r3, [r7, #11]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	460b      	mov	r3, r1
 8004e3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	da0e      	bge.n	8004e62 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e44:	78fb      	ldrb	r3, [r7, #3]
 8004e46:	f003 0207 	and.w	r2, r3, #7
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	3310      	adds	r3, #16
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	4413      	add	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	705a      	strb	r2, [r3, #1]
 8004e60:	e00e      	b.n	8004e80 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 0207 	and.w	r2, r3, #7
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4413      	add	r3, r2
 8004e78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	b2da      	uxtb	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d101      	bne.n	8004e9a <HAL_PCD_EP_Close+0x6a>
 8004e96:	2302      	movs	r3, #2
 8004e98:	e00e      	b.n	8004eb8 <HAL_PCD_EP_Close+0x88>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f004 f87b 	bl	8008fa4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	607a      	str	r2, [r7, #4]
 8004eca:	603b      	str	r3, [r7, #0]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ed0:	7afb      	ldrb	r3, [r7, #11]
 8004ed2:	f003 0207 	and.w	r2, r3, #7
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2200      	movs	r2, #0
 8004efe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f00:	7afb      	ldrb	r3, [r7, #11]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6979      	ldr	r1, [r7, #20]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f004 fa33 	bl	800937e <USB_EPStartXfer>

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 0207 	and.w	r2, r3, #7
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	440b      	add	r3, r1
 8004f40:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004f44:	681b      	ldr	r3, [r3, #0]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f62:	7afb      	ldrb	r3, [r7, #11]
 8004f64:	f003 0207 	and.w	r2, r3, #7
 8004f68:	4613      	mov	r3, r2
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	3310      	adds	r3, #16
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2200      	movs	r2, #0
 8004f96:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f9e:	7afb      	ldrb	r3, [r7, #11]
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	b2da      	uxtb	r2, r3
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6979      	ldr	r1, [r7, #20]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f004 f9e4 	bl	800937e <USB_EPStartXfer>

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3718      	adds	r7, #24
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fcc:	78fb      	ldrb	r3, [r7, #3]
 8004fce:	f003 0307 	and.w	r3, r3, #7
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	7912      	ldrb	r2, [r2, #4]
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d901      	bls.n	8004fde <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e03e      	b.n	800505c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	da0e      	bge.n	8005004 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fe6:	78fb      	ldrb	r3, [r7, #3]
 8004fe8:	f003 0207 	and.w	r2, r3, #7
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2201      	movs	r2, #1
 8005000:	705a      	strb	r2, [r3, #1]
 8005002:	e00c      	b.n	800501e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	4613      	mov	r3, r2
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	4413      	add	r3, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4413      	add	r3, r2
 8005016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_PCD_EP_SetStall+0x7e>
 800503a:	2302      	movs	r3, #2
 800503c:	e00e      	b.n	800505c <HAL_PCD_EP_SetStall+0x9c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	4618      	mov	r0, r3
 800504e:	f005 fd47 	bl	800aae0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005070:	78fb      	ldrb	r3, [r7, #3]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	7912      	ldrb	r2, [r2, #4]
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e040      	b.n	8005104 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005082:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005086:	2b00      	cmp	r3, #0
 8005088:	da0e      	bge.n	80050a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800508a:	78fb      	ldrb	r3, [r7, #3]
 800508c:	f003 0207 	and.w	r2, r3, #7
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	3310      	adds	r3, #16
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	705a      	strb	r2, [r3, #1]
 80050a6:	e00e      	b.n	80050c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050a8:	78fb      	ldrb	r3, [r7, #3]
 80050aa:	f003 0207 	and.w	r2, r3, #7
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	00db      	lsls	r3, r3, #3
 80050b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	4413      	add	r3, r2
 80050be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050cc:	78fb      	ldrb	r3, [r7, #3]
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	b2da      	uxtb	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_PCD_EP_ClrStall+0x82>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e00e      	b.n	8005104 <HAL_PCD_EP_ClrStall+0xa0>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68f9      	ldr	r1, [r7, #12]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f005 fd44 	bl	800ab82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3710      	adds	r7, #16
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b096      	sub	sp, #88	@ 0x58
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005114:	e3ad      	b.n	8005872 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800511e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005122:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005126:	b2db      	uxtb	r3, r3
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005130:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005134:	2b00      	cmp	r3, #0
 8005136:	f040 816f 	bne.w	8005418 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800513a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	d14c      	bne.n	80051e0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	881b      	ldrh	r3, [r3, #0]
 800514c:	b29b      	uxth	r3, r3
 800514e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005152:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005156:	81fb      	strh	r3, [r7, #14]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	89fb      	ldrh	r3, [r7, #14]
 800515e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005166:	b29b      	uxth	r3, r3
 8005168:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3310      	adds	r3, #16
 800516e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005178:	b29b      	uxth	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	4413      	add	r3, r2
 800518a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005196:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	441a      	add	r2, r3
 80051a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051a6:	2100      	movs	r1, #0
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f007 fed8 	bl	800cf5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7b1b      	ldrb	r3, [r3, #12]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 835c 	beq.w	8005872 <PCD_EP_ISR_Handler+0x766>
 80051ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 8357 	bne.w	8005872 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7b1b      	ldrb	r3, [r3, #12]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	731a      	strb	r2, [r3, #12]
 80051de:	e348      	b.n	8005872 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80051e6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	881b      	ldrh	r3, [r3, #0]
 80051ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80051f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80051f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d032      	beq.n	8005264 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005206:	b29b      	uxth	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4413      	add	r3, r2
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	6812      	ldr	r2, [r2, #0]
 8005216:	4413      	add	r3, r2
 8005218:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800521c:	881b      	ldrh	r3, [r3, #0]
 800521e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005224:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6818      	ldr	r0, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005230:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005232:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005236:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005238:	b29b      	uxth	r3, r3
 800523a:	f005 fdcd 	bl	800add8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	881b      	ldrh	r3, [r3, #0]
 8005244:	b29a      	uxth	r2, r3
 8005246:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800524a:	4013      	ands	r3, r2
 800524c:	823b      	strh	r3, [r7, #16]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	8a3a      	ldrh	r2, [r7, #16]
 8005254:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005258:	b292      	uxth	r2, r2
 800525a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f007 fe51 	bl	800cf04 <HAL_PCD_SetupStageCallback>
 8005262:	e306      	b.n	8005872 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005264:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005268:	2b00      	cmp	r3, #0
 800526a:	f280 8302 	bge.w	8005872 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29a      	uxth	r2, r3
 8005276:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800527a:	4013      	ands	r3, r2
 800527c:	83fb      	strh	r3, [r7, #30]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	8bfa      	ldrh	r2, [r7, #30]
 8005284:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005288:	b292      	uxth	r2, r2
 800528a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005294:	b29b      	uxth	r3, r3
 8005296:	461a      	mov	r2, r3
 8005298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	4413      	add	r3, r2
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	6812      	ldr	r2, [r2, #0]
 80052a4:	4413      	add	r3, r2
 80052a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d019      	beq.n	80052f0 <PCD_EP_ISR_Handler+0x1e4>
 80052bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d015      	beq.n	80052f0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6818      	ldr	r0, [r3, #0]
 80052c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ca:	6959      	ldr	r1, [r3, #20]
 80052cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80052d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052d2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	f005 fd7f 	bl	800add8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80052da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052dc:	695a      	ldr	r2, [r3, #20]
 80052de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	441a      	add	r2, r3
 80052e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052e6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80052e8:	2100      	movs	r1, #0
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f007 fe1c 	bl	800cf28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	881b      	ldrh	r3, [r3, #0]
 80052f6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80052fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80052fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005302:	2b00      	cmp	r3, #0
 8005304:	f040 82b5 	bne.w	8005872 <PCD_EP_ISR_Handler+0x766>
 8005308:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800530c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005310:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005314:	f000 82ad 	beq.w	8005872 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	61bb      	str	r3, [r7, #24]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005326:	b29b      	uxth	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	4413      	add	r3, r2
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005336:	617b      	str	r3, [r7, #20]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29b      	uxth	r3, r3
 800533e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005342:	b29a      	uxth	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b3e      	cmp	r3, #62	@ 0x3e
 800534e:	d91d      	bls.n	800538c <PCD_EP_ISR_Handler+0x280>
 8005350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	647b      	str	r3, [r7, #68]	@ 0x44
 8005358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <PCD_EP_ISR_Handler+0x25e>
 8005364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005366:	3b01      	subs	r3, #1
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b29a      	uxth	r2, r3
 8005370:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005372:	b29b      	uxth	r3, r3
 8005374:	029b      	lsls	r3, r3, #10
 8005376:	b29b      	uxth	r3, r3
 8005378:	4313      	orrs	r3, r2
 800537a:	b29b      	uxth	r3, r3
 800537c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005380:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005384:	b29a      	uxth	r2, r3
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e026      	b.n	80053da <PCD_EP_ISR_Handler+0x2ce>
 800538c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <PCD_EP_ISR_Handler+0x29e>
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	881b      	ldrh	r3, [r3, #0]
 8005398:	b29b      	uxth	r3, r3
 800539a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800539e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	801a      	strh	r2, [r3, #0]
 80053a8:	e017      	b.n	80053da <PCD_EP_ISR_Handler+0x2ce>
 80053aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	085b      	lsrs	r3, r3, #1
 80053b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <PCD_EP_ISR_Handler+0x2b8>
 80053be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053c0:	3301      	adds	r3, #1
 80053c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	029b      	lsls	r3, r3, #10
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	881b      	ldrh	r3, [r3, #0]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ea:	827b      	strh	r3, [r7, #18]
 80053ec:	8a7b      	ldrh	r3, [r7, #18]
 80053ee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80053f2:	827b      	strh	r3, [r7, #18]
 80053f4:	8a7b      	ldrh	r3, [r7, #18]
 80053f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80053fa:	827b      	strh	r3, [r7, #18]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	8a7b      	ldrh	r3, [r7, #18]
 8005402:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005406:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800540a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800540e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005412:	b29b      	uxth	r3, r3
 8005414:	8013      	strh	r3, [r2, #0]
 8005416:	e22c      	b.n	8005872 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	461a      	mov	r2, r3
 800541e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	881b      	ldrh	r3, [r3, #0]
 8005428:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800542c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005430:	2b00      	cmp	r3, #0
 8005432:	f280 80f6 	bge.w	8005622 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	461a      	mov	r2, r3
 800543c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	b29a      	uxth	r2, r3
 8005448:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800544c:	4013      	ands	r3, r2
 800544e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8005464:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005468:	b292      	uxth	r2, r2
 800546a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800546c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	4413      	add	r3, r2
 8005480:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005484:	7b1b      	ldrb	r3, [r3, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d123      	bne.n	80054d2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005492:	b29b      	uxth	r3, r3
 8005494:	461a      	mov	r2, r3
 8005496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6812      	ldr	r2, [r2, #0]
 80054a2:	4413      	add	r3, r2
 80054a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054ae:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80054b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 808e 	beq.w	80055d8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6818      	ldr	r0, [r3, #0]
 80054c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c2:	6959      	ldr	r1, [r3, #20]
 80054c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054c6:	88da      	ldrh	r2, [r3, #6]
 80054c8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80054cc:	f005 fc84 	bl	800add8 <USB_ReadPMA>
 80054d0:	e082      	b.n	80055d8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054d4:	78db      	ldrb	r3, [r3, #3]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d10a      	bne.n	80054f0 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80054da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80054de:	461a      	mov	r2, r3
 80054e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9d3 	bl	800588e <HAL_PCD_EP_DB_Receive>
 80054e8:	4603      	mov	r3, r0
 80054ea:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80054ee:	e073      	b.n	80055d8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	461a      	mov	r2, r3
 80054f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	881b      	ldrh	r3, [r3, #0]
 8005500:	b29b      	uxth	r3, r3
 8005502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	441a      	add	r2, r3
 800551c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005520:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005524:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005528:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800552c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005530:	b29b      	uxth	r3, r3
 8005532:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	461a      	mov	r2, r3
 800553a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	881b      	ldrh	r3, [r3, #0]
 8005544:	b29b      	uxth	r3, r3
 8005546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d022      	beq.n	8005594 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005556:	b29b      	uxth	r3, r3
 8005558:	461a      	mov	r2, r3
 800555a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6812      	ldr	r2, [r2, #0]
 8005566:	4413      	add	r3, r2
 8005568:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005572:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005576:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800557a:	2b00      	cmp	r3, #0
 800557c:	d02c      	beq.n	80055d8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005584:	6959      	ldr	r1, [r3, #20]
 8005586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005588:	891a      	ldrh	r2, [r3, #8]
 800558a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800558e:	f005 fc23 	bl	800add8 <USB_ReadPMA>
 8005592:	e021      	b.n	80055d8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800559c:	b29b      	uxth	r3, r3
 800559e:	461a      	mov	r2, r3
 80055a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	00db      	lsls	r3, r3, #3
 80055a6:	4413      	add	r3, r2
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	4413      	add	r3, r2
 80055ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80055b2:	881b      	ldrh	r3, [r3, #0]
 80055b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055b8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80055bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6818      	ldr	r0, [r3, #0]
 80055c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ca:	6959      	ldr	r1, [r3, #20]
 80055cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ce:	895a      	ldrh	r2, [r3, #10]
 80055d0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80055d4:	f005 fc00 	bl	800add8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80055d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80055e0:	441a      	add	r2, r3
 80055e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80055e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055e8:	695a      	ldr	r2, [r3, #20]
 80055ea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80055ee:	441a      	add	r2, r3
 80055f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80055f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d005      	beq.n	8005608 <PCD_EP_ISR_Handler+0x4fc>
 80055fc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	429a      	cmp	r2, r3
 8005606:	d206      	bcs.n	8005616 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f007 fc8a 	bl	800cf28 <HAL_PCD_DataOutStageCallback>
 8005614:	e005      	b.n	8005622 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800561c:	4618      	mov	r0, r3
 800561e:	f003 feae 	bl	800937e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005622:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	f000 8121 	beq.w	8005872 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005630:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005634:	4613      	mov	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	3310      	adds	r3, #16
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	461a      	mov	r2, r3
 800564a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800565a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	441a      	add	r2, r3
 8005670:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005674:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005678:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800567c:	b29b      	uxth	r3, r3
 800567e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005682:	78db      	ldrb	r3, [r3, #3]
 8005684:	2b01      	cmp	r3, #1
 8005686:	f040 80a2 	bne.w	80057ce <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800568a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568c:	2200      	movs	r2, #0
 800568e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005692:	7b1b      	ldrb	r3, [r3, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	f000 8093 	beq.w	80057c0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800569a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800569e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d046      	beq.n	8005734 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a8:	785b      	ldrb	r3, [r3, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d126      	bne.n	80056fc <PCD_EP_ISR_Handler+0x5f0>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056bc:	b29b      	uxth	r3, r3
 80056be:	461a      	mov	r2, r3
 80056c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c2:	4413      	add	r3, r2
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	00da      	lsls	r2, r3, #3
 80056cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80056d4:	623b      	str	r3, [r7, #32]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	881b      	ldrh	r3, [r3, #0]
 80056da:	b29b      	uxth	r3, r3
 80056dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056e0:	b29a      	uxth	r2, r3
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	801a      	strh	r2, [r3, #0]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	801a      	strh	r2, [r3, #0]
 80056fa:	e061      	b.n	80057c0 <PCD_EP_ISR_Handler+0x6b4>
 80056fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056fe:	785b      	ldrb	r3, [r3, #1]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d15d      	bne.n	80057c0 <PCD_EP_ISR_Handler+0x6b4>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005712:	b29b      	uxth	r3, r3
 8005714:	461a      	mov	r2, r3
 8005716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005718:	4413      	add	r3, r2
 800571a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800571c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	00da      	lsls	r2, r3, #3
 8005722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005724:	4413      	add	r3, r2
 8005726:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800572a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	2200      	movs	r2, #0
 8005730:	801a      	strh	r2, [r3, #0]
 8005732:	e045      	b.n	80057c0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800573a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d126      	bne.n	8005790 <PCD_EP_ISR_Handler+0x684>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	637b      	str	r3, [r7, #52]	@ 0x34
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005750:	b29b      	uxth	r3, r3
 8005752:	461a      	mov	r2, r3
 8005754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005756:	4413      	add	r3, r2
 8005758:	637b      	str	r3, [r7, #52]	@ 0x34
 800575a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	00da      	lsls	r2, r3, #3
 8005760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005762:	4413      	add	r3, r2
 8005764:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005768:	633b      	str	r3, [r7, #48]	@ 0x30
 800576a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576c:	881b      	ldrh	r3, [r3, #0]
 800576e:	b29b      	uxth	r3, r3
 8005770:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005774:	b29a      	uxth	r2, r3
 8005776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005778:	801a      	strh	r2, [r3, #0]
 800577a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005784:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005788:	b29a      	uxth	r2, r3
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e017      	b.n	80057c0 <PCD_EP_ISR_Handler+0x6b4>
 8005790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005792:	785b      	ldrb	r3, [r3, #1]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d113      	bne.n	80057c0 <PCD_EP_ISR_Handler+0x6b4>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a6:	4413      	add	r3, r2
 80057a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	00da      	lsls	r2, r3, #3
 80057b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b2:	4413      	add	r3, r2
 80057b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	2200      	movs	r2, #0
 80057be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	4619      	mov	r1, r3
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f007 fbc9 	bl	800cf5e <HAL_PCD_DataInStageCallback>
 80057cc:	e051      	b.n	8005872 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80057ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d144      	bne.n	8005864 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6812      	ldr	r2, [r2, #0]
 80057f2:	4413      	add	r3, r2
 80057f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80057f8:	881b      	ldrh	r3, [r3, #0]
 80057fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057fe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005804:	699a      	ldr	r2, [r3, #24]
 8005806:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800580a:	429a      	cmp	r2, r3
 800580c:	d907      	bls.n	800581e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800580e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005810:	699a      	ldr	r2, [r3, #24]
 8005812:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005816:	1ad2      	subs	r2, r2, r3
 8005818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800581a:	619a      	str	r2, [r3, #24]
 800581c:	e002      	b.n	8005824 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800581e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005820:	2200      	movs	r2, #0
 8005822:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005824:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005826:	699b      	ldr	r3, [r3, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d106      	bne.n	800583a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800582c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	4619      	mov	r1, r3
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f007 fb93 	bl	800cf5e <HAL_PCD_DataInStageCallback>
 8005838:	e01b      	b.n	8005872 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800583a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800583c:	695a      	ldr	r2, [r3, #20]
 800583e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005842:	441a      	add	r2, r3
 8005844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005846:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584a:	69da      	ldr	r2, [r3, #28]
 800584c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005850:	441a      	add	r2, r3
 8005852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005854:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800585c:	4618      	mov	r0, r3
 800585e:	f003 fd8e 	bl	800937e <USB_EPStartXfer>
 8005862:	e006      	b.n	8005872 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005864:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005868:	461a      	mov	r2, r3
 800586a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f917 	bl	8005aa0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800587a:	b29b      	uxth	r3, r3
 800587c:	b21b      	sxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	f6ff ac49 	blt.w	8005116 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3758      	adds	r7, #88	@ 0x58
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b088      	sub	sp, #32
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	4613      	mov	r3, r2
 800589a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800589c:	88fb      	ldrh	r3, [r7, #6]
 800589e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d07c      	beq.n	80059a0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	4413      	add	r3, r2
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	4413      	add	r3, r2
 80058c0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	699a      	ldr	r2, [r3, #24]
 80058d0:	8b7b      	ldrh	r3, [r7, #26]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d306      	bcc.n	80058e4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	8b7b      	ldrh	r3, [r7, #26]
 80058dc:	1ad2      	subs	r2, r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	619a      	str	r2, [r3, #24]
 80058e2:	e002      	b.n	80058ea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	2200      	movs	r2, #0
 80058e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d123      	bne.n	800593a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4413      	add	r3, r2
 8005900:	881b      	ldrh	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590c:	833b      	strh	r3, [r7, #24]
 800590e:	8b3b      	ldrh	r3, [r7, #24]
 8005910:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005914:	833b      	strh	r3, [r7, #24]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	461a      	mov	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	009b      	lsls	r3, r3, #2
 8005922:	441a      	add	r2, r3
 8005924:	8b3b      	ldrh	r3, [r7, #24]
 8005926:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800592a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800592e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005936:	b29b      	uxth	r3, r3
 8005938:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800593a:	88fb      	ldrh	r3, [r7, #6]
 800593c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01f      	beq.n	8005984 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	881b      	ldrh	r3, [r3, #0]
 8005954:	b29b      	uxth	r3, r3
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800595e:	82fb      	strh	r3, [r7, #22]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	461a      	mov	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	441a      	add	r2, r3
 800596e:	8afb      	ldrh	r3, [r7, #22]
 8005970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800597c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005980:	b29b      	uxth	r3, r3
 8005982:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005984:	8b7b      	ldrh	r3, [r7, #26]
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8085 	beq.w	8005a96 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6959      	ldr	r1, [r3, #20]
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	891a      	ldrh	r2, [r3, #8]
 8005998:	8b7b      	ldrh	r3, [r7, #26]
 800599a:	f005 fa1d 	bl	800add8 <USB_ReadPMA>
 800599e:	e07a      	b.n	8005a96 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	461a      	mov	r2, r3
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	4413      	add	r3, r2
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	6812      	ldr	r2, [r2, #0]
 80059b8:	4413      	add	r3, r2
 80059ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	699a      	ldr	r2, [r3, #24]
 80059ca:	8b7b      	ldrh	r3, [r7, #26]
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d306      	bcc.n	80059de <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	8b7b      	ldrh	r3, [r7, #26]
 80059d6:	1ad2      	subs	r2, r2, r3
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	619a      	str	r2, [r3, #24]
 80059dc:	e002      	b.n	80059e4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2200      	movs	r2, #0
 80059e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d123      	bne.n	8005a34 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	881b      	ldrh	r3, [r3, #0]
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a06:	83fb      	strh	r3, [r7, #30]
 8005a08:	8bfb      	ldrh	r3, [r7, #30]
 8005a0a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005a0e:	83fb      	strh	r3, [r7, #30]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	441a      	add	r2, r3
 8005a1e:	8bfb      	ldrh	r3, [r7, #30]
 8005a20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d11f      	bne.n	8005a7e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a58:	83bb      	strh	r3, [r7, #28]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	441a      	add	r2, r3
 8005a68:	8bbb      	ldrh	r3, [r7, #28]
 8005a6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a76:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a7e:	8b7b      	ldrh	r3, [r7, #26]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d008      	beq.n	8005a96 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6959      	ldr	r1, [r3, #20]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	895a      	ldrh	r2, [r3, #10]
 8005a90:	8b7b      	ldrh	r3, [r7, #26]
 8005a92:	f005 f9a1 	bl	800add8 <USB_ReadPMA>
    }
  }

  return count;
 8005a96:	8b7b      	ldrh	r3, [r7, #26]
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3720      	adds	r7, #32
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b0a4      	sub	sp, #144	@ 0x90
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005aae:	88fb      	ldrh	r3, [r7, #6]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 81db 	beq.w	8005e70 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	4413      	add	r3, r2
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	6812      	ldr	r2, [r2, #0]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ad8:	881b      	ldrh	r3, [r3, #0]
 8005ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ade:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d907      	bls.n	8005afe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	699a      	ldr	r2, [r3, #24]
 8005af2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005af6:	1ad2      	subs	r2, r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	619a      	str	r2, [r3, #24]
 8005afc:	e002      	b.n	8005b04 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2200      	movs	r2, #0
 8005b02:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f040 80b9 	bne.w	8005c80 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	785b      	ldrb	r3, [r3, #1]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d126      	bne.n	8005b64 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	461a      	mov	r2, r3
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	4413      	add	r3, r2
 8005b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	00da      	lsls	r2, r3, #3
 8005b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b36:	4413      	add	r3, r2
 8005b38:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b48:	b29a      	uxth	r2, r3
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4c:	801a      	strh	r2, [r3, #0]
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	801a      	strh	r2, [r3, #0]
 8005b62:	e01a      	b.n	8005b9a <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	785b      	ldrb	r3, [r3, #1]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d116      	bne.n	8005b9a <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b80:	4413      	add	r3, r2
 8005b82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	00da      	lsls	r2, r3, #3
 8005b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b92:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	2200      	movs	r2, #0
 8005b98:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	785b      	ldrb	r3, [r3, #1]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d126      	bne.n	8005bf6 <HAL_PCD_EP_DB_Transmit+0x156>
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	61fb      	str	r3, [r7, #28]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	00da      	lsls	r2, r3, #3
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	4413      	add	r3, r2
 8005bca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bce:	61bb      	str	r3, [r7, #24]
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	801a      	strh	r2, [r3, #0]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29b      	uxth	r3, r3
 8005be6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	801a      	strh	r2, [r3, #0]
 8005bf4:	e017      	b.n	8005c26 <HAL_PCD_EP_DB_Transmit+0x186>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	785b      	ldrb	r3, [r3, #1]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d113      	bne.n	8005c26 <HAL_PCD_EP_DB_Transmit+0x186>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	4413      	add	r3, r2
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	00da      	lsls	r2, r3, #3
 8005c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c18:	4413      	add	r3, r2
 8005c1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c1e:	623b      	str	r3, [r7, #32]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	2200      	movs	r2, #0
 8005c24:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f007 f996 	bl	800cf5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 82fa 	beq.w	8006232 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	881b      	ldrh	r3, [r3, #0]
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c58:	82fb      	strh	r3, [r7, #22]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	441a      	add	r2, r3
 8005c68:	8afb      	ldrh	r3, [r7, #22]
 8005c6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	8013      	strh	r3, [r2, #0]
 8005c7e:	e2d8      	b.n	8006232 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d021      	beq.n	8005cce <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ca4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	f040 82ac 	bne.w	8006232 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	695a      	ldr	r2, [r3, #20]
 8005cde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ce2:	441a      	add	r2, r3
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	69da      	ldr	r2, [r3, #28]
 8005cec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005cf0:	441a      	add	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d30b      	bcc.n	8005d1a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	6a1a      	ldr	r2, [r3, #32]
 8005d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d12:	1ad2      	subs	r2, r2, r3
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	621a      	str	r2, [r3, #32]
 8005d18:	e017      	b.n	8005d4a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d108      	bne.n	8005d34 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005d22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005d32:	e00a      	b.n	8005d4a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	6a1b      	ldr	r3, [r3, #32]
 8005d40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	785b      	ldrb	r3, [r3, #1]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d165      	bne.n	8005e1e <HAL_PCD_EP_DB_Transmit+0x37e>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	461a      	mov	r2, r3
 8005d64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d66:	4413      	add	r3, r2
 8005d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	00da      	lsls	r2, r3, #3
 8005d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d72:	4413      	add	r3, r2
 8005d74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d78:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	801a      	strh	r2, [r3, #0]
 8005d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d90:	d91d      	bls.n	8005dce <HAL_PCD_EP_DB_Transmit+0x32e>
 8005d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d9e:	f003 031f 	and.w	r3, r3, #31
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d102      	bne.n	8005dac <HAL_PCD_EP_DB_Transmit+0x30c>
 8005da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005da8:	3b01      	subs	r3, #1
 8005daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	029b      	lsls	r3, r3, #10
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e044      	b.n	8005e58 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10a      	bne.n	8005dec <HAL_PCD_EP_DB_Transmit+0x34c>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de8:	801a      	strh	r2, [r3, #0]
 8005dea:	e035      	b.n	8005e58 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005dec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005df0:	085b      	lsrs	r3, r3, #1
 8005df2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005df4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d002      	beq.n	8005e06 <HAL_PCD_EP_DB_Transmit+0x366>
 8005e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e02:	3301      	adds	r3, #1
 8005e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	029b      	lsls	r3, r3, #10
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	4313      	orrs	r3, r2
 8005e16:	b29a      	uxth	r2, r3
 8005e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e1a:	801a      	strh	r2, [r3, #0]
 8005e1c:	e01c      	b.n	8005e58 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d118      	bne.n	8005e58 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	461a      	mov	r2, r3
 8005e38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e3a:	4413      	add	r3, r2
 8005e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	00da      	lsls	r2, r3, #3
 8005e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e46:	4413      	add	r3, r2
 8005e48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005e4c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e56:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6818      	ldr	r0, [r3, #0]
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6959      	ldr	r1, [r3, #20]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	891a      	ldrh	r2, [r3, #8]
 8005e64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	f004 ff73 	bl	800ad54 <USB_WritePMA>
 8005e6e:	e1e0      	b.n	8006232 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e94:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	699a      	ldr	r2, [r3, #24]
 8005e9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d307      	bcc.n	8005eb4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	699a      	ldr	r2, [r3, #24]
 8005ea8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005eac:	1ad2      	subs	r2, r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	619a      	str	r2, [r3, #24]
 8005eb2:	e002      	b.n	8005eba <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f040 80c0 	bne.w	8006044 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d126      	bne.n	8005f1a <HAL_PCD_EP_DB_Transmit+0x47a>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005ee0:	4413      	add	r3, r2
 8005ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	00da      	lsls	r2, r3, #3
 8005eea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005eec:	4413      	add	r3, r2
 8005eee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005ef2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ef4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f06:	881b      	ldrh	r3, [r3, #0]
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	e01a      	b.n	8005f50 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	785b      	ldrb	r3, [r3, #1]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d116      	bne.n	8005f50 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	461a      	mov	r2, r3
 8005f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f36:	4413      	add	r3, r2
 8005f38:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	00da      	lsls	r2, r3, #3
 8005f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f42:	4413      	add	r3, r2
 8005f44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f48:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d12b      	bne.n	8005fb6 <HAL_PCD_EP_DB_Transmit+0x516>
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f72:	4413      	add	r3, r2
 8005f74:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	00da      	lsls	r2, r3, #3
 8005f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f7e:	4413      	add	r3, r2
 8005f80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005f84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f8c:	881b      	ldrh	r3, [r3, #0]
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f9a:	801a      	strh	r2, [r3, #0]
 8005f9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005fb2:	801a      	strh	r2, [r3, #0]
 8005fb4:	e017      	b.n	8005fe6 <HAL_PCD_EP_DB_Transmit+0x546>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	785b      	ldrb	r3, [r3, #1]
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d113      	bne.n	8005fe6 <HAL_PCD_EP_DB_Transmit+0x546>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fcc:	4413      	add	r3, r2
 8005fce:	677b      	str	r3, [r7, #116]	@ 0x74
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	00da      	lsls	r2, r3, #3
 8005fd6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fd8:	4413      	add	r3, r2
 8005fda:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005fde:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fe0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	4619      	mov	r1, r3
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f006 ffb6 	bl	800cf5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005ff2:	88fb      	ldrh	r3, [r7, #6]
 8005ff4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f040 811a 	bne.w	8006232 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	461a      	mov	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	b29b      	uxth	r3, r3
 8006010:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006014:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006018:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	441a      	add	r2, r3
 800602a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006036:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
 8006042:	e0f6      	b.n	8006232 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d121      	bne.n	8006092 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	881b      	ldrh	r3, [r3, #0]
 800605e:	b29b      	uxth	r3, r3
 8006060:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006064:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006068:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	441a      	add	r2, r3
 800607a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006086:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800608a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006098:	2b01      	cmp	r3, #1
 800609a:	f040 80ca 	bne.w	8006232 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060a6:	441a      	add	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060b4:	441a      	add	r2, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	6a1a      	ldr	r2, [r3, #32]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d30b      	bcc.n	80060de <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	691b      	ldr	r3, [r3, #16]
 80060ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6a1a      	ldr	r2, [r3, #32]
 80060d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060d6:	1ad2      	subs	r2, r2, r3
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	621a      	str	r2, [r3, #32]
 80060dc:	e017      	b.n	800610e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d108      	bne.n	80060f8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80060e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80060ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80060f6:	e00a      	b.n	800610e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6a1b      	ldr	r3, [r3, #32]
 80060fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	2200      	movs	r2, #0
 8006104:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	657b      	str	r3, [r7, #84]	@ 0x54
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	785b      	ldrb	r3, [r3, #1]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d165      	bne.n	80061e8 <HAL_PCD_EP_DB_Transmit+0x748>
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800612a:	b29b      	uxth	r3, r3
 800612c:	461a      	mov	r2, r3
 800612e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006130:	4413      	add	r3, r2
 8006132:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	00da      	lsls	r2, r3, #3
 800613a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800613c:	4413      	add	r3, r2
 800613e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006142:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	b29b      	uxth	r3, r3
 800614a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800614e:	b29a      	uxth	r2, r3
 8006150:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006152:	801a      	strh	r2, [r3, #0]
 8006154:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006158:	2b3e      	cmp	r3, #62	@ 0x3e
 800615a:	d91d      	bls.n	8006198 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800615c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006164:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006168:	f003 031f 	and.w	r3, r3, #31
 800616c:	2b00      	cmp	r3, #0
 800616e:	d102      	bne.n	8006176 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006170:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006172:	3b01      	subs	r3, #1
 8006174:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006176:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29a      	uxth	r2, r3
 800617c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800617e:	b29b      	uxth	r3, r3
 8006180:	029b      	lsls	r3, r3, #10
 8006182:	b29b      	uxth	r3, r3
 8006184:	4313      	orrs	r3, r2
 8006186:	b29b      	uxth	r3, r3
 8006188:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006190:	b29a      	uxth	r2, r3
 8006192:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006194:	801a      	strh	r2, [r3, #0]
 8006196:	e041      	b.n	800621c <HAL_PCD_EP_DB_Transmit+0x77c>
 8006198:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800619c:	2b00      	cmp	r3, #0
 800619e:	d10a      	bne.n	80061b6 <HAL_PCD_EP_DB_Transmit+0x716>
 80061a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	e032      	b.n	800621c <HAL_PCD_EP_DB_Transmit+0x77c>
 80061b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d002      	beq.n	80061d0 <HAL_PCD_EP_DB_Transmit+0x730>
 80061ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061cc:	3301      	adds	r3, #1
 80061ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061d2:	881b      	ldrh	r3, [r3, #0]
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80061d8:	b29b      	uxth	r3, r3
 80061da:	029b      	lsls	r3, r3, #10
 80061dc:	b29b      	uxth	r3, r3
 80061de:	4313      	orrs	r3, r2
 80061e0:	b29a      	uxth	r2, r3
 80061e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	e019      	b.n	800621c <HAL_PCD_EP_DB_Transmit+0x77c>
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d115      	bne.n	800621c <HAL_PCD_EP_DB_Transmit+0x77c>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	461a      	mov	r2, r3
 80061fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fe:	4413      	add	r3, r2
 8006200:	657b      	str	r3, [r7, #84]	@ 0x54
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	00da      	lsls	r2, r3, #3
 8006208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620a:	4413      	add	r3, r2
 800620c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006210:	653b      	str	r3, [r7, #80]	@ 0x50
 8006212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006216:	b29a      	uxth	r2, r3
 8006218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800621a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6818      	ldr	r0, [r3, #0]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6959      	ldr	r1, [r3, #20]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	895a      	ldrh	r2, [r3, #10]
 8006228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800622c:	b29b      	uxth	r3, r3
 800622e:	f004 fd91 	bl	800ad54 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	461a      	mov	r2, r3
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4413      	add	r3, r2
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	b29b      	uxth	r3, r3
 8006244:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006248:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800624c:	82bb      	strh	r3, [r7, #20]
 800624e:	8abb      	ldrh	r3, [r7, #20]
 8006250:	f083 0310 	eor.w	r3, r3, #16
 8006254:	82bb      	strh	r3, [r7, #20]
 8006256:	8abb      	ldrh	r3, [r7, #20]
 8006258:	f083 0320 	eor.w	r3, r3, #32
 800625c:	82bb      	strh	r3, [r7, #20]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	441a      	add	r2, r3
 800626c:	8abb      	ldrh	r3, [r7, #20]
 800626e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006272:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006276:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800627a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3790      	adds	r7, #144	@ 0x90
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	607b      	str	r3, [r7, #4]
 8006296:	460b      	mov	r3, r1
 8006298:	817b      	strh	r3, [r7, #10]
 800629a:	4613      	mov	r3, r2
 800629c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800629e:	897b      	ldrh	r3, [r7, #10]
 80062a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	f003 0207 	and.w	r2, r3, #7
 80062b0:	4613      	mov	r3, r2
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	3310      	adds	r3, #16
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	4413      	add	r3, r2
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	e009      	b.n	80062d6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062c2:	897a      	ldrh	r2, [r7, #10]
 80062c4:	4613      	mov	r3, r2
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	00db      	lsls	r3, r3, #3
 80062cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	4413      	add	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062d6:	893b      	ldrh	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d107      	bne.n	80062ec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	2200      	movs	r2, #0
 80062e0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	80da      	strh	r2, [r3, #6]
 80062ea:	e00b      	b.n	8006304 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2201      	movs	r2, #1
 80062f0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	0c1b      	lsrs	r3, r3, #16
 80062fe:	b29a      	uxth	r2, r3
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	371c      	adds	r7, #28
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006312:	b480      	push	{r7}
 8006314:	b085      	sub	sp, #20
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006336:	b29b      	uxth	r3, r3
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800634a:	b29b      	uxth	r3, r3
 800634c:	f043 0302 	orr.w	r3, r3, #2
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
	...

08006368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d141      	bne.n	80063fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006376:	4b4b      	ldr	r3, [pc, #300]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800637e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006382:	d131      	bne.n	80063e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006384:	4b47      	ldr	r3, [pc, #284]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800638a:	4a46      	ldr	r2, [pc, #280]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800638c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006390:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006394:	4b43      	ldr	r3, [pc, #268]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800639c:	4a41      	ldr	r2, [pc, #260]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800639e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063a4:	4b40      	ldr	r3, [pc, #256]	@ (80064a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2232      	movs	r2, #50	@ 0x32
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
 80063ae:	4a3f      	ldr	r2, [pc, #252]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063b0:	fba2 2303 	umull	r2, r3, r2, r3
 80063b4:	0c9b      	lsrs	r3, r3, #18
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063ba:	e002      	b.n	80063c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	3b01      	subs	r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80063c2:	4b38      	ldr	r3, [pc, #224]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ce:	d102      	bne.n	80063d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d1f2      	bne.n	80063bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80063d6:	4b33      	ldr	r3, [pc, #204]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063e2:	d158      	bne.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80063e4:	2303      	movs	r3, #3
 80063e6:	e057      	b.n	8006498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063e8:	4b2e      	ldr	r3, [pc, #184]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063ee:	4a2d      	ldr	r2, [pc, #180]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063f4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80063f8:	e04d      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006400:	d141      	bne.n	8006486 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006402:	4b28      	ldr	r3, [pc, #160]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800640a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800640e:	d131      	bne.n	8006474 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006410:	4b24      	ldr	r3, [pc, #144]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006412:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006416:	4a23      	ldr	r2, [pc, #140]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006420:	4b20      	ldr	r3, [pc, #128]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006428:	4a1e      	ldr	r2, [pc, #120]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800642a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800642e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006430:	4b1d      	ldr	r3, [pc, #116]	@ (80064a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2232      	movs	r2, #50	@ 0x32
 8006436:	fb02 f303 	mul.w	r3, r2, r3
 800643a:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800643c:	fba2 2303 	umull	r2, r3, r2, r3
 8006440:	0c9b      	lsrs	r3, r3, #18
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006446:	e002      	b.n	800644e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3b01      	subs	r3, #1
 800644c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800644e:	4b15      	ldr	r3, [pc, #84]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800645a:	d102      	bne.n	8006462 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f2      	bne.n	8006448 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800646a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800646e:	d112      	bne.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e011      	b.n	8006498 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006474:	4b0b      	ldr	r3, [pc, #44]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800647a:	4a0a      	ldr	r2, [pc, #40]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800647c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006480:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8006484:	e007      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006486:	4b07      	ldr	r3, [pc, #28]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800648e:	4a05      	ldr	r2, [pc, #20]	@ (80064a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006490:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006494:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40007000 	.word	0x40007000
 80064a8:	2000000c 	.word	0x2000000c
 80064ac:	431bde83 	.word	0x431bde83

080064b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	4a04      	ldr	r2, [pc, #16]	@ (80064cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80064be:	6093      	str	r3, [r2, #8]
}
 80064c0:	bf00      	nop
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop
 80064cc:	40007000 	.word	0x40007000

080064d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b088      	sub	sp, #32
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e2fe      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d075      	beq.n	80065da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ee:	4b97      	ldr	r3, [pc, #604]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 030c 	and.w	r3, r3, #12
 80064f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064f8:	4b94      	ldr	r3, [pc, #592]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	d102      	bne.n	800650e <HAL_RCC_OscConfig+0x3e>
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b03      	cmp	r3, #3
 800650c:	d002      	beq.n	8006514 <HAL_RCC_OscConfig+0x44>
 800650e:	69bb      	ldr	r3, [r7, #24]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d10b      	bne.n	800652c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006514:	4b8d      	ldr	r3, [pc, #564]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d05b      	beq.n	80065d8 <HAL_RCC_OscConfig+0x108>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d157      	bne.n	80065d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e2d9      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006534:	d106      	bne.n	8006544 <HAL_RCC_OscConfig+0x74>
 8006536:	4b85      	ldr	r3, [pc, #532]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a84      	ldr	r2, [pc, #528]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800653c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	e01d      	b.n	8006580 <HAL_RCC_OscConfig+0xb0>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800654c:	d10c      	bne.n	8006568 <HAL_RCC_OscConfig+0x98>
 800654e:	4b7f      	ldr	r3, [pc, #508]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a7e      	ldr	r2, [pc, #504]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	4b7c      	ldr	r3, [pc, #496]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a7b      	ldr	r2, [pc, #492]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	e00b      	b.n	8006580 <HAL_RCC_OscConfig+0xb0>
 8006568:	4b78      	ldr	r3, [pc, #480]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a77      	ldr	r2, [pc, #476]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800656e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	4b75      	ldr	r3, [pc, #468]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a74      	ldr	r2, [pc, #464]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800657a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800657e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d013      	beq.n	80065b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006588:	f7fd fade 	bl	8003b48 <HAL_GetTick>
 800658c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800658e:	e008      	b.n	80065a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006590:	f7fd fada 	bl	8003b48 <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	2b64      	cmp	r3, #100	@ 0x64
 800659c:	d901      	bls.n	80065a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e29e      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065a2:	4b6a      	ldr	r3, [pc, #424]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d0f0      	beq.n	8006590 <HAL_RCC_OscConfig+0xc0>
 80065ae:	e014      	b.n	80065da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b0:	f7fd faca 	bl	8003b48 <HAL_GetTick>
 80065b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065b6:	e008      	b.n	80065ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065b8:	f7fd fac6 	bl	8003b48 <HAL_GetTick>
 80065bc:	4602      	mov	r2, r0
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	1ad3      	subs	r3, r2, r3
 80065c2:	2b64      	cmp	r3, #100	@ 0x64
 80065c4:	d901      	bls.n	80065ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80065c6:	2303      	movs	r3, #3
 80065c8:	e28a      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065ca:	4b60      	ldr	r3, [pc, #384]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1f0      	bne.n	80065b8 <HAL_RCC_OscConfig+0xe8>
 80065d6:	e000      	b.n	80065da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d075      	beq.n	80066d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065e6:	4b59      	ldr	r3, [pc, #356]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065f0:	4b56      	ldr	r3, [pc, #344]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0303 	and.w	r3, r3, #3
 80065f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	2b0c      	cmp	r3, #12
 80065fe:	d102      	bne.n	8006606 <HAL_RCC_OscConfig+0x136>
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b02      	cmp	r3, #2
 8006604:	d002      	beq.n	800660c <HAL_RCC_OscConfig+0x13c>
 8006606:	69bb      	ldr	r3, [r7, #24]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d11f      	bne.n	800664c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800660c:	4b4f      	ldr	r3, [pc, #316]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006614:	2b00      	cmp	r3, #0
 8006616:	d005      	beq.n	8006624 <HAL_RCC_OscConfig+0x154>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e25d      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006624:	4b49      	ldr	r3, [pc, #292]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	061b      	lsls	r3, r3, #24
 8006632:	4946      	ldr	r1, [pc, #280]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006634:	4313      	orrs	r3, r2
 8006636:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006638:	4b45      	ldr	r3, [pc, #276]	@ (8006750 <HAL_RCC_OscConfig+0x280>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4618      	mov	r0, r3
 800663e:	f7fd fa37 	bl	8003ab0 <HAL_InitTick>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d043      	beq.n	80066d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e249      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d023      	beq.n	800669c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006654:	4b3d      	ldr	r3, [pc, #244]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a3c      	ldr	r2, [pc, #240]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800665a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800665e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006660:	f7fd fa72 	bl	8003b48 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006666:	e008      	b.n	800667a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006668:	f7fd fa6e 	bl	8003b48 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b02      	cmp	r3, #2
 8006674:	d901      	bls.n	800667a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e232      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800667a:	4b34      	ldr	r3, [pc, #208]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006686:	4b31      	ldr	r3, [pc, #196]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	061b      	lsls	r3, r3, #24
 8006694:	492d      	ldr	r1, [pc, #180]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	604b      	str	r3, [r1, #4]
 800669a:	e01a      	b.n	80066d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800669c:	4b2b      	ldr	r3, [pc, #172]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a2a      	ldr	r2, [pc, #168]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80066a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a8:	f7fd fa4e 	bl	8003b48 <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b0:	f7fd fa4a 	bl	8003b48 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e20e      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066c2:	4b22      	ldr	r3, [pc, #136]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1f0      	bne.n	80066b0 <HAL_RCC_OscConfig+0x1e0>
 80066ce:	e000      	b.n	80066d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80066d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d041      	beq.n	8006762 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d01c      	beq.n	8006720 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066e6:	4b19      	ldr	r3, [pc, #100]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80066e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80066ec:	4a17      	ldr	r2, [pc, #92]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 80066ee:	f043 0301 	orr.w	r3, r3, #1
 80066f2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f6:	f7fd fa27 	bl	8003b48 <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066fe:	f7fd fa23 	bl	8003b48 <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e1e7      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006710:	4b0e      	ldr	r3, [pc, #56]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006712:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0ef      	beq.n	80066fe <HAL_RCC_OscConfig+0x22e>
 800671e:	e020      	b.n	8006762 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006720:	4b0a      	ldr	r3, [pc, #40]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006722:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006726:	4a09      	ldr	r2, [pc, #36]	@ (800674c <HAL_RCC_OscConfig+0x27c>)
 8006728:	f023 0301 	bic.w	r3, r3, #1
 800672c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006730:	f7fd fa0a 	bl	8003b48 <HAL_GetTick>
 8006734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006736:	e00d      	b.n	8006754 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006738:	f7fd fa06 	bl	8003b48 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b02      	cmp	r3, #2
 8006744:	d906      	bls.n	8006754 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e1ca      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
 800674a:	bf00      	nop
 800674c:	40021000 	.word	0x40021000
 8006750:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006754:	4b8c      	ldr	r3, [pc, #560]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1ea      	bne.n	8006738 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 80a6 	beq.w	80068bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006770:	2300      	movs	r3, #0
 8006772:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006774:	4b84      	ldr	r3, [pc, #528]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <HAL_RCC_OscConfig+0x2b4>
 8006780:	2301      	movs	r3, #1
 8006782:	e000      	b.n	8006786 <HAL_RCC_OscConfig+0x2b6>
 8006784:	2300      	movs	r3, #0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00d      	beq.n	80067a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800678a:	4b7f      	ldr	r3, [pc, #508]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800678c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800678e:	4a7e      	ldr	r2, [pc, #504]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006794:	6593      	str	r3, [r2, #88]	@ 0x58
 8006796:	4b7c      	ldr	r3, [pc, #496]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800679a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80067a2:	2301      	movs	r3, #1
 80067a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067a6:	4b79      	ldr	r3, [pc, #484]	@ (800698c <HAL_RCC_OscConfig+0x4bc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d118      	bne.n	80067e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067b2:	4b76      	ldr	r3, [pc, #472]	@ (800698c <HAL_RCC_OscConfig+0x4bc>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a75      	ldr	r2, [pc, #468]	@ (800698c <HAL_RCC_OscConfig+0x4bc>)
 80067b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067be:	f7fd f9c3 	bl	8003b48 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067c6:	f7fd f9bf 	bl	8003b48 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e183      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d8:	4b6c      	ldr	r3, [pc, #432]	@ (800698c <HAL_RCC_OscConfig+0x4bc>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d0f0      	beq.n	80067c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d108      	bne.n	80067fe <HAL_RCC_OscConfig+0x32e>
 80067ec:	4b66      	ldr	r3, [pc, #408]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	4a65      	ldr	r2, [pc, #404]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80067fc:	e024      	b.n	8006848 <HAL_RCC_OscConfig+0x378>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b05      	cmp	r3, #5
 8006804:	d110      	bne.n	8006828 <HAL_RCC_OscConfig+0x358>
 8006806:	4b60      	ldr	r3, [pc, #384]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680c:	4a5e      	ldr	r2, [pc, #376]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800680e:	f043 0304 	orr.w	r3, r3, #4
 8006812:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006816:	4b5c      	ldr	r3, [pc, #368]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800681c:	4a5a      	ldr	r2, [pc, #360]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006826:	e00f      	b.n	8006848 <HAL_RCC_OscConfig+0x378>
 8006828:	4b57      	ldr	r3, [pc, #348]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800682a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800682e:	4a56      	ldr	r2, [pc, #344]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006830:	f023 0301 	bic.w	r3, r3, #1
 8006834:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006838:	4b53      	ldr	r3, [pc, #332]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800683a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800683e:	4a52      	ldr	r2, [pc, #328]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006840:	f023 0304 	bic.w	r3, r3, #4
 8006844:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d016      	beq.n	800687e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006850:	f7fd f97a 	bl	8003b48 <HAL_GetTick>
 8006854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006856:	e00a      	b.n	800686e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006858:	f7fd f976 	bl	8003b48 <HAL_GetTick>
 800685c:	4602      	mov	r2, r0
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006866:	4293      	cmp	r3, r2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e138      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800686e:	4b46      	ldr	r3, [pc, #280]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d0ed      	beq.n	8006858 <HAL_RCC_OscConfig+0x388>
 800687c:	e015      	b.n	80068aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800687e:	f7fd f963 	bl	8003b48 <HAL_GetTick>
 8006882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006884:	e00a      	b.n	800689c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006886:	f7fd f95f 	bl	8003b48 <HAL_GetTick>
 800688a:	4602      	mov	r2, r0
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006894:	4293      	cmp	r3, r2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e121      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800689c:	4b3a      	ldr	r3, [pc, #232]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800689e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1ed      	bne.n	8006886 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068aa:	7ffb      	ldrb	r3, [r7, #31]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d105      	bne.n	80068bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068b0:	4b35      	ldr	r3, [pc, #212]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068b4:	4a34      	ldr	r2, [pc, #208]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068ba:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d03c      	beq.n	8006942 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	699b      	ldr	r3, [r3, #24]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01c      	beq.n	800690a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80068d0:	4b2d      	ldr	r3, [pc, #180]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80068d6:	4a2c      	ldr	r2, [pc, #176]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068d8:	f043 0301 	orr.w	r3, r3, #1
 80068dc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068e0:	f7fd f932 	bl	8003b48 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80068e8:	f7fd f92e 	bl	8003b48 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0f2      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80068fa:	4b23      	ldr	r3, [pc, #140]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 80068fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d0ef      	beq.n	80068e8 <HAL_RCC_OscConfig+0x418>
 8006908:	e01b      	b.n	8006942 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800690a:	4b1f      	ldr	r3, [pc, #124]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800690c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006910:	4a1d      	ldr	r2, [pc, #116]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006912:	f023 0301 	bic.w	r3, r3, #1
 8006916:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800691a:	f7fd f915 	bl	8003b48 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006922:	f7fd f911 	bl	8003b48 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e0d5      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006934:	4b14      	ldr	r3, [pc, #80]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800693a:	f003 0302 	and.w	r3, r3, #2
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1ef      	bne.n	8006922 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80c9 	beq.w	8006ade <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800694c:	4b0e      	ldr	r3, [pc, #56]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 030c 	and.w	r3, r3, #12
 8006954:	2b0c      	cmp	r3, #12
 8006956:	f000 8083 	beq.w	8006a60 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d15e      	bne.n	8006a20 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006962:	4b09      	ldr	r3, [pc, #36]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a08      	ldr	r2, [pc, #32]	@ (8006988 <HAL_RCC_OscConfig+0x4b8>)
 8006968:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800696c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800696e:	f7fd f8eb 	bl	8003b48 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006974:	e00c      	b.n	8006990 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006976:	f7fd f8e7 	bl	8003b48 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b02      	cmp	r3, #2
 8006982:	d905      	bls.n	8006990 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e0ab      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
 8006988:	40021000 	.word	0x40021000
 800698c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006990:	4b55      	ldr	r3, [pc, #340]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1ec      	bne.n	8006976 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800699c:	4b52      	ldr	r3, [pc, #328]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 800699e:	68da      	ldr	r2, [r3, #12]
 80069a0:	4b52      	ldr	r3, [pc, #328]	@ (8006aec <HAL_RCC_OscConfig+0x61c>)
 80069a2:	4013      	ands	r3, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6a11      	ldr	r1, [r2, #32]
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069ac:	3a01      	subs	r2, #1
 80069ae:	0112      	lsls	r2, r2, #4
 80069b0:	4311      	orrs	r1, r2
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80069b6:	0212      	lsls	r2, r2, #8
 80069b8:	4311      	orrs	r1, r2
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80069be:	0852      	lsrs	r2, r2, #1
 80069c0:	3a01      	subs	r2, #1
 80069c2:	0552      	lsls	r2, r2, #21
 80069c4:	4311      	orrs	r1, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069ca:	0852      	lsrs	r2, r2, #1
 80069cc:	3a01      	subs	r2, #1
 80069ce:	0652      	lsls	r2, r2, #25
 80069d0:	4311      	orrs	r1, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069d6:	06d2      	lsls	r2, r2, #27
 80069d8:	430a      	orrs	r2, r1
 80069da:	4943      	ldr	r1, [pc, #268]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069e0:	4b41      	ldr	r3, [pc, #260]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a40      	ldr	r2, [pc, #256]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80069ec:	4b3e      	ldr	r3, [pc, #248]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 80069f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80069f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069f8:	f7fd f8a6 	bl	8003b48 <HAL_GetTick>
 80069fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a00:	f7fd f8a2 	bl	8003b48 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e066      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a12:	4b35      	ldr	r3, [pc, #212]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0f0      	beq.n	8006a00 <HAL_RCC_OscConfig+0x530>
 8006a1e:	e05e      	b.n	8006ade <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a20:	4b31      	ldr	r3, [pc, #196]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a30      	ldr	r2, [pc, #192]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fd f88c 	bl	8003b48 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fd f888 	bl	8003b48 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e04c      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a46:	4b28      	ldr	r3, [pc, #160]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a52:	4b25      	ldr	r3, [pc, #148]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	4924      	ldr	r1, [pc, #144]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a58:	4b25      	ldr	r3, [pc, #148]	@ (8006af0 <HAL_RCC_OscConfig+0x620>)
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	60cb      	str	r3, [r1, #12]
 8006a5e:	e03e      	b.n	8006ade <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	69db      	ldr	r3, [r3, #28]
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d101      	bne.n	8006a6c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e039      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ae8 <HAL_RCC_OscConfig+0x618>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f003 0203 	and.w	r2, r3, #3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d12c      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d123      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d11b      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d113      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abc:	085b      	lsrs	r3, r3, #1
 8006abe:	3b01      	subs	r3, #1
 8006ac0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d109      	bne.n	8006ada <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad0:	085b      	lsrs	r3, r3, #1
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d001      	beq.n	8006ade <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3720      	adds	r7, #32
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	40021000 	.word	0x40021000
 8006aec:	019f800c 	.word	0x019f800c
 8006af0:	feeefffc 	.word	0xfeeefffc

08006af4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006afe:	2300      	movs	r3, #0
 8006b00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e11e      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b0c:	4b91      	ldr	r3, [pc, #580]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	683a      	ldr	r2, [r7, #0]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d910      	bls.n	8006b3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b1a:	4b8e      	ldr	r3, [pc, #568]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f023 020f 	bic.w	r2, r3, #15
 8006b22:	498c      	ldr	r1, [pc, #560]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b2a:	4b8a      	ldr	r3, [pc, #552]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d001      	beq.n	8006b3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e106      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0301 	and.w	r3, r3, #1
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d073      	beq.n	8006c30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	2b03      	cmp	r3, #3
 8006b4e:	d129      	bne.n	8006ba4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b50:	4b81      	ldr	r3, [pc, #516]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e0f4      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006b60:	f000 f99e 	bl	8006ea0 <RCC_GetSysClockFreqFromPLLSource>
 8006b64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	4a7c      	ldr	r2, [pc, #496]	@ (8006d5c <HAL_RCC_ClockConfig+0x268>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d93f      	bls.n	8006bee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b6e:	4b7a      	ldr	r3, [pc, #488]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d009      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d033      	beq.n	8006bee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d12f      	bne.n	8006bee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006b8e:	4b72      	ldr	r3, [pc, #456]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b96:	4a70      	ldr	r2, [pc, #448]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006b9e:	2380      	movs	r3, #128	@ 0x80
 8006ba0:	617b      	str	r3, [r7, #20]
 8006ba2:	e024      	b.n	8006bee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d107      	bne.n	8006bbc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bac:	4b6a      	ldr	r3, [pc, #424]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d109      	bne.n	8006bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0c6      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bbc:	4b66      	ldr	r3, [pc, #408]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d101      	bne.n	8006bcc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0be      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006bcc:	f000 f8ce 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8006bd0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	4a61      	ldr	r2, [pc, #388]	@ (8006d5c <HAL_RCC_ClockConfig+0x268>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d909      	bls.n	8006bee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bda:	4b5f      	ldr	r3, [pc, #380]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006be2:	4a5d      	ldr	r2, [pc, #372]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006be4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006be8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006bea:	2380      	movs	r3, #128	@ 0x80
 8006bec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bee:	4b5a      	ldr	r3, [pc, #360]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	f023 0203 	bic.w	r2, r3, #3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	4957      	ldr	r1, [pc, #348]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c00:	f7fc ffa2 	bl	8003b48 <HAL_GetTick>
 8006c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c06:	e00a      	b.n	8006c1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c08:	f7fc ff9e 	bl	8003b48 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d901      	bls.n	8006c1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e095      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1e:	4b4e      	ldr	r3, [pc, #312]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 020c 	and.w	r2, r3, #12
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d1eb      	bne.n	8006c08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 0302 	and.w	r3, r3, #2
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d023      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d005      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c48:	4b43      	ldr	r3, [pc, #268]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	4a42      	ldr	r2, [pc, #264]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d007      	beq.n	8006c70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006c60:	4b3d      	ldr	r3, [pc, #244]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006c68:	4a3b      	ldr	r2, [pc, #236]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006c6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c70:	4b39      	ldr	r3, [pc, #228]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4936      	ldr	r1, [pc, #216]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	2b80      	cmp	r3, #128	@ 0x80
 8006c88:	d105      	bne.n	8006c96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006c8a:	4b33      	ldr	r3, [pc, #204]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	4a32      	ldr	r2, [pc, #200]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006c90:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006c94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c96:	4b2f      	ldr	r3, [pc, #188]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d21d      	bcs.n	8006ce0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f023 020f 	bic.w	r2, r3, #15
 8006cac:	4929      	ldr	r1, [pc, #164]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006cb4:	f7fc ff48 	bl	8003b48 <HAL_GetTick>
 8006cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cbc:	f7fc ff44 	bl	8003b48 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e03b      	b.n	8006d4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cd2:	4b20      	ldr	r3, [pc, #128]	@ (8006d54 <HAL_RCC_ClockConfig+0x260>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f003 030f 	and.w	r3, r3, #15
 8006cda:	683a      	ldr	r2, [r7, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d1ed      	bne.n	8006cbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cec:	4b1a      	ldr	r3, [pc, #104]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	4917      	ldr	r1, [pc, #92]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d0a:	4b13      	ldr	r3, [pc, #76]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	490f      	ldr	r1, [pc, #60]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d1e:	f000 f825 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8006d22:	4602      	mov	r2, r0
 8006d24:	4b0c      	ldr	r3, [pc, #48]	@ (8006d58 <HAL_RCC_ClockConfig+0x264>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	490c      	ldr	r1, [pc, #48]	@ (8006d60 <HAL_RCC_ClockConfig+0x26c>)
 8006d30:	5ccb      	ldrb	r3, [r1, r3]
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	fa22 f303 	lsr.w	r3, r2, r3
 8006d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d64 <HAL_RCC_ClockConfig+0x270>)
 8006d3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d68 <HAL_RCC_ClockConfig+0x274>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fc feb4 	bl	8003ab0 <HAL_InitTick>
 8006d48:	4603      	mov	r3, r0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	40022000 	.word	0x40022000
 8006d58:	40021000 	.word	0x40021000
 8006d5c:	04c4b400 	.word	0x04c4b400
 8006d60:	08010ae4 	.word	0x08010ae4
 8006d64:	2000000c 	.word	0x2000000c
 8006d68:	20000010 	.word	0x20000010

08006d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006d72:	4b2c      	ldr	r3, [pc, #176]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 030c 	and.w	r3, r3, #12
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	d102      	bne.n	8006d84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d7e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d80:	613b      	str	r3, [r7, #16]
 8006d82:	e047      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006d84:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f003 030c 	and.w	r3, r3, #12
 8006d8c:	2b08      	cmp	r3, #8
 8006d8e:	d102      	bne.n	8006d96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d90:	4b26      	ldr	r3, [pc, #152]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d92:	613b      	str	r3, [r7, #16]
 8006d94:	e03e      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006d96:	4b23      	ldr	r3, [pc, #140]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d98:	689b      	ldr	r3, [r3, #8]
 8006d9a:	f003 030c 	and.w	r3, r3, #12
 8006d9e:	2b0c      	cmp	r3, #12
 8006da0:	d136      	bne.n	8006e10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006da2:	4b20      	ldr	r3, [pc, #128]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006da4:	68db      	ldr	r3, [r3, #12]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006dac:	4b1d      	ldr	r3, [pc, #116]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	091b      	lsrs	r3, r3, #4
 8006db2:	f003 030f 	and.w	r3, r3, #15
 8006db6:	3301      	adds	r3, #1
 8006db8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d10c      	bne.n	8006dda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc8:	4a16      	ldr	r2, [pc, #88]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dca:	68d2      	ldr	r2, [r2, #12]
 8006dcc:	0a12      	lsrs	r2, r2, #8
 8006dce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dd2:	fb02 f303 	mul.w	r3, r2, r3
 8006dd6:	617b      	str	r3, [r7, #20]
      break;
 8006dd8:	e00c      	b.n	8006df4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006dda:	4a13      	ldr	r2, [pc, #76]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de2:	4a10      	ldr	r2, [pc, #64]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006de4:	68d2      	ldr	r2, [r2, #12]
 8006de6:	0a12      	lsrs	r2, r2, #8
 8006de8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006dec:	fb02 f303 	mul.w	r3, r2, r3
 8006df0:	617b      	str	r3, [r7, #20]
      break;
 8006df2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006df4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	0e5b      	lsrs	r3, r3, #25
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	3301      	adds	r3, #1
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	e001      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e10:	2300      	movs	r3, #0
 8006e12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e14:	693b      	ldr	r3, [r7, #16]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	371c      	adds	r7, #28
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	40021000 	.word	0x40021000
 8006e28:	00f42400 	.word	0x00f42400
 8006e2c:	007a1200 	.word	0x007a1200

08006e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e34:	4b03      	ldr	r3, [pc, #12]	@ (8006e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	2000000c 	.word	0x2000000c

08006e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e4c:	f7ff fff0 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e50:	4602      	mov	r2, r0
 8006e52:	4b06      	ldr	r3, [pc, #24]	@ (8006e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	0a1b      	lsrs	r3, r3, #8
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	4904      	ldr	r1, [pc, #16]	@ (8006e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e5e:	5ccb      	ldrb	r3, [r1, r3]
 8006e60:	f003 031f 	and.w	r3, r3, #31
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	08010af4 	.word	0x08010af4

08006e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e78:	f7ff ffda 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	4b06      	ldr	r3, [pc, #24]	@ (8006e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	0adb      	lsrs	r3, r3, #11
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	4904      	ldr	r1, [pc, #16]	@ (8006e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e8a:	5ccb      	ldrb	r3, [r1, r3]
 8006e8c:	f003 031f 	and.w	r3, r3, #31
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	08010af4 	.word	0x08010af4

08006ea0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8006f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006eb2:	68db      	ldr	r3, [r3, #12]
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	3301      	adds	r3, #1
 8006ebc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b03      	cmp	r3, #3
 8006ec2:	d10c      	bne.n	8006ede <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ec4:	4a17      	ldr	r2, [pc, #92]	@ (8006f24 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ecc:	4a14      	ldr	r2, [pc, #80]	@ (8006f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ece:	68d2      	ldr	r2, [r2, #12]
 8006ed0:	0a12      	lsrs	r2, r2, #8
 8006ed2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ed6:	fb02 f303 	mul.w	r3, r2, r3
 8006eda:	617b      	str	r3, [r7, #20]
    break;
 8006edc:	e00c      	b.n	8006ef8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006ede:	4a12      	ldr	r2, [pc, #72]	@ (8006f28 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8006f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ee8:	68d2      	ldr	r2, [r2, #12]
 8006eea:	0a12      	lsrs	r2, r2, #8
 8006eec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ef0:	fb02 f303 	mul.w	r3, r2, r3
 8006ef4:	617b      	str	r3, [r7, #20]
    break;
 8006ef6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006ef8:	4b09      	ldr	r3, [pc, #36]	@ (8006f20 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	0e5b      	lsrs	r3, r3, #25
 8006efe:	f003 0303 	and.w	r3, r3, #3
 8006f02:	3301      	adds	r3, #1
 8006f04:	005b      	lsls	r3, r3, #1
 8006f06:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f10:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f12:	687b      	ldr	r3, [r7, #4]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	371c      	adds	r7, #28
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	40021000 	.word	0x40021000
 8006f24:	007a1200 	.word	0x007a1200
 8006f28:	00f42400 	.word	0x00f42400

08006f2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b086      	sub	sp, #24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f34:	2300      	movs	r3, #0
 8006f36:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f38:	2300      	movs	r3, #0
 8006f3a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	f000 8098 	beq.w	800707a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f4e:	4b43      	ldr	r3, [pc, #268]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10d      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f5a:	4b40      	ldr	r3, [pc, #256]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f5e:	4a3f      	ldr	r2, [pc, #252]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f66:	4b3d      	ldr	r3, [pc, #244]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f6e:	60bb      	str	r3, [r7, #8]
 8006f70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f72:	2301      	movs	r3, #1
 8006f74:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f76:	4b3a      	ldr	r3, [pc, #232]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a39      	ldr	r2, [pc, #228]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f82:	f7fc fde1 	bl	8003b48 <HAL_GetTick>
 8006f86:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f88:	e009      	b.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f8a:	f7fc fddd 	bl	8003b48 <HAL_GetTick>
 8006f8e:	4602      	mov	r2, r0
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d902      	bls.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	74fb      	strb	r3, [r7, #19]
        break;
 8006f9c:	e005      	b.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f9e:	4b30      	ldr	r3, [pc, #192]	@ (8007060 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d0ef      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006faa:	7cfb      	ldrb	r3, [r7, #19]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d159      	bne.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006fb0:	4b2a      	ldr	r3, [pc, #168]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01e      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d019      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006fcc:	4b23      	ldr	r3, [pc, #140]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fd8:	4b20      	ldr	r3, [pc, #128]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fde:	4a1f      	ldr	r2, [pc, #124]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006fe4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fee:	4a1b      	ldr	r2, [pc, #108]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006ff8:	4a18      	ldr	r2, [pc, #96]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f003 0301 	and.w	r3, r3, #1
 8007006:	2b00      	cmp	r3, #0
 8007008:	d016      	beq.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700a:	f7fc fd9d 	bl	8003b48 <HAL_GetTick>
 800700e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007010:	e00b      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007012:	f7fc fd99 	bl	8003b48 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007020:	4293      	cmp	r3, r2
 8007022:	d902      	bls.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007024:	2303      	movs	r3, #3
 8007026:	74fb      	strb	r3, [r7, #19]
            break;
 8007028:	e006      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800702a:	4b0c      	ldr	r3, [pc, #48]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800702c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007030:	f003 0302 	and.w	r3, r3, #2
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0ec      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007038:	7cfb      	ldrb	r3, [r7, #19]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d10b      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800703e:	4b07      	ldr	r3, [pc, #28]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007044:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800704c:	4903      	ldr	r1, [pc, #12]	@ (800705c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007054:	e008      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007056:	7cfb      	ldrb	r3, [r7, #19]
 8007058:	74bb      	strb	r3, [r7, #18]
 800705a:	e005      	b.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800705c:	40021000 	.word	0x40021000
 8007060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007064:	7cfb      	ldrb	r3, [r7, #19]
 8007066:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007068:	7c7b      	ldrb	r3, [r7, #17]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d105      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800706e:	4ba6      	ldr	r3, [pc, #664]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007070:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007072:	4aa5      	ldr	r2, [pc, #660]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007078:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00a      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007086:	4ba0      	ldr	r3, [pc, #640]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800708c:	f023 0203 	bic.w	r2, r3, #3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	499c      	ldr	r1, [pc, #624]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070a8:	4b97      	ldr	r3, [pc, #604]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070ae:	f023 020c 	bic.w	r2, r3, #12
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	689b      	ldr	r3, [r3, #8]
 80070b6:	4994      	ldr	r1, [pc, #592]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070b8:	4313      	orrs	r3, r2
 80070ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80070ca:	4b8f      	ldr	r3, [pc, #572]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	498b      	ldr	r1, [pc, #556]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070da:	4313      	orrs	r3, r2
 80070dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80070ec:	4b86      	ldr	r3, [pc, #536]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	4983      	ldr	r1, [pc, #524]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0320 	and.w	r3, r3, #32
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800710e:	4b7e      	ldr	r3, [pc, #504]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007114:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	497a      	ldr	r1, [pc, #488]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800711e:	4313      	orrs	r3, r2
 8007120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007130:	4b75      	ldr	r3, [pc, #468]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007136:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	699b      	ldr	r3, [r3, #24]
 800713e:	4972      	ldr	r1, [pc, #456]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007152:	4b6d      	ldr	r3, [pc, #436]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007158:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	4969      	ldr	r1, [pc, #420]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007162:	4313      	orrs	r3, r2
 8007164:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00a      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007174:	4b64      	ldr	r3, [pc, #400]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800717a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	4961      	ldr	r1, [pc, #388]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007184:	4313      	orrs	r3, r2
 8007186:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00a      	beq.n	80071ac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007196:	4b5c      	ldr	r3, [pc, #368]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800719c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a4:	4958      	ldr	r1, [pc, #352]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d015      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80071b8:	4b53      	ldr	r3, [pc, #332]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c6:	4950      	ldr	r1, [pc, #320]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071c8:	4313      	orrs	r3, r2
 80071ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80071d6:	d105      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80071d8:	4b4b      	ldr	r3, [pc, #300]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d015      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80071f0:	4b45      	ldr	r3, [pc, #276]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80071f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	4942      	ldr	r1, [pc, #264]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007200:	4313      	orrs	r3, r2
 8007202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800720e:	d105      	bne.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007210:	4b3d      	ldr	r3, [pc, #244]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	4a3c      	ldr	r2, [pc, #240]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800721a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d015      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007228:	4b37      	ldr	r3, [pc, #220]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800722a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800722e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007236:	4934      	ldr	r1, [pc, #208]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007246:	d105      	bne.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007248:	4b2f      	ldr	r3, [pc, #188]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4a2e      	ldr	r2, [pc, #184]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800724e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007252:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d015      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007260:	4b29      	ldr	r3, [pc, #164]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007266:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800726e:	4926      	ldr	r1, [pc, #152]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800727a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800727e:	d105      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007280:	4b21      	ldr	r3, [pc, #132]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	4a20      	ldr	r2, [pc, #128]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800728a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d015      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007298:	4b1b      	ldr	r3, [pc, #108]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800729a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800729e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	4918      	ldr	r1, [pc, #96]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072a8:	4313      	orrs	r3, r2
 80072aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072b6:	d105      	bne.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072b8:	4b13      	ldr	r3, [pc, #76]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	4a12      	ldr	r2, [pc, #72]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072c2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d015      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80072d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	490a      	ldr	r1, [pc, #40]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072ee:	d105      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80072f0:	4b05      	ldr	r3, [pc, #20]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4a04      	ldr	r2, [pc, #16]	@ (8007308 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80072f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80072fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	40021000 	.word	0x40021000

0800730c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e042      	b.n	80073a4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007324:	2b00      	cmp	r3, #0
 8007326:	d106      	bne.n	8007336 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7fc f86d 	bl	8003410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2224      	movs	r2, #36	@ 0x24
 800733a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0201 	bic.w	r2, r2, #1
 800734c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007352:	2b00      	cmp	r3, #0
 8007354:	d002      	beq.n	800735c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fca8 	bl	8007cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9d9 	bl	8007714 <UART_SetConfig>
 8007362:	4603      	mov	r3, r0
 8007364:	2b01      	cmp	r3, #1
 8007366:	d101      	bne.n	800736c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e01b      	b.n	80073a4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800737a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800738a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fd27 	bl	8007df0 <UART_CheckIdleState>
 80073a2:	4603      	mov	r3, r0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3708      	adds	r7, #8
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_LIN_Init>:
  *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
  *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_LIN_Init+0x14>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e061      	b.n	8007484 <HAL_LIN_Init+0xd8>
  assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
  /* Check the Break detection length parameter */
  assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));

  /* LIN mode limited to 16-bit oversampling only */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073c8:	d101      	bne.n	80073ce <HAL_LIN_Init+0x22>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e05a      	b.n	8007484 <HAL_LIN_Init+0xd8>
  }
  /* LIN mode limited to 8-bit data length */
  if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d001      	beq.n	80073da <HAL_LIN_Init+0x2e>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e054      	b.n	8007484 <HAL_LIN_Init+0xd8>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d106      	bne.n	80073f2 <HAL_LIN_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7fc f80f 	bl	8003410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2224      	movs	r2, #36	@ 0x24
 80073f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <HAL_LIN_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fc4a 	bl	8007cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f97b 	bl	8007714 <UART_SetConfig>
 800741e:	4603      	mov	r3, r0
 8007420:	2b01      	cmp	r3, #1
 8007422:	d101      	bne.n	8007428 <HAL_LIN_Init+0x7c>
  {
    return HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	e02d      	b.n	8007484 <HAL_LIN_Init+0xd8>
  }

  /* In LIN mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685a      	ldr	r2, [r3, #4]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007446:	609a      	str	r2, [r3, #8]

  /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
  SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007456:	605a      	str	r2, [r3, #4]

  /* Set the USART LIN Break detection length. */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f023 0120 	bic.w	r1, r3, #32
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	430a      	orrs	r2, r1
 800746a:	605a      	str	r2, [r3, #4]

  __HAL_UART_ENABLE(huart);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fcb7 	bl	8007df0 <UART_CheckIdleState>
 8007482:	4603      	mov	r3, r0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d101      	bne.n	800749e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e031      	b.n	8007502 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2224      	movs	r2, #36	@ 0x24
 80074a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2200      	movs	r2, #0
 80074c4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2200      	movs	r2, #0
 80074cc:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f7fc f920 	bl	8003714 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->gState = HAL_UART_STATE_RESET;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800750a:	b580      	push	{r7, lr}
 800750c:	b08a      	sub	sp, #40	@ 0x28
 800750e:	af02      	add	r7, sp, #8
 8007510:	60f8      	str	r0, [r7, #12]
 8007512:	60b9      	str	r1, [r7, #8]
 8007514:	603b      	str	r3, [r7, #0]
 8007516:	4613      	mov	r3, r2
 8007518:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007520:	2b20      	cmp	r3, #32
 8007522:	d17b      	bne.n	800761c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_UART_Transmit+0x26>
 800752a:	88fb      	ldrh	r3, [r7, #6]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007530:	2301      	movs	r3, #1
 8007532:	e074      	b.n	800761e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2221      	movs	r2, #33	@ 0x21
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007544:	f7fc fb00 	bl	8003b48 <HAL_GetTick>
 8007548:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	88fa      	ldrh	r2, [r7, #6]
 800754e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007562:	d108      	bne.n	8007576 <HAL_UART_Transmit+0x6c>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800756c:	2300      	movs	r3, #0
 800756e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	61bb      	str	r3, [r7, #24]
 8007574:	e003      	b.n	800757e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800757e:	e030      	b.n	80075e2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2200      	movs	r2, #0
 8007588:	2180      	movs	r1, #128	@ 0x80
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fcda 	bl	8007f44 <UART_WaitOnFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2220      	movs	r2, #32
 800759a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e03d      	b.n	800761e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80075a2:	69fb      	ldr	r3, [r7, #28]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10b      	bne.n	80075c0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	3302      	adds	r3, #2
 80075bc:	61bb      	str	r3, [r7, #24]
 80075be:	e007      	b.n	80075d0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	3301      	adds	r3, #1
 80075ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	3b01      	subs	r3, #1
 80075da:	b29a      	uxth	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1c8      	bne.n	8007580 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	2200      	movs	r2, #0
 80075f6:	2140      	movs	r1, #64	@ 0x40
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 fca3 	bl	8007f44 <UART_WaitOnFlagUntilTimeout>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800760c:	2303      	movs	r3, #3
 800760e:	e006      	b.n	800761e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2220      	movs	r2, #32
 8007614:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	e000      	b.n	800761e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800761c:	2302      	movs	r3, #2
  }
}
 800761e:	4618      	mov	r0, r3
 8007620:	3720      	adds	r7, #32
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	@ 0x28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800763c:	2b20      	cmp	r3, #32
 800763e:	d137      	bne.n	80076b0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <HAL_UART_Receive_DMA+0x24>
 8007646:	88fb      	ldrh	r3, [r7, #6]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e030      	b.n	80076b2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a18      	ldr	r2, [pc, #96]	@ (80076bc <HAL_UART_Receive_DMA+0x94>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d01f      	beq.n	80076a0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d018      	beq.n	80076a0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	e853 3f00 	ldrex	r3, [r3]
 800767a:	613b      	str	r3, [r7, #16]
   return(result);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007682:	627b      	str	r3, [r7, #36]	@ 0x24
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768c:	623b      	str	r3, [r7, #32]
 800768e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007690:	69f9      	ldr	r1, [r7, #28]
 8007692:	6a3a      	ldr	r2, [r7, #32]
 8007694:	e841 2300 	strex	r3, r2, [r1]
 8007698:	61bb      	str	r3, [r7, #24]
   return(result);
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1e6      	bne.n	800766e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80076a0:	88fb      	ldrh	r3, [r7, #6]
 80076a2:	461a      	mov	r2, r3
 80076a4:	68b9      	ldr	r1, [r7, #8]
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f000 fcba 	bl	8008020 <UART_Start_Receive_DMA>
 80076ac:	4603      	mov	r3, r0
 80076ae:	e000      	b.n	80076b2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
  }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	3728      	adds	r7, #40	@ 0x28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40008000 	.word	0x40008000

080076c0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007718:	b08c      	sub	sp, #48	@ 0x30
 800771a:	af00      	add	r7, sp, #0
 800771c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	431a      	orrs	r2, r3
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	431a      	orrs	r2, r3
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	4313      	orrs	r3, r2
 800773a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4bab      	ldr	r3, [pc, #684]	@ (80079f0 <UART_SetConfig+0x2dc>)
 8007744:	4013      	ands	r3, r2
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800774c:	430b      	orrs	r3, r1
 800774e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007766:	697b      	ldr	r3, [r7, #20]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4aa0      	ldr	r2, [pc, #640]	@ (80079f4 <UART_SetConfig+0x2e0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800777c:	4313      	orrs	r3, r2
 800777e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800778a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	6812      	ldr	r2, [r2, #0]
 8007792:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007794:	430b      	orrs	r3, r1
 8007796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779e:	f023 010f 	bic.w	r1, r3, #15
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a91      	ldr	r2, [pc, #580]	@ (80079f8 <UART_SetConfig+0x2e4>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d125      	bne.n	8007804 <UART_SetConfig+0xf0>
 80077b8:	4b90      	ldr	r3, [pc, #576]	@ (80079fc <UART_SetConfig+0x2e8>)
 80077ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077be:	f003 0303 	and.w	r3, r3, #3
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d81a      	bhi.n	80077fc <UART_SetConfig+0xe8>
 80077c6:	a201      	add	r2, pc, #4	@ (adr r2, 80077cc <UART_SetConfig+0xb8>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	080077dd 	.word	0x080077dd
 80077d0:	080077ed 	.word	0x080077ed
 80077d4:	080077e5 	.word	0x080077e5
 80077d8:	080077f5 	.word	0x080077f5
 80077dc:	2301      	movs	r3, #1
 80077de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077e2:	e0d6      	b.n	8007992 <UART_SetConfig+0x27e>
 80077e4:	2302      	movs	r3, #2
 80077e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077ea:	e0d2      	b.n	8007992 <UART_SetConfig+0x27e>
 80077ec:	2304      	movs	r3, #4
 80077ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077f2:	e0ce      	b.n	8007992 <UART_SetConfig+0x27e>
 80077f4:	2308      	movs	r3, #8
 80077f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80077fa:	e0ca      	b.n	8007992 <UART_SetConfig+0x27e>
 80077fc:	2310      	movs	r3, #16
 80077fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007802:	e0c6      	b.n	8007992 <UART_SetConfig+0x27e>
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a7d      	ldr	r2, [pc, #500]	@ (8007a00 <UART_SetConfig+0x2ec>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d138      	bne.n	8007880 <UART_SetConfig+0x16c>
 800780e:	4b7b      	ldr	r3, [pc, #492]	@ (80079fc <UART_SetConfig+0x2e8>)
 8007810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007814:	f003 030c 	and.w	r3, r3, #12
 8007818:	2b0c      	cmp	r3, #12
 800781a:	d82d      	bhi.n	8007878 <UART_SetConfig+0x164>
 800781c:	a201      	add	r2, pc, #4	@ (adr r2, 8007824 <UART_SetConfig+0x110>)
 800781e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007822:	bf00      	nop
 8007824:	08007859 	.word	0x08007859
 8007828:	08007879 	.word	0x08007879
 800782c:	08007879 	.word	0x08007879
 8007830:	08007879 	.word	0x08007879
 8007834:	08007869 	.word	0x08007869
 8007838:	08007879 	.word	0x08007879
 800783c:	08007879 	.word	0x08007879
 8007840:	08007879 	.word	0x08007879
 8007844:	08007861 	.word	0x08007861
 8007848:	08007879 	.word	0x08007879
 800784c:	08007879 	.word	0x08007879
 8007850:	08007879 	.word	0x08007879
 8007854:	08007871 	.word	0x08007871
 8007858:	2300      	movs	r3, #0
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800785e:	e098      	b.n	8007992 <UART_SetConfig+0x27e>
 8007860:	2302      	movs	r3, #2
 8007862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007866:	e094      	b.n	8007992 <UART_SetConfig+0x27e>
 8007868:	2304      	movs	r3, #4
 800786a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800786e:	e090      	b.n	8007992 <UART_SetConfig+0x27e>
 8007870:	2308      	movs	r3, #8
 8007872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007876:	e08c      	b.n	8007992 <UART_SetConfig+0x27e>
 8007878:	2310      	movs	r3, #16
 800787a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800787e:	e088      	b.n	8007992 <UART_SetConfig+0x27e>
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a5f      	ldr	r2, [pc, #380]	@ (8007a04 <UART_SetConfig+0x2f0>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d125      	bne.n	80078d6 <UART_SetConfig+0x1c2>
 800788a:	4b5c      	ldr	r3, [pc, #368]	@ (80079fc <UART_SetConfig+0x2e8>)
 800788c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007890:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007894:	2b30      	cmp	r3, #48	@ 0x30
 8007896:	d016      	beq.n	80078c6 <UART_SetConfig+0x1b2>
 8007898:	2b30      	cmp	r3, #48	@ 0x30
 800789a:	d818      	bhi.n	80078ce <UART_SetConfig+0x1ba>
 800789c:	2b20      	cmp	r3, #32
 800789e:	d00a      	beq.n	80078b6 <UART_SetConfig+0x1a2>
 80078a0:	2b20      	cmp	r3, #32
 80078a2:	d814      	bhi.n	80078ce <UART_SetConfig+0x1ba>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d002      	beq.n	80078ae <UART_SetConfig+0x19a>
 80078a8:	2b10      	cmp	r3, #16
 80078aa:	d008      	beq.n	80078be <UART_SetConfig+0x1aa>
 80078ac:	e00f      	b.n	80078ce <UART_SetConfig+0x1ba>
 80078ae:	2300      	movs	r3, #0
 80078b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078b4:	e06d      	b.n	8007992 <UART_SetConfig+0x27e>
 80078b6:	2302      	movs	r3, #2
 80078b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078bc:	e069      	b.n	8007992 <UART_SetConfig+0x27e>
 80078be:	2304      	movs	r3, #4
 80078c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078c4:	e065      	b.n	8007992 <UART_SetConfig+0x27e>
 80078c6:	2308      	movs	r3, #8
 80078c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078cc:	e061      	b.n	8007992 <UART_SetConfig+0x27e>
 80078ce:	2310      	movs	r3, #16
 80078d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80078d4:	e05d      	b.n	8007992 <UART_SetConfig+0x27e>
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a4b      	ldr	r2, [pc, #300]	@ (8007a08 <UART_SetConfig+0x2f4>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d125      	bne.n	800792c <UART_SetConfig+0x218>
 80078e0:	4b46      	ldr	r3, [pc, #280]	@ (80079fc <UART_SetConfig+0x2e8>)
 80078e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078e6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80078ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80078ec:	d016      	beq.n	800791c <UART_SetConfig+0x208>
 80078ee:	2bc0      	cmp	r3, #192	@ 0xc0
 80078f0:	d818      	bhi.n	8007924 <UART_SetConfig+0x210>
 80078f2:	2b80      	cmp	r3, #128	@ 0x80
 80078f4:	d00a      	beq.n	800790c <UART_SetConfig+0x1f8>
 80078f6:	2b80      	cmp	r3, #128	@ 0x80
 80078f8:	d814      	bhi.n	8007924 <UART_SetConfig+0x210>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <UART_SetConfig+0x1f0>
 80078fe:	2b40      	cmp	r3, #64	@ 0x40
 8007900:	d008      	beq.n	8007914 <UART_SetConfig+0x200>
 8007902:	e00f      	b.n	8007924 <UART_SetConfig+0x210>
 8007904:	2300      	movs	r3, #0
 8007906:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800790a:	e042      	b.n	8007992 <UART_SetConfig+0x27e>
 800790c:	2302      	movs	r3, #2
 800790e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007912:	e03e      	b.n	8007992 <UART_SetConfig+0x27e>
 8007914:	2304      	movs	r3, #4
 8007916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800791a:	e03a      	b.n	8007992 <UART_SetConfig+0x27e>
 800791c:	2308      	movs	r3, #8
 800791e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007922:	e036      	b.n	8007992 <UART_SetConfig+0x27e>
 8007924:	2310      	movs	r3, #16
 8007926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800792a:	e032      	b.n	8007992 <UART_SetConfig+0x27e>
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a30      	ldr	r2, [pc, #192]	@ (80079f4 <UART_SetConfig+0x2e0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d12a      	bne.n	800798c <UART_SetConfig+0x278>
 8007936:	4b31      	ldr	r3, [pc, #196]	@ (80079fc <UART_SetConfig+0x2e8>)
 8007938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800793c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007940:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007944:	d01a      	beq.n	800797c <UART_SetConfig+0x268>
 8007946:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800794a:	d81b      	bhi.n	8007984 <UART_SetConfig+0x270>
 800794c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007950:	d00c      	beq.n	800796c <UART_SetConfig+0x258>
 8007952:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007956:	d815      	bhi.n	8007984 <UART_SetConfig+0x270>
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <UART_SetConfig+0x250>
 800795c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007960:	d008      	beq.n	8007974 <UART_SetConfig+0x260>
 8007962:	e00f      	b.n	8007984 <UART_SetConfig+0x270>
 8007964:	2300      	movs	r3, #0
 8007966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800796a:	e012      	b.n	8007992 <UART_SetConfig+0x27e>
 800796c:	2302      	movs	r3, #2
 800796e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007972:	e00e      	b.n	8007992 <UART_SetConfig+0x27e>
 8007974:	2304      	movs	r3, #4
 8007976:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800797a:	e00a      	b.n	8007992 <UART_SetConfig+0x27e>
 800797c:	2308      	movs	r3, #8
 800797e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007982:	e006      	b.n	8007992 <UART_SetConfig+0x27e>
 8007984:	2310      	movs	r3, #16
 8007986:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800798a:	e002      	b.n	8007992 <UART_SetConfig+0x27e>
 800798c:	2310      	movs	r3, #16
 800798e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a17      	ldr	r2, [pc, #92]	@ (80079f4 <UART_SetConfig+0x2e0>)
 8007998:	4293      	cmp	r3, r2
 800799a:	f040 80a8 	bne.w	8007aee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800799e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	d834      	bhi.n	8007a10 <UART_SetConfig+0x2fc>
 80079a6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ac <UART_SetConfig+0x298>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079d1 	.word	0x080079d1
 80079b0:	08007a11 	.word	0x08007a11
 80079b4:	080079d9 	.word	0x080079d9
 80079b8:	08007a11 	.word	0x08007a11
 80079bc:	080079df 	.word	0x080079df
 80079c0:	08007a11 	.word	0x08007a11
 80079c4:	08007a11 	.word	0x08007a11
 80079c8:	08007a11 	.word	0x08007a11
 80079cc:	080079e7 	.word	0x080079e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079d0:	f7ff fa3a 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 80079d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079d6:	e021      	b.n	8007a1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079d8:	4b0c      	ldr	r3, [pc, #48]	@ (8007a0c <UART_SetConfig+0x2f8>)
 80079da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079dc:	e01e      	b.n	8007a1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079de:	f7ff f9c5 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 80079e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80079e4:	e01a      	b.n	8007a1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80079ec:	e016      	b.n	8007a1c <UART_SetConfig+0x308>
 80079ee:	bf00      	nop
 80079f0:	cfff69f3 	.word	0xcfff69f3
 80079f4:	40008000 	.word	0x40008000
 80079f8:	40013800 	.word	0x40013800
 80079fc:	40021000 	.word	0x40021000
 8007a00:	40004400 	.word	0x40004400
 8007a04:	40004800 	.word	0x40004800
 8007a08:	40004c00 	.word	0x40004c00
 8007a0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007a1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 812a 	beq.w	8007c78 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a28:	4a9e      	ldr	r2, [pc, #632]	@ (8007ca4 <UART_SetConfig+0x590>)
 8007a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a36:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	69ba      	ldr	r2, [r7, #24]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d305      	bcc.n	8007a54 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d903      	bls.n	8007a5c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007a5a:	e10d      	b.n	8007c78 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	2200      	movs	r2, #0
 8007a60:	60bb      	str	r3, [r7, #8]
 8007a62:	60fa      	str	r2, [r7, #12]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a68:	4a8e      	ldr	r2, [pc, #568]	@ (8007ca4 <UART_SetConfig+0x590>)
 8007a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2200      	movs	r2, #0
 8007a72:	603b      	str	r3, [r7, #0]
 8007a74:	607a      	str	r2, [r7, #4]
 8007a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a7e:	f7f9 f90b 	bl	8000c98 <__aeabi_uldivmod>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4610      	mov	r0, r2
 8007a88:	4619      	mov	r1, r3
 8007a8a:	f04f 0200 	mov.w	r2, #0
 8007a8e:	f04f 0300 	mov.w	r3, #0
 8007a92:	020b      	lsls	r3, r1, #8
 8007a94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a98:	0202      	lsls	r2, r0, #8
 8007a9a:	6979      	ldr	r1, [r7, #20]
 8007a9c:	6849      	ldr	r1, [r1, #4]
 8007a9e:	0849      	lsrs	r1, r1, #1
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	4605      	mov	r5, r0
 8007aa6:	eb12 0804 	adds.w	r8, r2, r4
 8007aaa:	eb43 0905 	adc.w	r9, r3, r5
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	469a      	mov	sl, r3
 8007ab6:	4693      	mov	fp, r2
 8007ab8:	4652      	mov	r2, sl
 8007aba:	465b      	mov	r3, fp
 8007abc:	4640      	mov	r0, r8
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f7f9 f8ea 	bl	8000c98 <__aeabi_uldivmod>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	4613      	mov	r3, r2
 8007aca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ad2:	d308      	bcc.n	8007ae6 <UART_SetConfig+0x3d2>
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ada:	d204      	bcs.n	8007ae6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6a3a      	ldr	r2, [r7, #32]
 8007ae2:	60da      	str	r2, [r3, #12]
 8007ae4:	e0c8      	b.n	8007c78 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007aec:	e0c4      	b.n	8007c78 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af6:	d167      	bne.n	8007bc8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8007af8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d828      	bhi.n	8007b52 <UART_SetConfig+0x43e>
 8007b00:	a201      	add	r2, pc, #4	@ (adr r2, 8007b08 <UART_SetConfig+0x3f4>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b35 	.word	0x08007b35
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b53 	.word	0x08007b53
 8007b18:	08007b43 	.word	0x08007b43
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b53 	.word	0x08007b53
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b4b 	.word	0x08007b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7ff f98c 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8007b30:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b32:	e014      	b.n	8007b5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b34:	f7ff f99e 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 8007b38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b3a:	e010      	b.n	8007b5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ca8 <UART_SetConfig+0x594>)
 8007b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b40:	e00d      	b.n	8007b5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b42:	f7ff f913 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8007b46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007b48:	e009      	b.n	8007b5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007b50:	e005      	b.n	8007b5e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007b5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	f000 8089 	beq.w	8007c78 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6a:	4a4e      	ldr	r2, [pc, #312]	@ (8007ca4 <UART_SetConfig+0x590>)
 8007b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b70:	461a      	mov	r2, r3
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b78:	005a      	lsls	r2, r3, #1
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	085b      	lsrs	r3, r3, #1
 8007b80:	441a      	add	r2, r3
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b8c:	6a3b      	ldr	r3, [r7, #32]
 8007b8e:	2b0f      	cmp	r3, #15
 8007b90:	d916      	bls.n	8007bc0 <UART_SetConfig+0x4ac>
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b98:	d212      	bcs.n	8007bc0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f023 030f 	bic.w	r3, r3, #15
 8007ba2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ba4:	6a3b      	ldr	r3, [r7, #32]
 8007ba6:	085b      	lsrs	r3, r3, #1
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	8bfb      	ldrh	r3, [r7, #30]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	8bfa      	ldrh	r2, [r7, #30]
 8007bbc:	60da      	str	r2, [r3, #12]
 8007bbe:	e05b      	b.n	8007c78 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007bc6:	e057      	b.n	8007c78 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bc8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d828      	bhi.n	8007c22 <UART_SetConfig+0x50e>
 8007bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd8 <UART_SetConfig+0x4c4>)
 8007bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd6:	bf00      	nop
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007c05 	.word	0x08007c05
 8007be0:	08007c0d 	.word	0x08007c0d
 8007be4:	08007c23 	.word	0x08007c23
 8007be8:	08007c13 	.word	0x08007c13
 8007bec:	08007c23 	.word	0x08007c23
 8007bf0:	08007c23 	.word	0x08007c23
 8007bf4:	08007c23 	.word	0x08007c23
 8007bf8:	08007c1b 	.word	0x08007c1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bfc:	f7ff f924 	bl	8006e48 <HAL_RCC_GetPCLK1Freq>
 8007c00:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c02:	e014      	b.n	8007c2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c04:	f7ff f936 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 8007c08:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c0a:	e010      	b.n	8007c2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c0c:	4b26      	ldr	r3, [pc, #152]	@ (8007ca8 <UART_SetConfig+0x594>)
 8007c0e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c10:	e00d      	b.n	8007c2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c12:	f7ff f8ab 	bl	8006d6c <HAL_RCC_GetSysClockFreq>
 8007c16:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007c18:	e009      	b.n	8007c2e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c1e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007c20:	e005      	b.n	8007c2e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007c2c:	bf00      	nop
    }

    if (pclk != 0U)
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d021      	beq.n	8007c78 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c38:	4a1a      	ldr	r2, [pc, #104]	@ (8007ca4 <UART_SetConfig+0x590>)
 8007c3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c3e:	461a      	mov	r2, r3
 8007c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c42:	fbb3 f2f2 	udiv	r2, r3, r2
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	085b      	lsrs	r3, r3, #1
 8007c4c:	441a      	add	r2, r3
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	2b0f      	cmp	r3, #15
 8007c5c:	d909      	bls.n	8007c72 <UART_SetConfig+0x55e>
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c64:	d205      	bcs.n	8007c72 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	60da      	str	r2, [r3, #12]
 8007c70:	e002      	b.n	8007c78 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	2201      	movs	r2, #1
 8007c84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2200      	movs	r2, #0
 8007c92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007c94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3730      	adds	r7, #48	@ 0x30
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ca2:	bf00      	nop
 8007ca4:	08010afc 	.word	0x08010afc
 8007ca8:	00f42400 	.word	0x00f42400

08007cac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00a      	beq.n	8007cd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cda:	f003 0301 	and.w	r3, r3, #1
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00a      	beq.n	8007cf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00a      	beq.n	8007d1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00a      	beq.n	8007d3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	430a      	orrs	r2, r1
 8007d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d40:	f003 0310 	and.w	r3, r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00a      	beq.n	8007d5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d62:	f003 0320 	and.w	r3, r3, #32
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d01a      	beq.n	8007dc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685b      	ldr	r3, [r3, #4]
 8007d92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	430a      	orrs	r2, r1
 8007da0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007da6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007daa:	d10a      	bne.n	8007dc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00a      	beq.n	8007de4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	605a      	str	r2, [r3, #4]
  }
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b098      	sub	sp, #96	@ 0x60
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e00:	f7fb fea2 	bl	8003b48 <HAL_GetTick>
 8007e04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0308 	and.w	r3, r3, #8
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d12f      	bne.n	8007e74 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f88e 	bl	8007f44 <UART_WaitOnFlagUntilTimeout>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d022      	beq.n	8007e74 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e36:	e853 3f00 	ldrex	r3, [r3]
 8007e3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e54:	e841 2300 	strex	r3, r2, [r1]
 8007e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1e6      	bne.n	8007e2e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2220      	movs	r2, #32
 8007e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e063      	b.n	8007f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d149      	bne.n	8007f16 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e82:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f857 	bl	8007f44 <UART_WaitOnFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d03c      	beq.n	8007f16 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007eba:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ebc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ec0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e6      	bne.n	8007e9c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3308      	adds	r3, #8
 8007ed4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3308      	adds	r3, #8
 8007eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007eee:	61fa      	str	r2, [r7, #28]
 8007ef0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	69b9      	ldr	r1, [r7, #24]
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	617b      	str	r3, [r7, #20]
   return(result);
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2220      	movs	r2, #32
 8007f06:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e012      	b.n	8007f3c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2220      	movs	r2, #32
 8007f22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3758      	adds	r7, #88	@ 0x58
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	603b      	str	r3, [r7, #0]
 8007f50:	4613      	mov	r3, r2
 8007f52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f54:	e04f      	b.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d04b      	beq.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f5e:	f7fb fdf3 	bl	8003b48 <HAL_GetTick>
 8007f62:	4602      	mov	r2, r0
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	1ad3      	subs	r3, r2, r3
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d302      	bcc.n	8007f74 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e04e      	b.n	8008016 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0304 	and.w	r3, r3, #4
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d037      	beq.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2b80      	cmp	r3, #128	@ 0x80
 8007f8a:	d034      	beq.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	2b40      	cmp	r3, #64	@ 0x40
 8007f90:	d031      	beq.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d110      	bne.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	2208      	movs	r2, #8
 8007fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 f920 	bl	80081ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2208      	movs	r2, #8
 8007fb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e029      	b.n	8008016 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69db      	ldr	r3, [r3, #28]
 8007fc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007fcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007fd0:	d111      	bne.n	8007ff6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007fda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f000 f906 	bl	80081ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e00f      	b.n	8008016 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69da      	ldr	r2, [r3, #28]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	4013      	ands	r3, r2
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	429a      	cmp	r2, r3
 8008004:	bf0c      	ite	eq
 8008006:	2301      	moveq	r3, #1
 8008008:	2300      	movne	r3, #0
 800800a:	b2db      	uxtb	r3, r3
 800800c:	461a      	mov	r2, r3
 800800e:	79fb      	ldrb	r3, [r7, #7]
 8008010:	429a      	cmp	r2, r3
 8008012:	d0a0      	beq.n	8007f56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b096      	sub	sp, #88	@ 0x58
 8008024:	af00      	add	r7, sp, #0
 8008026:	60f8      	str	r0, [r7, #12]
 8008028:	60b9      	str	r1, [r7, #8]
 800802a:	4613      	mov	r3, r2
 800802c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	68ba      	ldr	r2, [r7, #8]
 8008032:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	88fa      	ldrh	r2, [r7, #6]
 8008038:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2222      	movs	r2, #34	@ 0x22
 8008048:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008052:	2b00      	cmp	r3, #0
 8008054:	d02d      	beq.n	80080b2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800805c:	4a40      	ldr	r2, [pc, #256]	@ (8008160 <UART_Start_Receive_DMA+0x140>)
 800805e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008066:	4a3f      	ldr	r2, [pc, #252]	@ (8008164 <UART_Start_Receive_DMA+0x144>)
 8008068:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008070:	4a3d      	ldr	r2, [pc, #244]	@ (8008168 <UART_Start_Receive_DMA+0x148>)
 8008072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800807a:	2200      	movs	r2, #0
 800807c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3324      	adds	r3, #36	@ 0x24
 800808a:	4619      	mov	r1, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008090:	461a      	mov	r2, r3
 8008092:	88fb      	ldrh	r3, [r7, #6]
 8008094:	f7fb ffd4 	bl	8004040 <HAL_DMA_Start_IT>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2210      	movs	r2, #16
 80080a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2220      	movs	r2, #32
 80080aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e051      	b.n	8008156 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d018      	beq.n	80080ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080c2:	e853 3f00 	ldrex	r3, [r3]
 80080c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80080c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	461a      	mov	r2, r3
 80080d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80080de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080e0:	e841 2300 	strex	r3, r2, [r1]
 80080e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80080e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1e6      	bne.n	80080ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	3308      	adds	r3, #8
 80080f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f6:	e853 3f00 	ldrex	r3, [r3]
 80080fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fe:	f043 0301 	orr.w	r3, r3, #1
 8008102:	653b      	str	r3, [r7, #80]	@ 0x50
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	3308      	adds	r3, #8
 800810a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800810c:	637a      	str	r2, [r7, #52]	@ 0x34
 800810e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008110:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008112:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008114:	e841 2300 	strex	r3, r2, [r1]
 8008118:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800811a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e5      	bne.n	80080ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	e853 3f00 	ldrex	r3, [r3]
 800812e:	613b      	str	r3, [r7, #16]
   return(result);
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008136:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3308      	adds	r3, #8
 800813e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008140:	623a      	str	r2, [r7, #32]
 8008142:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008144:	69f9      	ldr	r1, [r7, #28]
 8008146:	6a3a      	ldr	r2, [r7, #32]
 8008148:	e841 2300 	strex	r3, r2, [r1]
 800814c:	61bb      	str	r3, [r7, #24]
   return(result);
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1e5      	bne.n	8008120 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3758      	adds	r7, #88	@ 0x58
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	080082bb 	.word	0x080082bb
 8008164:	080083e7 	.word	0x080083e7
 8008168:	08008425 	.word	0x08008425

0800816c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800816c:	b480      	push	{r7}
 800816e:	b08f      	sub	sp, #60	@ 0x3c
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	e853 3f00 	ldrex	r3, [r3]
 8008180:	61fb      	str	r3, [r7, #28]
   return(result);
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008188:	637b      	str	r3, [r7, #52]	@ 0x34
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008194:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008198:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800819a:	e841 2300 	strex	r3, r2, [r1]
 800819e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1e6      	bne.n	8008174 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3308      	adds	r3, #8
 80081ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	e853 3f00 	ldrex	r3, [r3]
 80081b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80081bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	3308      	adds	r3, #8
 80081c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081c6:	61ba      	str	r2, [r7, #24]
 80081c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ca:	6979      	ldr	r1, [r7, #20]
 80081cc:	69ba      	ldr	r2, [r7, #24]
 80081ce:	e841 2300 	strex	r3, r2, [r1]
 80081d2:	613b      	str	r3, [r7, #16]
   return(result);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d1e5      	bne.n	80081a6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2220      	movs	r2, #32
 80081de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80081e2:	bf00      	nop
 80081e4:	373c      	adds	r7, #60	@ 0x3c
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081ee:	b480      	push	{r7}
 80081f0:	b095      	sub	sp, #84	@ 0x54
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fe:	e853 3f00 	ldrex	r3, [r3]
 8008202:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008206:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800820a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008214:	643b      	str	r3, [r7, #64]	@ 0x40
 8008216:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008218:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800821a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800821c:	e841 2300 	strex	r3, r2, [r1]
 8008220:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1e6      	bne.n	80081f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	3308      	adds	r3, #8
 800822e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008230:	6a3b      	ldr	r3, [r7, #32]
 8008232:	e853 3f00 	ldrex	r3, [r3]
 8008236:	61fb      	str	r3, [r7, #28]
   return(result);
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800823e:	f023 0301 	bic.w	r3, r3, #1
 8008242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800824c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800824e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008254:	e841 2300 	strex	r3, r2, [r1]
 8008258:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	2b00      	cmp	r3, #0
 800825e:	d1e3      	bne.n	8008228 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008264:	2b01      	cmp	r3, #1
 8008266:	d118      	bne.n	800829a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	e853 3f00 	ldrex	r3, [r3]
 8008274:	60bb      	str	r3, [r7, #8]
   return(result);
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	f023 0310 	bic.w	r3, r3, #16
 800827c:	647b      	str	r3, [r7, #68]	@ 0x44
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008286:	61bb      	str	r3, [r7, #24]
 8008288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800828a:	6979      	ldr	r1, [r7, #20]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	e841 2300 	strex	r3, r2, [r1]
 8008292:	613b      	str	r3, [r7, #16]
   return(result);
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d1e6      	bne.n	8008268 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2220      	movs	r2, #32
 800829e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80082ae:	bf00      	nop
 80082b0:	3754      	adds	r7, #84	@ 0x54
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b09c      	sub	sp, #112	@ 0x70
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082c6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0320 	and.w	r3, r3, #32
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d171      	bne.n	80083ba <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80082d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082d8:	2200      	movs	r2, #0
 80082da:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082e6:	e853 3f00 	ldrex	r3, [r3]
 80082ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80082ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	461a      	mov	r2, r3
 80082fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082fe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008300:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008302:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008304:	e841 2300 	strex	r3, r2, [r1]
 8008308:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800830a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1e6      	bne.n	80082de <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008310:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	3308      	adds	r3, #8
 8008316:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008322:	f023 0301 	bic.w	r3, r3, #1
 8008326:	667b      	str	r3, [r7, #100]	@ 0x64
 8008328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3308      	adds	r3, #8
 800832e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008330:	647a      	str	r2, [r7, #68]	@ 0x44
 8008332:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800833e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e5      	bne.n	8008310 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	3308      	adds	r3, #8
 800834a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800834c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834e:	e853 3f00 	ldrex	r3, [r3]
 8008352:	623b      	str	r3, [r7, #32]
   return(result);
 8008354:	6a3b      	ldr	r3, [r7, #32]
 8008356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800835a:	663b      	str	r3, [r7, #96]	@ 0x60
 800835c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	3308      	adds	r3, #8
 8008362:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008364:	633a      	str	r2, [r7, #48]	@ 0x30
 8008366:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008368:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800836a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800836c:	e841 2300 	strex	r3, r2, [r1]
 8008370:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008374:	2b00      	cmp	r3, #0
 8008376:	d1e5      	bne.n	8008344 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800837a:	2220      	movs	r2, #32
 800837c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008384:	2b01      	cmp	r3, #1
 8008386:	d118      	bne.n	80083ba <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	e853 3f00 	ldrex	r3, [r3]
 8008394:	60fb      	str	r3, [r7, #12]
   return(result);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f023 0310 	bic.w	r3, r3, #16
 800839c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800839e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083a6:	61fb      	str	r3, [r7, #28]
 80083a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083aa:	69b9      	ldr	r1, [r7, #24]
 80083ac:	69fa      	ldr	r2, [r7, #28]
 80083ae:	e841 2300 	strex	r3, r2, [r1]
 80083b2:	617b      	str	r3, [r7, #20]
   return(result);
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d1e6      	bne.n	8008388 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80083ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083bc:	2200      	movs	r2, #0
 80083be:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	d107      	bne.n	80083d8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083ce:	4619      	mov	r1, r3
 80083d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80083d2:	f7ff f993 	bl	80076fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80083d6:	e002      	b.n	80083de <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80083d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80083da:	f7ff f971 	bl	80076c0 <HAL_UART_RxCpltCallback>
}
 80083de:	bf00      	nop
 80083e0:	3770      	adds	r7, #112	@ 0x70
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b084      	sub	sp, #16
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2201      	movs	r2, #1
 80083f8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083fe:	2b01      	cmp	r3, #1
 8008400:	d109      	bne.n	8008416 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008408:	085b      	lsrs	r3, r3, #1
 800840a:	b29b      	uxth	r3, r3
 800840c:	4619      	mov	r1, r3
 800840e:	68f8      	ldr	r0, [r7, #12]
 8008410:	f7ff f974 	bl	80076fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008414:	e002      	b.n	800841c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008416:	68f8      	ldr	r0, [r7, #12]
 8008418:	f7ff f95c 	bl	80076d4 <HAL_UART_RxHalfCpltCallback>
}
 800841c:	bf00      	nop
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008438:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008440:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800844c:	2b80      	cmp	r3, #128	@ 0x80
 800844e:	d109      	bne.n	8008464 <UART_DMAError+0x40>
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b21      	cmp	r3, #33	@ 0x21
 8008454:	d106      	bne.n	8008464 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	2200      	movs	r2, #0
 800845a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800845e:	6978      	ldr	r0, [r7, #20]
 8008460:	f7ff fe84 	bl	800816c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800846e:	2b40      	cmp	r3, #64	@ 0x40
 8008470:	d109      	bne.n	8008486 <UART_DMAError+0x62>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2b22      	cmp	r3, #34	@ 0x22
 8008476:	d106      	bne.n	8008486 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2200      	movs	r2, #0
 800847c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008480:	6978      	ldr	r0, [r7, #20]
 8008482:	f7ff feb4 	bl	80081ee <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800848c:	f043 0210 	orr.w	r2, r3, #16
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008496:	6978      	ldr	r0, [r7, #20]
 8008498:	f7ff f926 	bl	80076e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800849c:	bf00      	nop
 800849e:	3718      	adds	r7, #24
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
 80084b0:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d101      	bne.n	80084bc <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e058      	b.n	800856e <HAL_RS485Ex_Init+0xca>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d106      	bne.n	80084d4 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7fa ff9e 	bl	8003410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2224      	movs	r2, #36	@ 0x24
 80084d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f022 0201 	bic.w	r2, r2, #1
 80084ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f7ff fbd9 	bl	8007cac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084fa:	68f8      	ldr	r0, [r7, #12]
 80084fc:	f7ff f90a 	bl	8007714 <UART_SetConfig>
 8008500:	4603      	mov	r3, r0
 8008502:	2b01      	cmp	r3, #1
 8008504:	d101      	bne.n	800850a <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e031      	b.n	800856e <HAL_RS485Ex_Init+0xca>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	689a      	ldr	r2, [r3, #8]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008518:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	430a      	orrs	r2, r1
 800852c:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	055b      	lsls	r3, r3, #21
 8008532:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	041b      	lsls	r3, r3, #16
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	4313      	orrs	r3, r2
 800853c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f023 737f 	bic.w	r3, r3, #66846720	@ 0x3fc0000
 8008548:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	6812      	ldr	r2, [r2, #0]
 8008550:	6979      	ldr	r1, [r7, #20]
 8008552:	430b      	orrs	r3, r1
 8008554:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f042 0201 	orr.w	r2, r2, #1
 8008564:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f7ff fc42 	bl	8007df0 <UART_CheckIdleState>
 800856c:	4603      	mov	r3, r0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008584:	2b01      	cmp	r3, #1
 8008586:	d101      	bne.n	800858c <HAL_UARTEx_DisableFifoMode+0x16>
 8008588:	2302      	movs	r3, #2
 800858a:	e027      	b.n	80085dc <HAL_UARTEx_DisableFifoMode+0x66>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2224      	movs	r2, #36	@ 0x24
 8008598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f022 0201 	bic.w	r2, r2, #1
 80085b2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80085ba:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d101      	bne.n	8008600 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80085fc:	2302      	movs	r3, #2
 80085fe:	e02d      	b.n	800865c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2224      	movs	r2, #36	@ 0x24
 800860c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f022 0201 	bic.w	r2, r2, #1
 8008626:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f84f 	bl	80086e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68fa      	ldr	r2, [r7, #12]
 8008648:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2220      	movs	r2, #32
 800864e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008674:	2b01      	cmp	r3, #1
 8008676:	d101      	bne.n	800867c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008678:	2302      	movs	r3, #2
 800867a:	e02d      	b.n	80086d8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2224      	movs	r2, #36	@ 0x24
 8008688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	681a      	ldr	r2, [r3, #0]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0201 	bic.w	r2, r2, #1
 80086a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	430a      	orrs	r2, r1
 80086b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f811 	bl	80086e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d108      	bne.n	8008702 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008700:	e031      	b.n	8008766 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008702:	2308      	movs	r3, #8
 8008704:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008706:	2308      	movs	r3, #8
 8008708:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	689b      	ldr	r3, [r3, #8]
 8008710:	0e5b      	lsrs	r3, r3, #25
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 0307 	and.w	r3, r3, #7
 8008718:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	0f5b      	lsrs	r3, r3, #29
 8008722:	b2db      	uxtb	r3, r3
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	7b3a      	ldrb	r2, [r7, #12]
 800872e:	4911      	ldr	r1, [pc, #68]	@ (8008774 <UARTEx_SetNbDataToProcess+0x94>)
 8008730:	5c8a      	ldrb	r2, [r1, r2]
 8008732:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008736:	7b3a      	ldrb	r2, [r7, #12]
 8008738:	490f      	ldr	r1, [pc, #60]	@ (8008778 <UARTEx_SetNbDataToProcess+0x98>)
 800873a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800873c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008740:	b29a      	uxth	r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008748:	7bfb      	ldrb	r3, [r7, #15]
 800874a:	7b7a      	ldrb	r2, [r7, #13]
 800874c:	4909      	ldr	r1, [pc, #36]	@ (8008774 <UARTEx_SetNbDataToProcess+0x94>)
 800874e:	5c8a      	ldrb	r2, [r1, r2]
 8008750:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008754:	7b7a      	ldrb	r2, [r7, #13]
 8008756:	4908      	ldr	r1, [pc, #32]	@ (8008778 <UARTEx_SetNbDataToProcess+0x98>)
 8008758:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800875a:	fb93 f3f2 	sdiv	r3, r3, r2
 800875e:	b29a      	uxth	r2, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	08010b14 	.word	0x08010b14
 8008778:	08010b1c 	.word	0x08010b1c

0800877c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800878c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008790:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	b29a      	uxth	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800879c:	2300      	movs	r3, #0
}
 800879e:	4618      	mov	r0, r3
 80087a0:	3714      	adds	r7, #20
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr

080087aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b085      	sub	sp, #20
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80087b2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80087b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80087be:	b29a      	uxth	r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	43db      	mvns	r3, r3
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	4013      	ands	r3, r2
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	1d3b      	adds	r3, r7, #4
 80087ea:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800881c:	b480      	push	{r7}
 800881e:	b09d      	sub	sp, #116	@ 0x74
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008826:	2300      	movs	r3, #0
 8008828:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	009b      	lsls	r3, r3, #2
 8008834:	4413      	add	r3, r2
 8008836:	881b      	ldrh	r3, [r3, #0]
 8008838:	b29b      	uxth	r3, r3
 800883a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800883e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008842:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	78db      	ldrb	r3, [r3, #3]
 800884a:	2b03      	cmp	r3, #3
 800884c:	d81f      	bhi.n	800888e <USB_ActivateEndpoint+0x72>
 800884e:	a201      	add	r2, pc, #4	@ (adr r2, 8008854 <USB_ActivateEndpoint+0x38>)
 8008850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008854:	08008865 	.word	0x08008865
 8008858:	08008881 	.word	0x08008881
 800885c:	08008897 	.word	0x08008897
 8008860:	08008873 	.word	0x08008873
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008864:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008868:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800886c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008870:	e012      	b.n	8008898 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008872:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008876:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800887a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800887e:	e00b      	b.n	8008898 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008880:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008884:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008888:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800888c:	e004      	b.n	8008898 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8008894:	e000      	b.n	8008898 <USB_ActivateEndpoint+0x7c>
      break;
 8008896:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	441a      	add	r2, r3
 80088a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80088a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80088ba:	687a      	ldr	r2, [r7, #4]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	881b      	ldrh	r3, [r3, #0]
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	b21b      	sxth	r3, r3
 80088ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088d2:	b21a      	sxth	r2, r3
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	b21b      	sxth	r3, r3
 80088da:	4313      	orrs	r3, r2
 80088dc:	b21b      	sxth	r3, r3
 80088de:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	441a      	add	r2, r3
 80088ec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80088f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008900:	b29b      	uxth	r3, r3
 8008902:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	7b1b      	ldrb	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	f040 8178 	bne.w	8008bfe <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	785b      	ldrb	r3, [r3, #1]
 8008912:	2b00      	cmp	r3, #0
 8008914:	f000 8084 	beq.w	8008a20 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	61bb      	str	r3, [r7, #24]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008922:	b29b      	uxth	r3, r3
 8008924:	461a      	mov	r2, r3
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	4413      	add	r3, r2
 800892a:	61bb      	str	r3, [r7, #24]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	00da      	lsls	r2, r3, #3
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800893a:	617b      	str	r3, [r7, #20]
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	88db      	ldrh	r3, [r3, #6]
 8008940:	085b      	lsrs	r3, r3, #1
 8008942:	b29b      	uxth	r3, r3
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	881b      	ldrh	r3, [r3, #0]
 8008958:	827b      	strh	r3, [r7, #18]
 800895a:	8a7b      	ldrh	r3, [r7, #18]
 800895c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01b      	beq.n	800899c <USB_ActivateEndpoint+0x180>
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	4413      	add	r3, r2
 800896e:	881b      	ldrh	r3, [r3, #0]
 8008970:	b29b      	uxth	r3, r3
 8008972:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800897a:	823b      	strh	r3, [r7, #16]
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	441a      	add	r2, r3
 8008986:	8a3b      	ldrh	r3, [r7, #16]
 8008988:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800898c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008990:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008994:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008998:	b29b      	uxth	r3, r3
 800899a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	78db      	ldrb	r3, [r3, #3]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d020      	beq.n	80089e6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	881b      	ldrh	r3, [r3, #0]
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ba:	81bb      	strh	r3, [r7, #12]
 80089bc:	89bb      	ldrh	r3, [r7, #12]
 80089be:	f083 0320 	eor.w	r3, r3, #32
 80089c2:	81bb      	strh	r3, [r7, #12]
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	441a      	add	r2, r3
 80089ce:	89bb      	ldrh	r3, [r7, #12]
 80089d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	8013      	strh	r3, [r2, #0]
 80089e4:	e2d5      	b.n	8008f92 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089fc:	81fb      	strh	r3, [r7, #14]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	441a      	add	r2, r3
 8008a08:	89fb      	ldrh	r3, [r7, #14]
 8008a0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	8013      	strh	r3, [r2, #0]
 8008a1e:	e2b8      	b.n	8008f92 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	4413      	add	r3, r2
 8008a32:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	00da      	lsls	r2, r3, #3
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	88db      	ldrh	r3, [r3, #6]
 8008a48:	085b      	lsrs	r3, r3, #1
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a52:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	461a      	mov	r2, r3
 8008a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a64:	4413      	add	r3, r2
 8008a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	00da      	lsls	r2, r3, #3
 8008a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a70:	4413      	add	r3, r2
 8008a72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a7a:	881b      	ldrh	r3, [r3, #0]
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a82:	b29a      	uxth	r2, r3
 8008a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a86:	801a      	strh	r2, [r3, #0]
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	691b      	ldr	r3, [r3, #16]
 8008a8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a8e:	d91d      	bls.n	8008acc <USB_ActivateEndpoint+0x2b0>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	691b      	ldr	r3, [r3, #16]
 8008a94:	095b      	lsrs	r3, r3, #5
 8008a96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	691b      	ldr	r3, [r3, #16]
 8008a9c:	f003 031f 	and.w	r3, r3, #31
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d102      	bne.n	8008aaa <USB_ActivateEndpoint+0x28e>
 8008aa4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008aa6:	3b01      	subs	r3, #1
 8008aa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	b29a      	uxth	r2, r3
 8008ab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	029b      	lsls	r3, r3, #10
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac8:	801a      	strh	r2, [r3, #0]
 8008aca:	e026      	b.n	8008b1a <USB_ActivateEndpoint+0x2fe>
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	691b      	ldr	r3, [r3, #16]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <USB_ActivateEndpoint+0x2ce>
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad6:	881b      	ldrh	r3, [r3, #0]
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ade:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae6:	801a      	strh	r2, [r3, #0]
 8008ae8:	e017      	b.n	8008b1a <USB_ActivateEndpoint+0x2fe>
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	085b      	lsrs	r3, r3, #1
 8008af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <USB_ActivateEndpoint+0x2e8>
 8008afe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b00:	3301      	adds	r3, #1
 8008b02:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b06:	881b      	ldrh	r3, [r3, #0]
 8008b08:	b29a      	uxth	r2, r3
 8008b0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	029b      	lsls	r3, r3, #10
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	4313      	orrs	r3, r2
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	781b      	ldrb	r3, [r3, #0]
 8008b20:	009b      	lsls	r3, r3, #2
 8008b22:	4413      	add	r3, r2
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008b28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008b2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d01b      	beq.n	8008b6a <USB_ActivateEndpoint+0x34e>
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	881b      	ldrh	r3, [r3, #0]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b48:	843b      	strh	r3, [r7, #32]
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	441a      	add	r2, r3
 8008b54:	8c3b      	ldrh	r3, [r7, #32]
 8008b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d124      	bne.n	8008bbc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	4413      	add	r3, r2
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b88:	83bb      	strh	r3, [r7, #28]
 8008b8a:	8bbb      	ldrh	r3, [r7, #28]
 8008b8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b90:	83bb      	strh	r3, [r7, #28]
 8008b92:	8bbb      	ldrh	r3, [r7, #28]
 8008b94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b98:	83bb      	strh	r3, [r7, #28]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	441a      	add	r2, r3
 8008ba4:	8bbb      	ldrh	r3, [r7, #28]
 8008ba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008baa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	8013      	strh	r3, [r2, #0]
 8008bba:	e1ea      	b.n	8008f92 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	4413      	add	r3, r2
 8008bc6:	881b      	ldrh	r3, [r3, #0]
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bd2:	83fb      	strh	r3, [r7, #30]
 8008bd4:	8bfb      	ldrh	r3, [r7, #30]
 8008bd6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008bda:	83fb      	strh	r3, [r7, #30]
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	441a      	add	r2, r3
 8008be6:	8bfb      	ldrh	r3, [r7, #30]
 8008be8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	8013      	strh	r3, [r2, #0]
 8008bfc:	e1c9      	b.n	8008f92 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	78db      	ldrb	r3, [r3, #3]
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d11e      	bne.n	8008c44 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c1c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	441a      	add	r2, r3
 8008c2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008c2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c36:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	8013      	strh	r3, [r2, #0]
 8008c42:	e01d      	b.n	8008c80 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	781b      	ldrb	r3, [r3, #0]
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4413      	add	r3, r2
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	441a      	add	r2, r3
 8008c68:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008c6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c90:	4413      	add	r3, r2
 8008c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	781b      	ldrb	r3, [r3, #0]
 8008c98:	00da      	lsls	r2, r3, #3
 8008c9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ca2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	891b      	ldrh	r3, [r3, #8]
 8008ca8:	085b      	lsrs	r3, r3, #1
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	b29a      	uxth	r2, r3
 8008cb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cb2:	801a      	strh	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cc4:	4413      	add	r3, r2
 8008cc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	00da      	lsls	r2, r3, #3
 8008cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008cd6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	895b      	ldrh	r3, [r3, #10]
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ce6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	785b      	ldrb	r3, [r3, #1]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f040 8093 	bne.w	8008e18 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	009b      	lsls	r3, r3, #2
 8008cfa:	4413      	add	r3, r2
 8008cfc:	881b      	ldrh	r3, [r3, #0]
 8008cfe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008d02:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008d06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d01b      	beq.n	8008d46 <USB_ActivateEndpoint+0x52a>
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	881b      	ldrh	r3, [r3, #0]
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d24:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	441a      	add	r2, r3
 8008d30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008d32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008d54:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01b      	beq.n	8008d96 <USB_ActivateEndpoint+0x57a>
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	881b      	ldrh	r3, [r3, #0]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d74:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	441a      	add	r2, r3
 8008d80:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d8e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dac:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008dae:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008db0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008db4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008db6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008db8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008dbc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	441a      	add	r2, r3
 8008dc8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008dca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008dce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	009b      	lsls	r3, r3, #2
 8008de6:	4413      	add	r3, r2
 8008de8:	881b      	ldrh	r3, [r3, #0]
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008df4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	441a      	add	r2, r3
 8008e00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008e02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	8013      	strh	r3, [r2, #0]
 8008e16:	e0bc      	b.n	8008f92 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	881b      	ldrh	r3, [r3, #0]
 8008e24:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008e28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d01d      	beq.n	8008e70 <USB_ActivateEndpoint+0x654>
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4413      	add	r3, r2
 8008e3e:	881b      	ldrh	r3, [r3, #0]
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e4a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	441a      	add	r2, r3
 8008e58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008e5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e64:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	781b      	ldrb	r3, [r3, #0]
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008e80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d01d      	beq.n	8008ec8 <USB_ActivateEndpoint+0x6ac>
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	4413      	add	r3, r2
 8008e96:	881b      	ldrh	r3, [r3, #0]
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ea2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	441a      	add	r2, r3
 8008eb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ec0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	78db      	ldrb	r3, [r3, #3]
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d024      	beq.n	8008f1a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ee6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008eea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008eee:	f083 0320 	eor.w	r3, r3, #32
 8008ef2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	441a      	add	r2, r3
 8008f00:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008f04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	8013      	strh	r3, [r2, #0]
 8008f18:	e01d      	b.n	8008f56 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f30:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	441a      	add	r2, r3
 8008f3e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008f42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	881b      	ldrh	r3, [r3, #0]
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f6c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	441a      	add	r2, r3
 8008f7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008f92:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3774      	adds	r7, #116	@ 0x74
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop

08008fa4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b08d      	sub	sp, #52	@ 0x34
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	7b1b      	ldrb	r3, [r3, #12]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f040 808e 	bne.w	80090d4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	785b      	ldrb	r3, [r3, #1]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d044      	beq.n	800904a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	81bb      	strh	r3, [r7, #12]
 8008fce:	89bb      	ldrh	r3, [r7, #12]
 8008fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d01b      	beq.n	8009010 <USB_DeactivateEndpoint+0x6c>
 8008fd8:	687a      	ldr	r2, [r7, #4]
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	881b      	ldrh	r3, [r3, #0]
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fee:	817b      	strh	r3, [r7, #10]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	009b      	lsls	r3, r3, #2
 8008ff8:	441a      	add	r2, r3
 8008ffa:	897b      	ldrh	r3, [r7, #10]
 8008ffc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009000:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009004:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009008:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800900c:	b29b      	uxth	r3, r3
 800900e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	881b      	ldrh	r3, [r3, #0]
 800901c:	b29b      	uxth	r3, r3
 800901e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009026:	813b      	strh	r3, [r7, #8]
 8009028:	687a      	ldr	r2, [r7, #4]
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	441a      	add	r2, r3
 8009032:	893b      	ldrh	r3, [r7, #8]
 8009034:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009038:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800903c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009040:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009044:	b29b      	uxth	r3, r3
 8009046:	8013      	strh	r3, [r2, #0]
 8009048:	e192      	b.n	8009370 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	827b      	strh	r3, [r7, #18]
 8009058:	8a7b      	ldrh	r3, [r7, #18]
 800905a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800905e:	2b00      	cmp	r3, #0
 8009060:	d01b      	beq.n	800909a <USB_DeactivateEndpoint+0xf6>
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009074:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009078:	823b      	strh	r3, [r7, #16]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	441a      	add	r2, r3
 8009084:	8a3b      	ldrh	r3, [r7, #16]
 8009086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800908a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800908e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009096:	b29b      	uxth	r3, r3
 8009098:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090b0:	81fb      	strh	r3, [r7, #14]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	441a      	add	r2, r3
 80090bc:	89fb      	ldrh	r3, [r7, #14]
 80090be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	8013      	strh	r3, [r2, #0]
 80090d2:	e14d      	b.n	8009370 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f040 80a5 	bne.w	8009228 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	843b      	strh	r3, [r7, #32]
 80090ec:	8c3b      	ldrh	r3, [r7, #32]
 80090ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d01b      	beq.n	800912e <USB_DeactivateEndpoint+0x18a>
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	b29b      	uxth	r3, r3
 8009104:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800910c:	83fb      	strh	r3, [r7, #30]
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	441a      	add	r2, r3
 8009118:	8bfb      	ldrh	r3, [r7, #30]
 800911a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800911e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009122:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800912a:	b29b      	uxth	r3, r3
 800912c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	781b      	ldrb	r3, [r3, #0]
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	881b      	ldrh	r3, [r3, #0]
 800913a:	83bb      	strh	r3, [r7, #28]
 800913c:	8bbb      	ldrh	r3, [r7, #28]
 800913e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01b      	beq.n	800917e <USB_DeactivateEndpoint+0x1da>
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	b29b      	uxth	r3, r3
 8009154:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009158:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800915c:	837b      	strh	r3, [r7, #26]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	441a      	add	r2, r3
 8009168:	8b7b      	ldrh	r3, [r7, #26]
 800916a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800916e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009172:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009176:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800917a:	b29b      	uxth	r3, r3
 800917c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	009b      	lsls	r3, r3, #2
 8009186:	4413      	add	r3, r2
 8009188:	881b      	ldrh	r3, [r3, #0]
 800918a:	b29b      	uxth	r3, r3
 800918c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009190:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009194:	833b      	strh	r3, [r7, #24]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	441a      	add	r2, r3
 80091a0:	8b3b      	ldrh	r3, [r7, #24]
 80091a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091b6:	687a      	ldr	r2, [r7, #4]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	009b      	lsls	r3, r3, #2
 80091be:	4413      	add	r3, r2
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80091c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091cc:	82fb      	strh	r3, [r7, #22]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	441a      	add	r2, r3
 80091d8:	8afb      	ldrh	r3, [r7, #22]
 80091da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	009b      	lsls	r3, r3, #2
 80091f6:	4413      	add	r3, r2
 80091f8:	881b      	ldrh	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009200:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009204:	82bb      	strh	r3, [r7, #20]
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	009b      	lsls	r3, r3, #2
 800920e:	441a      	add	r2, r3
 8009210:	8abb      	ldrh	r3, [r7, #20]
 8009212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800921a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800921e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009222:	b29b      	uxth	r3, r3
 8009224:	8013      	strh	r3, [r2, #0]
 8009226:	e0a3      	b.n	8009370 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	4413      	add	r3, r2
 8009232:	881b      	ldrh	r3, [r3, #0]
 8009234:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8009236:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d01b      	beq.n	8009278 <USB_DeactivateEndpoint+0x2d4>
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	4413      	add	r3, r2
 800924a:	881b      	ldrh	r3, [r3, #0]
 800924c:	b29b      	uxth	r3, r3
 800924e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009256:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	441a      	add	r2, r3
 8009262:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009264:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009268:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800926c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009270:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009274:	b29b      	uxth	r3, r3
 8009276:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009278:	687a      	ldr	r2, [r7, #4]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	881b      	ldrh	r3, [r3, #0]
 8009284:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8009286:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01b      	beq.n	80092c8 <USB_DeactivateEndpoint+0x324>
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	4413      	add	r3, r2
 800929a:	881b      	ldrh	r3, [r3, #0]
 800929c:	b29b      	uxth	r3, r3
 800929e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80092a8:	687a      	ldr	r2, [r7, #4]
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	009b      	lsls	r3, r3, #2
 80092b0:	441a      	add	r2, r3
 80092b2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80092b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80092c8:	687a      	ldr	r2, [r7, #4]
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	009b      	lsls	r3, r3, #2
 80092d0:	4413      	add	r3, r2
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092de:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	441a      	add	r2, r3
 80092ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80092ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80092f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009316:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	009b      	lsls	r3, r3, #2
 8009320:	441a      	add	r2, r3
 8009322:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009324:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009328:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800932c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009334:	b29b      	uxth	r3, r3
 8009336:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	009b      	lsls	r3, r3, #2
 8009340:	4413      	add	r3, r2
 8009342:	881b      	ldrh	r3, [r3, #0]
 8009344:	b29b      	uxth	r3, r3
 8009346:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800934a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800934e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	441a      	add	r2, r3
 800935a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800935c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009360:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009364:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936c:	b29b      	uxth	r3, r3
 800936e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3734      	adds	r7, #52	@ 0x34
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr

0800937e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b0c2      	sub	sp, #264	@ 0x108
 8009382:	af00      	add	r7, sp, #0
 8009384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800938c:	6018      	str	r0, [r3, #0]
 800938e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009396:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800939c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	785b      	ldrb	r3, [r3, #1]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	f040 86b7 	bne.w	800a118 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80093aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699a      	ldr	r2, [r3, #24]
 80093b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d908      	bls.n	80093d8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80093c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80093d6:	e007      	b.n	80093e8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80093d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80093e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	7b1b      	ldrb	r3, [r3, #12]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d13a      	bne.n	800946e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80093f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	6959      	ldr	r1, [r3, #20]
 8009404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	88da      	ldrh	r2, [r3, #6]
 8009410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009414:	b29b      	uxth	r3, r3
 8009416:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800941a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800941e:	6800      	ldr	r0, [r0, #0]
 8009420:	f001 fc98 	bl	800ad54 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009428:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	613b      	str	r3, [r7, #16]
 8009430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800943e:	b29b      	uxth	r3, r3
 8009440:	461a      	mov	r2, r3
 8009442:	693b      	ldr	r3, [r7, #16]
 8009444:	4413      	add	r3, r2
 8009446:	613b      	str	r3, [r7, #16]
 8009448:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800944c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	00da      	lsls	r2, r3, #3
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	4413      	add	r3, r2
 800945a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	801a      	strh	r2, [r3, #0]
 800946a:	f000 be1f 	b.w	800a0ac <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800946e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	78db      	ldrb	r3, [r3, #3]
 800947a:	2b02      	cmp	r3, #2
 800947c:	f040 8462 	bne.w	8009d44 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009484:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	6a1a      	ldr	r2, [r3, #32]
 800948c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	429a      	cmp	r2, r3
 800949a:	f240 83df 	bls.w	8009c5c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800949e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094a6:	681a      	ldr	r2, [r3, #0]
 80094a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	781b      	ldrb	r3, [r3, #0]
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	4413      	add	r3, r2
 80094b8:	881b      	ldrh	r3, [r3, #0]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80094c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	441a      	add	r2, r3
 80094e2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80094e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80094ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80094ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80094f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80094fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	6a1a      	ldr	r2, [r3, #32]
 8009506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800950a:	1ad2      	subs	r2, r2, r3
 800950c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800951c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	b29b      	uxth	r3, r3
 8009536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 81c7 	beq.w	80098ce <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	633b      	str	r3, [r7, #48]	@ 0x30
 800954c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d177      	bne.n	800964c <USB_EPStartXfer+0x2ce>
 800955c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009568:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800956c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009576:	b29b      	uxth	r3, r3
 8009578:	461a      	mov	r2, r3
 800957a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957c:	4413      	add	r3, r2
 800957e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	00da      	lsls	r2, r3, #3
 800958e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009590:	4413      	add	r3, r2
 8009592:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
 8009598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800959a:	881b      	ldrh	r3, [r3, #0]
 800959c:	b29b      	uxth	r3, r3
 800959e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80095ae:	d921      	bls.n	80095f4 <USB_EPStartXfer+0x276>
 80095b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095b4:	095b      	lsrs	r3, r3, #5
 80095b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095be:	f003 031f 	and.w	r3, r3, #31
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d104      	bne.n	80095d0 <USB_EPStartXfer+0x252>
 80095c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095ca:	3b01      	subs	r3, #1
 80095cc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d2:	881b      	ldrh	r3, [r3, #0]
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095da:	b29b      	uxth	r3, r3
 80095dc:	029b      	lsls	r3, r3, #10
 80095de:	b29b      	uxth	r3, r3
 80095e0:	4313      	orrs	r3, r2
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095f0:	801a      	strh	r2, [r3, #0]
 80095f2:	e050      	b.n	8009696 <USB_EPStartXfer+0x318>
 80095f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <USB_EPStartXfer+0x294>
 80095fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b29b      	uxth	r3, r3
 8009602:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009606:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800960a:	b29a      	uxth	r2, r3
 800960c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800960e:	801a      	strh	r2, [r3, #0]
 8009610:	e041      	b.n	8009696 <USB_EPStartXfer+0x318>
 8009612:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009616:	085b      	lsrs	r3, r3, #1
 8009618:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800961c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009620:	f003 0301 	and.w	r3, r3, #1
 8009624:	2b00      	cmp	r3, #0
 8009626:	d004      	beq.n	8009632 <USB_EPStartXfer+0x2b4>
 8009628:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800962c:	3301      	adds	r3, #1
 800962e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009634:	881b      	ldrh	r3, [r3, #0]
 8009636:	b29a      	uxth	r2, r3
 8009638:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800963c:	b29b      	uxth	r3, r3
 800963e:	029b      	lsls	r3, r3, #10
 8009640:	b29b      	uxth	r3, r3
 8009642:	4313      	orrs	r3, r2
 8009644:	b29a      	uxth	r2, r3
 8009646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009648:	801a      	strh	r2, [r3, #0]
 800964a:	e024      	b.n	8009696 <USB_EPStartXfer+0x318>
 800964c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	785b      	ldrb	r3, [r3, #1]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d11c      	bne.n	8009696 <USB_EPStartXfer+0x318>
 800965c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800966a:	b29b      	uxth	r3, r3
 800966c:	461a      	mov	r2, r3
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	4413      	add	r3, r2
 8009672:	633b      	str	r3, [r7, #48]	@ 0x30
 8009674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	00da      	lsls	r2, r3, #3
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	4413      	add	r3, r2
 8009686:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800968a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800968c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009690:	b29a      	uxth	r2, r3
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800969a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	895b      	ldrh	r3, [r3, #10]
 80096a2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6959      	ldr	r1, [r3, #20]
 80096b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b6:	b29b      	uxth	r3, r3
 80096b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80096bc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80096c0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80096c4:	6800      	ldr	r0, [r0, #0]
 80096c6:	f001 fb45 	bl	800ad54 <USB_WritePMA>
            ep->xfer_buff += len;
 80096ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	695a      	ldr	r2, [r3, #20]
 80096d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096da:	441a      	add	r2, r3
 80096dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80096e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6a1a      	ldr	r2, [r3, #32]
 80096f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	429a      	cmp	r2, r3
 8009702:	d90f      	bls.n	8009724 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	6a1a      	ldr	r2, [r3, #32]
 8009710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009714:	1ad2      	subs	r2, r2, r3
 8009716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800971a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	621a      	str	r2, [r3, #32]
 8009722:	e00e      	b.n	8009742 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	6a1b      	ldr	r3, [r3, #32]
 8009730:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009734:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009738:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2200      	movs	r2, #0
 8009740:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009746:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	785b      	ldrb	r3, [r3, #1]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d177      	bne.n	8009842 <USB_EPStartXfer+0x4c4>
 8009752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009756:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	61bb      	str	r3, [r7, #24]
 800975e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009762:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800976c:	b29b      	uxth	r3, r3
 800976e:	461a      	mov	r2, r3
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	4413      	add	r3, r2
 8009774:	61bb      	str	r3, [r7, #24]
 8009776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800977a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	00da      	lsls	r2, r3, #3
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	4413      	add	r3, r2
 8009788:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800978c:	617b      	str	r3, [r7, #20]
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	b29b      	uxth	r3, r3
 8009794:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009798:	b29a      	uxth	r2, r3
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80097a4:	d921      	bls.n	80097ea <USB_EPStartXfer+0x46c>
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097aa:	095b      	lsrs	r3, r3, #5
 80097ac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097b4:	f003 031f 	and.w	r3, r3, #31
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <USB_EPStartXfer+0x448>
 80097bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097c0:	3b01      	subs	r3, #1
 80097c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	029b      	lsls	r3, r3, #10
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4313      	orrs	r3, r2
 80097d8:	b29b      	uxth	r3, r3
 80097da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097e2:	b29a      	uxth	r2, r3
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	801a      	strh	r2, [r3, #0]
 80097e8:	e056      	b.n	8009898 <USB_EPStartXfer+0x51a>
 80097ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <USB_EPStartXfer+0x48a>
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	881b      	ldrh	r3, [r3, #0]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009800:	b29a      	uxth	r2, r3
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	801a      	strh	r2, [r3, #0]
 8009806:	e047      	b.n	8009898 <USB_EPStartXfer+0x51a>
 8009808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009816:	f003 0301 	and.w	r3, r3, #1
 800981a:	2b00      	cmp	r3, #0
 800981c:	d004      	beq.n	8009828 <USB_EPStartXfer+0x4aa>
 800981e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009822:	3301      	adds	r3, #1
 8009824:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	b29a      	uxth	r2, r3
 800982e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009832:	b29b      	uxth	r3, r3
 8009834:	029b      	lsls	r3, r3, #10
 8009836:	b29b      	uxth	r3, r3
 8009838:	4313      	orrs	r3, r2
 800983a:	b29a      	uxth	r2, r3
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	801a      	strh	r2, [r3, #0]
 8009840:	e02a      	b.n	8009898 <USB_EPStartXfer+0x51a>
 8009842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	785b      	ldrb	r3, [r3, #1]
 800984e:	2b01      	cmp	r3, #1
 8009850:	d122      	bne.n	8009898 <USB_EPStartXfer+0x51a>
 8009852:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009856:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	623b      	str	r3, [r7, #32]
 800985e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009862:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800986c:	b29b      	uxth	r3, r3
 800986e:	461a      	mov	r2, r3
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	4413      	add	r3, r2
 8009874:	623b      	str	r3, [r7, #32]
 8009876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800987a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	00da      	lsls	r2, r3, #3
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	4413      	add	r3, r2
 8009888:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800988c:	61fb      	str	r3, [r7, #28]
 800988e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009892:	b29a      	uxth	r2, r3
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800989c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	891b      	ldrh	r3, [r3, #8]
 80098a4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6959      	ldr	r1, [r3, #20]
 80098b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80098be:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80098c2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80098c6:	6800      	ldr	r0, [r0, #0]
 80098c8:	f001 fa44 	bl	800ad54 <USB_WritePMA>
 80098cc:	e3ee      	b.n	800a0ac <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	785b      	ldrb	r3, [r3, #1]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d177      	bne.n	80099ce <USB_EPStartXfer+0x650>
 80098de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80098ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	461a      	mov	r2, r3
 80098fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098fe:	4413      	add	r3, r2
 8009900:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009906:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	00da      	lsls	r2, r3, #3
 8009910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009912:	4413      	add	r3, r2
 8009914:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009918:	647b      	str	r3, [r7, #68]	@ 0x44
 800991a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800991c:	881b      	ldrh	r3, [r3, #0]
 800991e:	b29b      	uxth	r3, r3
 8009920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009924:	b29a      	uxth	r2, r3
 8009926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800992e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009930:	d921      	bls.n	8009976 <USB_EPStartXfer+0x5f8>
 8009932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800993c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009940:	f003 031f 	and.w	r3, r3, #31
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <USB_EPStartXfer+0x5d4>
 8009948:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800994c:	3b01      	subs	r3, #1
 800994e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009952:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	b29a      	uxth	r2, r3
 8009958:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800995c:	b29b      	uxth	r3, r3
 800995e:	029b      	lsls	r3, r3, #10
 8009960:	b29b      	uxth	r3, r3
 8009962:	4313      	orrs	r3, r2
 8009964:	b29b      	uxth	r3, r3
 8009966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800996a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800996e:	b29a      	uxth	r2, r3
 8009970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009972:	801a      	strh	r2, [r3, #0]
 8009974:	e056      	b.n	8009a24 <USB_EPStartXfer+0x6a6>
 8009976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <USB_EPStartXfer+0x616>
 800997e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009980:	881b      	ldrh	r3, [r3, #0]
 8009982:	b29b      	uxth	r3, r3
 8009984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800998c:	b29a      	uxth	r2, r3
 800998e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009990:	801a      	strh	r2, [r3, #0]
 8009992:	e047      	b.n	8009a24 <USB_EPStartXfer+0x6a6>
 8009994:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009998:	085b      	lsrs	r3, r3, #1
 800999a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800999e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d004      	beq.n	80099b4 <USB_EPStartXfer+0x636>
 80099aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099ae:	3301      	adds	r3, #1
 80099b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80099b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099b6:	881b      	ldrh	r3, [r3, #0]
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80099be:	b29b      	uxth	r3, r3
 80099c0:	029b      	lsls	r3, r3, #10
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4313      	orrs	r3, r2
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80099ca:	801a      	strh	r2, [r3, #0]
 80099cc:	e02a      	b.n	8009a24 <USB_EPStartXfer+0x6a6>
 80099ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	785b      	ldrb	r3, [r3, #1]
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d122      	bne.n	8009a24 <USB_EPStartXfer+0x6a6>
 80099de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80099ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099fe:	4413      	add	r3, r2
 8009a00:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	00da      	lsls	r2, r3, #3
 8009a10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a12:	4413      	add	r3, r2
 8009a14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	891b      	ldrh	r3, [r3, #8]
 8009a30:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6959      	ldr	r1, [r3, #20]
 8009a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009a4a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009a4e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009a52:	6800      	ldr	r0, [r0, #0]
 8009a54:	f001 f97e 	bl	800ad54 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	695a      	ldr	r2, [r3, #20]
 8009a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a68:	441a      	add	r2, r3
 8009a6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6a1a      	ldr	r2, [r3, #32]
 8009a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	691b      	ldr	r3, [r3, #16]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d90f      	bls.n	8009ab2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6a1a      	ldr	r2, [r3, #32]
 8009a9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aa2:	1ad2      	subs	r2, r2, r3
 8009aa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009aa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	621a      	str	r2, [r3, #32]
 8009ab0:	e00e      	b.n	8009ad0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ac6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	2200      	movs	r2, #0
 8009ace:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009ad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ad4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	643b      	str	r3, [r7, #64]	@ 0x40
 8009adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	785b      	ldrb	r3, [r3, #1]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d177      	bne.n	8009bdc <USB_EPStartXfer+0x85e>
 8009aec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009af0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009afc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	461a      	mov	r2, r3
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0c:	4413      	add	r3, r2
 8009b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	00da      	lsls	r2, r3, #3
 8009b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b2a:	881b      	ldrh	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b36:	801a      	strh	r2, [r3, #0]
 8009b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009b3e:	d921      	bls.n	8009b84 <USB_EPStartXfer+0x806>
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b44:	095b      	lsrs	r3, r3, #5
 8009b46:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b4e:	f003 031f 	and.w	r3, r3, #31
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d104      	bne.n	8009b60 <USB_EPStartXfer+0x7e2>
 8009b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b62:	881b      	ldrh	r3, [r3, #0]
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	029b      	lsls	r3, r3, #10
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	4313      	orrs	r3, r2
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b7c:	b29a      	uxth	r2, r3
 8009b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b80:	801a      	strh	r2, [r3, #0]
 8009b82:	e050      	b.n	8009c26 <USB_EPStartXfer+0x8a8>
 8009b84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <USB_EPStartXfer+0x824>
 8009b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b8e:	881b      	ldrh	r3, [r3, #0]
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b9e:	801a      	strh	r2, [r3, #0]
 8009ba0:	e041      	b.n	8009c26 <USB_EPStartXfer+0x8a8>
 8009ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba6:	085b      	lsrs	r3, r3, #1
 8009ba8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bb0:	f003 0301 	and.w	r3, r3, #1
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d004      	beq.n	8009bc2 <USB_EPStartXfer+0x844>
 8009bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	029b      	lsls	r3, r3, #10
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bd8:	801a      	strh	r2, [r3, #0]
 8009bda:	e024      	b.n	8009c26 <USB_EPStartXfer+0x8a8>
 8009bdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d11c      	bne.n	8009c26 <USB_EPStartXfer+0x8a8>
 8009bec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	461a      	mov	r2, r3
 8009bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c00:	4413      	add	r3, r2
 8009c02:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	00da      	lsls	r2, r3, #3
 8009c12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c14:	4413      	add	r3, r2
 8009c16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c24:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	895b      	ldrh	r3, [r3, #10]
 8009c32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6959      	ldr	r1, [r3, #20]
 8009c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009c4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009c50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009c54:	6800      	ldr	r0, [r0, #0]
 8009c56:	f001 f87d 	bl	800ad54 <USB_WritePMA>
 8009c5a:	e227      	b.n	800a0ac <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	6a1b      	ldr	r3, [r3, #32]
 8009c68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c70:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c92:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	009b      	lsls	r3, r3, #2
 8009cae:	441a      	add	r2, r3
 8009cb0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009cb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009cc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ce8:	4413      	add	r3, r2
 8009cea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009cec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	00da      	lsls	r2, r3, #3
 8009cfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cfc:	4413      	add	r3, r2
 8009cfe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009d02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009d0c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	891b      	ldrh	r3, [r3, #8]
 8009d1a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	6959      	ldr	r1, [r3, #20]
 8009d2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009d34:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009d38:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009d3c:	6800      	ldr	r0, [r0, #0]
 8009d3e:	f001 f809 	bl	800ad54 <USB_WritePMA>
 8009d42:	e1b3      	b.n	800a0ac <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	6a1a      	ldr	r2, [r3, #32]
 8009d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d54:	1ad2      	subs	r2, r2, r3
 8009d56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	781b      	ldrb	r3, [r3, #0]
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	4413      	add	r3, r2
 8009d7c:	881b      	ldrh	r3, [r3, #0]
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	f000 80c6 	beq.w	8009f16 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	785b      	ldrb	r3, [r3, #1]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d177      	bne.n	8009e96 <USB_EPStartXfer+0xb18>
 8009da6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009daa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009db2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009db6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009dc6:	4413      	add	r3, r2
 8009dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009dce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	00da      	lsls	r2, r3, #3
 8009dd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009dda:	4413      	add	r3, r2
 8009ddc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009de2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009df0:	801a      	strh	r2, [r3, #0]
 8009df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009df6:	2b3e      	cmp	r3, #62	@ 0x3e
 8009df8:	d921      	bls.n	8009e3e <USB_EPStartXfer+0xac0>
 8009dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dfe:	095b      	lsrs	r3, r3, #5
 8009e00:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e08:	f003 031f 	and.w	r3, r3, #31
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <USB_EPStartXfer+0xa9c>
 8009e10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e14:	3b01      	subs	r3, #1
 8009e16:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	b29a      	uxth	r2, r3
 8009e20:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	029b      	lsls	r3, r3, #10
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	4313      	orrs	r3, r2
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e36:	b29a      	uxth	r2, r3
 8009e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e3a:	801a      	strh	r2, [r3, #0]
 8009e3c:	e050      	b.n	8009ee0 <USB_EPStartXfer+0xb62>
 8009e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d10a      	bne.n	8009e5c <USB_EPStartXfer+0xade>
 8009e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e58:	801a      	strh	r2, [r3, #0]
 8009e5a:	e041      	b.n	8009ee0 <USB_EPStartXfer+0xb62>
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e60:	085b      	lsrs	r3, r3, #1
 8009e62:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d004      	beq.n	8009e7c <USB_EPStartXfer+0xafe>
 8009e72:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e76:	3301      	adds	r3, #1
 8009e78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009e7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	029b      	lsls	r3, r3, #10
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	b29a      	uxth	r2, r3
 8009e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e92:	801a      	strh	r2, [r3, #0]
 8009e94:	e024      	b.n	8009ee0 <USB_EPStartXfer+0xb62>
 8009e96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	785b      	ldrb	r3, [r3, #1]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d11c      	bne.n	8009ee0 <USB_EPStartXfer+0xb62>
 8009ea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009eba:	4413      	add	r3, r2
 8009ebc:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	781b      	ldrb	r3, [r3, #0]
 8009eca:	00da      	lsls	r2, r3, #3
 8009ecc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ece:	4413      	add	r3, r2
 8009ed0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ede:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009ee0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ee4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	895b      	ldrh	r3, [r3, #10]
 8009eec:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ef0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ef4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	6959      	ldr	r1, [r3, #20]
 8009efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009f06:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009f0a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009f0e:	6800      	ldr	r0, [r0, #0]
 8009f10:	f000 ff20 	bl	800ad54 <USB_WritePMA>
 8009f14:	e0ca      	b.n	800a0ac <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	785b      	ldrb	r3, [r3, #1]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d177      	bne.n	800a016 <USB_EPStartXfer+0xc98>
 8009f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f40:	b29b      	uxth	r3, r3
 8009f42:	461a      	mov	r2, r3
 8009f44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f46:	4413      	add	r3, r2
 8009f48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009f4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009f4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	00da      	lsls	r2, r3, #3
 8009f58:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009f60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009f62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f6c:	b29a      	uxth	r2, r3
 8009f6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f70:	801a      	strh	r2, [r3, #0]
 8009f72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f76:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f78:	d921      	bls.n	8009fbe <USB_EPStartXfer+0xc40>
 8009f7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f7e:	095b      	lsrs	r3, r3, #5
 8009f80:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <USB_EPStartXfer+0xc1c>
 8009f90:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f94:	3b01      	subs	r3, #1
 8009f96:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	029b      	lsls	r3, r3, #10
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	4313      	orrs	r3, r2
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fba:	801a      	strh	r2, [r3, #0]
 8009fbc:	e05c      	b.n	800a078 <USB_EPStartXfer+0xcfa>
 8009fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10a      	bne.n	8009fdc <USB_EPStartXfer+0xc5e>
 8009fc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fc8:	881b      	ldrh	r3, [r3, #0]
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fd4:	b29a      	uxth	r2, r3
 8009fd6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009fd8:	801a      	strh	r2, [r3, #0]
 8009fda:	e04d      	b.n	800a078 <USB_EPStartXfer+0xcfa>
 8009fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fe0:	085b      	lsrs	r3, r3, #1
 8009fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009fe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009fea:	f003 0301 	and.w	r3, r3, #1
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d004      	beq.n	8009ffc <USB_EPStartXfer+0xc7e>
 8009ff2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009ffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	b29a      	uxth	r2, r3
 800a002:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800a006:	b29b      	uxth	r3, r3
 800a008:	029b      	lsls	r3, r3, #10
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	4313      	orrs	r3, r2
 800a00e:	b29a      	uxth	r2, r3
 800a010:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a012:	801a      	strh	r2, [r3, #0]
 800a014:	e030      	b.n	800a078 <USB_EPStartXfer+0xcfa>
 800a016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	785b      	ldrb	r3, [r3, #1]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d128      	bne.n	800a078 <USB_EPStartXfer+0xcfa>
 800a026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a02a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a042:	b29b      	uxth	r3, r3
 800a044:	461a      	mov	r2, r3
 800a046:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a04a:	4413      	add	r3, r2
 800a04c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	00da      	lsls	r2, r3, #3
 800a05e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a062:	4413      	add	r3, r2
 800a064:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a068:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a06c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a070:	b29a      	uxth	r2, r3
 800a072:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a076:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a07c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	891b      	ldrh	r3, [r3, #8]
 800a084:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	6959      	ldr	r1, [r3, #20]
 800a094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a098:	b29b      	uxth	r3, r3
 800a09a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a09e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a0a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a0a6:	6800      	ldr	r0, [r0, #0]
 800a0a8:	f000 fe54 	bl	800ad54 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	881b      	ldrh	r3, [r3, #0]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0d2:	817b      	strh	r3, [r7, #10]
 800a0d4:	897b      	ldrh	r3, [r7, #10]
 800a0d6:	f083 0310 	eor.w	r3, r3, #16
 800a0da:	817b      	strh	r3, [r7, #10]
 800a0dc:	897b      	ldrh	r3, [r7, #10]
 800a0de:	f083 0320 	eor.w	r3, r3, #32
 800a0e2:	817b      	strh	r3, [r7, #10]
 800a0e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	441a      	add	r2, r3
 800a0fe:	897b      	ldrh	r3, [r7, #10]
 800a100:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a104:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a10c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a110:	b29b      	uxth	r3, r3
 800a112:	8013      	strh	r3, [r2, #0]
 800a114:	f000 bcde 	b.w	800aad4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a11c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	7b1b      	ldrb	r3, [r3, #12]
 800a124:	2b00      	cmp	r3, #0
 800a126:	f040 80bb 	bne.w	800a2a0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a12e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	699a      	ldr	r2, [r3, #24]
 800a136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a13a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	429a      	cmp	r2, r3
 800a144:	d917      	bls.n	800a176 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	699a      	ldr	r2, [r3, #24]
 800a162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a166:	1ad2      	subs	r2, r2, r3
 800a168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a16c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	619a      	str	r2, [r3, #24]
 800a174:	e00e      	b.n	800a194 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a17a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a186:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a18a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2200      	movs	r2, #0
 800a192:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a1a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a1b8:	4413      	add	r3, r2
 800a1ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a1be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a1c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	00da      	lsls	r2, r3, #3
 800a1cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a1d0:	4413      	add	r3, r2
 800a1d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a1d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a1da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1de:	881b      	ldrh	r3, [r3, #0]
 800a1e0:	b29b      	uxth	r3, r3
 800a1e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1e6:	b29a      	uxth	r2, r3
 800a1e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1ec:	801a      	strh	r2, [r3, #0]
 800a1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1f4:	d924      	bls.n	800a240 <USB_EPStartXfer+0xec2>
 800a1f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1fa:	095b      	lsrs	r3, r3, #5
 800a1fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a204:	f003 031f 	and.w	r3, r3, #31
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d104      	bne.n	800a216 <USB_EPStartXfer+0xe98>
 800a20c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a210:	3b01      	subs	r3, #1
 800a212:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a21a:	881b      	ldrh	r3, [r3, #0]
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a222:	b29b      	uxth	r3, r3
 800a224:	029b      	lsls	r3, r3, #10
 800a226:	b29b      	uxth	r3, r3
 800a228:	4313      	orrs	r3, r2
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a234:	b29a      	uxth	r2, r3
 800a236:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a23a:	801a      	strh	r2, [r3, #0]
 800a23c:	f000 bc10 	b.w	800aa60 <USB_EPStartXfer+0x16e2>
 800a240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10c      	bne.n	800a262 <USB_EPStartXfer+0xee4>
 800a248:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a24c:	881b      	ldrh	r3, [r3, #0]
 800a24e:	b29b      	uxth	r3, r3
 800a250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a258:	b29a      	uxth	r2, r3
 800a25a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a25e:	801a      	strh	r2, [r3, #0]
 800a260:	e3fe      	b.n	800aa60 <USB_EPStartXfer+0x16e2>
 800a262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a266:	085b      	lsrs	r3, r3, #1
 800a268:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a26c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a270:	f003 0301 	and.w	r3, r3, #1
 800a274:	2b00      	cmp	r3, #0
 800a276:	d004      	beq.n	800a282 <USB_EPStartXfer+0xf04>
 800a278:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a27c:	3301      	adds	r3, #1
 800a27e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a286:	881b      	ldrh	r3, [r3, #0]
 800a288:	b29a      	uxth	r2, r3
 800a28a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a28e:	b29b      	uxth	r3, r3
 800a290:	029b      	lsls	r3, r3, #10
 800a292:	b29b      	uxth	r3, r3
 800a294:	4313      	orrs	r3, r2
 800a296:	b29a      	uxth	r2, r3
 800a298:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a29c:	801a      	strh	r2, [r3, #0]
 800a29e:	e3df      	b.n	800aa60 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a2a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	78db      	ldrb	r3, [r3, #3]
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	f040 8218 	bne.w	800a6e2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a2b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	785b      	ldrb	r3, [r3, #1]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	f040 809d 	bne.w	800a3fe <USB_EPStartXfer+0x1080>
 800a2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a2e8:	4413      	add	r3, r2
 800a2ea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a2ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	00da      	lsls	r2, r3, #3
 800a2fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a300:	4413      	add	r3, r2
 800a302:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a306:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a30a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a30e:	881b      	ldrh	r3, [r3, #0]
 800a310:	b29b      	uxth	r3, r3
 800a312:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a316:	b29a      	uxth	r2, r3
 800a318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a31c:	801a      	strh	r2, [r3, #0]
 800a31e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a322:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	691b      	ldr	r3, [r3, #16]
 800a32a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a32c:	d92b      	bls.n	800a386 <USB_EPStartXfer+0x1008>
 800a32e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a332:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	095b      	lsrs	r3, r3, #5
 800a33c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a340:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a344:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	f003 031f 	and.w	r3, r3, #31
 800a350:	2b00      	cmp	r3, #0
 800a352:	d104      	bne.n	800a35e <USB_EPStartXfer+0xfe0>
 800a354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a358:	3b01      	subs	r3, #1
 800a35a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a35e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a362:	881b      	ldrh	r3, [r3, #0]
 800a364:	b29a      	uxth	r2, r3
 800a366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	029b      	lsls	r3, r3, #10
 800a36e:	b29b      	uxth	r3, r3
 800a370:	4313      	orrs	r3, r2
 800a372:	b29b      	uxth	r3, r3
 800a374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a382:	801a      	strh	r2, [r3, #0]
 800a384:	e070      	b.n	800a468 <USB_EPStartXfer+0x10ea>
 800a386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10c      	bne.n	800a3b0 <USB_EPStartXfer+0x1032>
 800a396:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a39a:	881b      	ldrh	r3, [r3, #0]
 800a39c:	b29b      	uxth	r3, r3
 800a39e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3ac:	801a      	strh	r2, [r3, #0]
 800a3ae:	e05b      	b.n	800a468 <USB_EPStartXfer+0x10ea>
 800a3b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	085b      	lsrs	r3, r3, #1
 800a3be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f003 0301 	and.w	r3, r3, #1
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d004      	beq.n	800a3e0 <USB_EPStartXfer+0x1062>
 800a3d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3da:	3301      	adds	r3, #1
 800a3dc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a3e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	029b      	lsls	r3, r3, #10
 800a3f0:	b29b      	uxth	r3, r3
 800a3f2:	4313      	orrs	r3, r2
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a3fa:	801a      	strh	r2, [r3, #0]
 800a3fc:	e034      	b.n	800a468 <USB_EPStartXfer+0x10ea>
 800a3fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a402:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	785b      	ldrb	r3, [r3, #1]
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d12c      	bne.n	800a468 <USB_EPStartXfer+0x10ea>
 800a40e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a412:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a41c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	461a      	mov	r2, r3
 800a42e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a432:	4413      	add	r3, r2
 800a434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a438:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	00da      	lsls	r2, r3, #3
 800a446:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a44a:	4413      	add	r3, r2
 800a44c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	b29a      	uxth	r2, r3
 800a462:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a466:	801a      	strh	r2, [r3, #0]
 800a468:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a46c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a47a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b00      	cmp	r3, #0
 800a484:	f040 809d 	bne.w	800a5c2 <USB_EPStartXfer+0x1244>
 800a488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	00da      	lsls	r2, r3, #3
 800a4c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4d2:	881b      	ldrh	r3, [r3, #0]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4e0:	801a      	strh	r2, [r3, #0]
 800a4e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4f0:	d92b      	bls.n	800a54a <USB_EPStartXfer+0x11cc>
 800a4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	095b      	lsrs	r3, r3, #5
 800a500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a508:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	f003 031f 	and.w	r3, r3, #31
 800a514:	2b00      	cmp	r3, #0
 800a516:	d104      	bne.n	800a522 <USB_EPStartXfer+0x11a4>
 800a518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a51c:	3b01      	subs	r3, #1
 800a51e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a522:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b29a      	uxth	r2, r3
 800a52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a52e:	b29b      	uxth	r3, r3
 800a530:	029b      	lsls	r3, r3, #10
 800a532:	b29b      	uxth	r3, r3
 800a534:	4313      	orrs	r3, r2
 800a536:	b29b      	uxth	r3, r3
 800a538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a53c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a540:	b29a      	uxth	r2, r3
 800a542:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a546:	801a      	strh	r2, [r3, #0]
 800a548:	e069      	b.n	800a61e <USB_EPStartXfer+0x12a0>
 800a54a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a54e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	691b      	ldr	r3, [r3, #16]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10c      	bne.n	800a574 <USB_EPStartXfer+0x11f6>
 800a55a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29b      	uxth	r3, r3
 800a562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a570:	801a      	strh	r2, [r3, #0]
 800a572:	e054      	b.n	800a61e <USB_EPStartXfer+0x12a0>
 800a574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a578:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	085b      	lsrs	r3, r3, #1
 800a582:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f003 0301 	and.w	r3, r3, #1
 800a596:	2b00      	cmp	r3, #0
 800a598:	d004      	beq.n	800a5a4 <USB_EPStartXfer+0x1226>
 800a59a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a59e:	3301      	adds	r3, #1
 800a5a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a5a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5a8:	881b      	ldrh	r3, [r3, #0]
 800a5aa:	b29a      	uxth	r2, r3
 800a5ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	029b      	lsls	r3, r3, #10
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	b29a      	uxth	r2, r3
 800a5ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a5be:	801a      	strh	r2, [r3, #0]
 800a5c0:	e02d      	b.n	800a61e <USB_EPStartXfer+0x12a0>
 800a5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	785b      	ldrb	r3, [r3, #1]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d125      	bne.n	800a61e <USB_EPStartXfer+0x12a0>
 800a5d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a5e8:	4413      	add	r3, r2
 800a5ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	00da      	lsls	r2, r3, #3
 800a5fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a600:	4413      	add	r3, r2
 800a602:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a606:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a60e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	b29a      	uxth	r2, r3
 800a618:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a61c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a61e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f000 8218 	beq.w	800aa60 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a630:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a634:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	881b      	ldrh	r3, [r3, #0]
 800a64c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a650:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d005      	beq.n	800a668 <USB_EPStartXfer+0x12ea>
 800a65c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10d      	bne.n	800a684 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a668:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a66c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a670:	2b00      	cmp	r3, #0
 800a672:	f040 81f5 	bne.w	800aa60 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a676:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a67a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f040 81ee 	bne.w	800aa60 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a684:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a688:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a68c:	681a      	ldr	r2, [r3, #0]
 800a68e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	009b      	lsls	r3, r3, #2
 800a69c:	4413      	add	r3, r2
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6aa:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	781b      	ldrb	r3, [r3, #0]
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	441a      	add	r2, r3
 800a6c8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a6cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	8013      	strh	r3, [r2, #0]
 800a6e0:	e1be      	b.n	800aa60 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a6e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	78db      	ldrb	r3, [r3, #3]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	f040 81b4 	bne.w	800aa5c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a6f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	699a      	ldr	r2, [r3, #24]
 800a700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d917      	bls.n	800a740 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	691b      	ldr	r3, [r3, #16]
 800a71c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	699a      	ldr	r2, [r3, #24]
 800a72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a730:	1ad2      	subs	r2, r2, r3
 800a732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	619a      	str	r2, [r3, #24]
 800a73e:	e00e      	b.n	800a75e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	699b      	ldr	r3, [r3, #24]
 800a74c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	2200      	movs	r2, #0
 800a75c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a75e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	785b      	ldrb	r3, [r3, #1]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f040 8085 	bne.w	800a87a <USB_EPStartXfer+0x14fc>
 800a770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	461a      	mov	r2, r3
 800a790:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a794:	4413      	add	r3, r2
 800a796:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a79a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a79e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	00da      	lsls	r2, r3, #3
 800a7a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a7b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7ba:	881b      	ldrh	r3, [r3, #0]
 800a7bc:	b29b      	uxth	r3, r3
 800a7be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7c2:	b29a      	uxth	r2, r3
 800a7c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7c8:	801a      	strh	r2, [r3, #0]
 800a7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ce:	2b3e      	cmp	r3, #62	@ 0x3e
 800a7d0:	d923      	bls.n	800a81a <USB_EPStartXfer+0x149c>
 800a7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d6:	095b      	lsrs	r3, r3, #5
 800a7d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7e0:	f003 031f 	and.w	r3, r3, #31
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d104      	bne.n	800a7f2 <USB_EPStartXfer+0x1474>
 800a7e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7ec:	3b01      	subs	r3, #1
 800a7ee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a7f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7f6:	881b      	ldrh	r3, [r3, #0]
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	029b      	lsls	r3, r3, #10
 800a802:	b29b      	uxth	r3, r3
 800a804:	4313      	orrs	r3, r2
 800a806:	b29b      	uxth	r3, r3
 800a808:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a80c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a810:	b29a      	uxth	r2, r3
 800a812:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a816:	801a      	strh	r2, [r3, #0]
 800a818:	e060      	b.n	800a8dc <USB_EPStartXfer+0x155e>
 800a81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d10c      	bne.n	800a83c <USB_EPStartXfer+0x14be>
 800a822:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a82e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a832:	b29a      	uxth	r2, r3
 800a834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a838:	801a      	strh	r2, [r3, #0]
 800a83a:	e04f      	b.n	800a8dc <USB_EPStartXfer+0x155e>
 800a83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a840:	085b      	lsrs	r3, r3, #1
 800a842:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a84a:	f003 0301 	and.w	r3, r3, #1
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d004      	beq.n	800a85c <USB_EPStartXfer+0x14de>
 800a852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a856:	3301      	adds	r3, #1
 800a858:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a85c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a860:	881b      	ldrh	r3, [r3, #0]
 800a862:	b29a      	uxth	r2, r3
 800a864:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a868:	b29b      	uxth	r3, r3
 800a86a:	029b      	lsls	r3, r3, #10
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	4313      	orrs	r3, r2
 800a870:	b29a      	uxth	r2, r3
 800a872:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	e030      	b.n	800a8dc <USB_EPStartXfer+0x155e>
 800a87a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a87e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d128      	bne.n	800a8dc <USB_EPStartXfer+0x155e>
 800a88a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a88e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a89c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8a6:	b29b      	uxth	r3, r3
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a8b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	00da      	lsls	r2, r3, #3
 800a8c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a8cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a8d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a8da:	801a      	strh	r2, [r3, #0]
 800a8dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a8ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	785b      	ldrb	r3, [r3, #1]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f040 8085 	bne.w	800aa06 <USB_EPStartXfer+0x1688>
 800a8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a90e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a918:	b29b      	uxth	r3, r3
 800a91a:	461a      	mov	r2, r3
 800a91c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a920:	4413      	add	r3, r2
 800a922:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a926:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a92a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	00da      	lsls	r2, r3, #3
 800a934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a938:	4413      	add	r3, r2
 800a93a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a93e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a942:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a946:	881b      	ldrh	r3, [r3, #0]
 800a948:	b29b      	uxth	r3, r3
 800a94a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a94e:	b29a      	uxth	r2, r3
 800a950:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a954:	801a      	strh	r2, [r3, #0]
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a95c:	d923      	bls.n	800a9a6 <USB_EPStartXfer+0x1628>
 800a95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a962:	095b      	lsrs	r3, r3, #5
 800a964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a96c:	f003 031f 	and.w	r3, r3, #31
 800a970:	2b00      	cmp	r3, #0
 800a972:	d104      	bne.n	800a97e <USB_EPStartXfer+0x1600>
 800a974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a978:	3b01      	subs	r3, #1
 800a97a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a97e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a982:	881b      	ldrh	r3, [r3, #0]
 800a984:	b29a      	uxth	r2, r3
 800a986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	029b      	lsls	r3, r3, #10
 800a98e:	b29b      	uxth	r3, r3
 800a990:	4313      	orrs	r3, r2
 800a992:	b29b      	uxth	r3, r3
 800a994:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a998:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a99c:	b29a      	uxth	r2, r3
 800a99e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9a2:	801a      	strh	r2, [r3, #0]
 800a9a4:	e05c      	b.n	800aa60 <USB_EPStartXfer+0x16e2>
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d10c      	bne.n	800a9c8 <USB_EPStartXfer+0x164a>
 800a9ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9b2:	881b      	ldrh	r3, [r3, #0]
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9c4:	801a      	strh	r2, [r3, #0]
 800a9c6:	e04b      	b.n	800aa60 <USB_EPStartXfer+0x16e2>
 800a9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9cc:	085b      	lsrs	r3, r3, #1
 800a9ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d004      	beq.n	800a9e8 <USB_EPStartXfer+0x166a>
 800a9de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9e2:	3301      	adds	r3, #1
 800a9e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a9e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	b29a      	uxth	r2, r3
 800a9f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	029b      	lsls	r3, r3, #10
 800a9f8:	b29b      	uxth	r3, r3
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	b29a      	uxth	r2, r3
 800a9fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800aa02:	801a      	strh	r2, [r3, #0]
 800aa04:	e02c      	b.n	800aa60 <USB_EPStartXfer+0x16e2>
 800aa06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	785b      	ldrb	r3, [r3, #1]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d124      	bne.n	800aa60 <USB_EPStartXfer+0x16e2>
 800aa16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	461a      	mov	r2, r3
 800aa28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	00da      	lsls	r2, r3, #3
 800aa40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aa44:	4413      	add	r3, r2
 800aa46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa4a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa52:	b29a      	uxth	r2, r3
 800aa54:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa58:	801a      	strh	r2, [r3, #0]
 800aa5a:	e001      	b.n	800aa60 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e03a      	b.n	800aad6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa68:	681a      	ldr	r2, [r3, #0]
 800aa6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	4413      	add	r3, r2
 800aa7a:	881b      	ldrh	r3, [r3, #0]
 800aa7c:	b29b      	uxth	r3, r3
 800aa7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa86:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aa8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa8e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa92:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aa96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa9a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa9e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aaa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	441a      	add	r2, r3
 800aabc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aac0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aac4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aacc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aad0:	b29b      	uxth	r3, r3
 800aad2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aae0:	b480      	push	{r7}
 800aae2:	b085      	sub	sp, #20
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	785b      	ldrb	r3, [r3, #1]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d020      	beq.n	800ab34 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab08:	81bb      	strh	r3, [r7, #12]
 800ab0a:	89bb      	ldrh	r3, [r7, #12]
 800ab0c:	f083 0310 	eor.w	r3, r3, #16
 800ab10:	81bb      	strh	r3, [r7, #12]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	009b      	lsls	r3, r3, #2
 800ab1a:	441a      	add	r2, r3
 800ab1c:	89bb      	ldrh	r3, [r7, #12]
 800ab1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	8013      	strh	r3, [r2, #0]
 800ab32:	e01f      	b.n	800ab74 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	881b      	ldrh	r3, [r3, #0]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ab46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab4a:	81fb      	strh	r3, [r7, #14]
 800ab4c:	89fb      	ldrh	r3, [r7, #14]
 800ab4e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ab52:	81fb      	strh	r3, [r7, #14]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	441a      	add	r2, r3
 800ab5e:	89fb      	ldrh	r3, [r7, #14]
 800ab60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab70:	b29b      	uxth	r3, r3
 800ab72:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3714      	adds	r7, #20
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab82:	b480      	push	{r7}
 800ab84:	b087      	sub	sp, #28
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	7b1b      	ldrb	r3, [r3, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f040 809d 	bne.w	800acd0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	785b      	ldrb	r3, [r3, #1]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d04c      	beq.n	800ac38 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	823b      	strh	r3, [r7, #16]
 800abac:	8a3b      	ldrh	r3, [r7, #16]
 800abae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d01b      	beq.n	800abee <USB_EPClearStall+0x6c>
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	881b      	ldrh	r3, [r3, #0]
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abcc:	81fb      	strh	r3, [r7, #14]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	441a      	add	r2, r3
 800abd8:	89fb      	ldrh	r3, [r7, #14]
 800abda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abe6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800abea:	b29b      	uxth	r3, r3
 800abec:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	78db      	ldrb	r3, [r3, #3]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d06c      	beq.n	800acd0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	881b      	ldrh	r3, [r3, #0]
 800ac02:	b29b      	uxth	r3, r3
 800ac04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac0c:	81bb      	strh	r3, [r7, #12]
 800ac0e:	89bb      	ldrh	r3, [r7, #12]
 800ac10:	f083 0320 	eor.w	r3, r3, #32
 800ac14:	81bb      	strh	r3, [r7, #12]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	441a      	add	r2, r3
 800ac20:	89bb      	ldrh	r3, [r7, #12]
 800ac22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	8013      	strh	r3, [r2, #0]
 800ac36:	e04b      	b.n	800acd0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	82fb      	strh	r3, [r7, #22]
 800ac46:	8afb      	ldrh	r3, [r7, #22]
 800ac48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d01b      	beq.n	800ac88 <USB_EPClearStall+0x106>
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac66:	82bb      	strh	r3, [r7, #20]
 800ac68:	687a      	ldr	r2, [r7, #4]
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	441a      	add	r2, r3
 800ac72:	8abb      	ldrh	r3, [r7, #20]
 800ac74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac84:	b29b      	uxth	r3, r3
 800ac86:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	881b      	ldrh	r3, [r3, #0]
 800ac94:	b29b      	uxth	r3, r3
 800ac96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac9e:	827b      	strh	r3, [r7, #18]
 800aca0:	8a7b      	ldrh	r3, [r7, #18]
 800aca2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aca6:	827b      	strh	r3, [r7, #18]
 800aca8:	8a7b      	ldrh	r3, [r7, #18]
 800acaa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800acae:	827b      	strh	r3, [r7, #18]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	441a      	add	r2, r3
 800acba:	8a7b      	ldrh	r3, [r7, #18]
 800acbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800accc:	b29b      	uxth	r3, r3
 800acce:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	371c      	adds	r7, #28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800acde:	b480      	push	{r7}
 800ace0:	b083      	sub	sp, #12
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	460b      	mov	r3, r1
 800ace8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800acea:	78fb      	ldrb	r3, [r7, #3]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d103      	bne.n	800acf8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2280      	movs	r2, #128	@ 0x80
 800acf4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	370c      	adds	r7, #12
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr

0800ad06 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ad06:	b480      	push	{r7}
 800ad08:	b083      	sub	sp, #12
 800ad0a:	af00      	add	r7, sp, #0
 800ad0c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ad26:	2300      	movs	r3, #0
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	370c      	adds	r7, #12
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ad42:	b29b      	uxth	r3, r3
 800ad44:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad46:	68fb      	ldr	r3, [r7, #12]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b08b      	sub	sp, #44	@ 0x2c
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	4611      	mov	r1, r2
 800ad60:	461a      	mov	r2, r3
 800ad62:	460b      	mov	r3, r1
 800ad64:	80fb      	strh	r3, [r7, #6]
 800ad66:	4613      	mov	r3, r2
 800ad68:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad6a:	88bb      	ldrh	r3, [r7, #4]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	085b      	lsrs	r3, r3, #1
 800ad70:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad7a:	88fa      	ldrh	r2, [r7, #6]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	4413      	add	r3, r2
 800ad80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad84:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad8a:	e01b      	b.n	800adc4 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ad92:	69fb      	ldr	r3, [r7, #28]
 800ad94:	3301      	adds	r3, #1
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	021b      	lsls	r3, r3, #8
 800ad9a:	b21a      	sxth	r2, r3
 800ad9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	b21b      	sxth	r3, r3
 800ada4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	8a7a      	ldrh	r2, [r7, #18]
 800adaa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800adac:	6a3b      	ldr	r3, [r7, #32]
 800adae:	3302      	adds	r3, #2
 800adb0:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	3301      	adds	r3, #1
 800adb6:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	3301      	adds	r3, #1
 800adbc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	3b01      	subs	r3, #1
 800adc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800adc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1e0      	bne.n	800ad8c <USB_WritePMA+0x38>
  }
}
 800adca:	bf00      	nop
 800adcc:	bf00      	nop
 800adce:	372c      	adds	r7, #44	@ 0x2c
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800add8:	b480      	push	{r7}
 800adda:	b08b      	sub	sp, #44	@ 0x2c
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	4611      	mov	r1, r2
 800ade4:	461a      	mov	r2, r3
 800ade6:	460b      	mov	r3, r1
 800ade8:	80fb      	strh	r3, [r7, #6]
 800adea:	4613      	mov	r3, r2
 800adec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800adee:	88bb      	ldrh	r3, [r7, #4]
 800adf0:	085b      	lsrs	r3, r3, #1
 800adf2:	b29b      	uxth	r3, r3
 800adf4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800adfe:	88fa      	ldrh	r2, [r7, #6]
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ae08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae0a:	69bb      	ldr	r3, [r7, #24]
 800ae0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae0e:	e018      	b.n	800ae42 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	3302      	adds	r3, #2
 800ae1c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	0a1b      	lsrs	r3, r3, #8
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1e3      	bne.n	800ae10 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ae48:	88bb      	ldrh	r3, [r7, #4]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d007      	beq.n	800ae64 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ae54:	6a3b      	ldr	r3, [r7, #32]
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	69fb      	ldr	r3, [r7, #28]
 800ae62:	701a      	strb	r2, [r3, #0]
  }
}
 800ae64:	bf00      	nop
 800ae66:	372c      	adds	r7, #44	@ 0x2c
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae7c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ae80:	f002 fabe 	bl	800d400 <USBD_static_malloc>
 800ae84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d105      	bne.n	800ae98 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ae94:	2302      	movs	r3, #2
 800ae96:	e066      	b.n	800af66 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	7c1b      	ldrb	r3, [r3, #16]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d119      	bne.n	800aedc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aea8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aeac:	2202      	movs	r2, #2
 800aeae:	2181      	movs	r1, #129	@ 0x81
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f002 f94c 	bl	800d14e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2201      	movs	r2, #1
 800aeba:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aec0:	2202      	movs	r2, #2
 800aec2:	2101      	movs	r1, #1
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f002 f942 	bl	800d14e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2210      	movs	r2, #16
 800aed6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800aeda:	e016      	b.n	800af0a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800aedc:	2340      	movs	r3, #64	@ 0x40
 800aede:	2202      	movs	r2, #2
 800aee0:	2181      	movs	r1, #129	@ 0x81
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f002 f933 	bl	800d14e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800aeee:	2340      	movs	r3, #64	@ 0x40
 800aef0:	2202      	movs	r2, #2
 800aef2:	2101      	movs	r1, #1
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f002 f92a 	bl	800d14e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2201      	movs	r2, #1
 800aefe:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2210      	movs	r2, #16
 800af06:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800af0a:	2308      	movs	r3, #8
 800af0c:	2203      	movs	r2, #3
 800af0e:	2182      	movs	r1, #130	@ 0x82
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f002 f91c 	bl	800d14e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2201      	movs	r2, #1
 800af1a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7c1b      	ldrb	r3, [r3, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d109      	bne.n	800af54 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af4a:	2101      	movs	r1, #1
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f002 f9ed 	bl	800d32c <USBD_LL_PrepareReceive>
 800af52:	e007      	b.n	800af64 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af5a:	2340      	movs	r3, #64	@ 0x40
 800af5c:	2101      	movs	r1, #1
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f002 f9e4 	bl	800d32c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3710      	adds	r7, #16
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}

0800af6e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800af6e:	b580      	push	{r7, lr}
 800af70:	b082      	sub	sp, #8
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	460b      	mov	r3, r1
 800af78:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af7a:	2181      	movs	r1, #129	@ 0x81
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f002 f90c 	bl	800d19a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800af88:	2101      	movs	r1, #1
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f002 f905 	bl	800d19a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800af98:	2182      	movs	r1, #130	@ 0x82
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f002 f8fd 	bl	800d19a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2200      	movs	r2, #0
 800afac:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00e      	beq.n	800afd8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800afca:	4618      	mov	r0, r3
 800afcc:	f002 fa26 	bl	800d41c <USBD_static_free>
    pdev->pClassData = NULL;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800afd8:	2300      	movs	r3, #0
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800aff4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800affa:	2300      	movs	r3, #0
 800affc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b008:	2303      	movs	r3, #3
 800b00a:	e0af      	b.n	800b16c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b014:	2b00      	cmp	r3, #0
 800b016:	d03f      	beq.n	800b098 <USBD_CDC_Setup+0xb4>
 800b018:	2b20      	cmp	r3, #32
 800b01a:	f040 809f 	bne.w	800b15c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	88db      	ldrh	r3, [r3, #6]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d02e      	beq.n	800b084 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	b25b      	sxtb	r3, r3
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	da16      	bge.n	800b05e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	683a      	ldr	r2, [r7, #0]
 800b03a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b03c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b03e:	683a      	ldr	r2, [r7, #0]
 800b040:	88d2      	ldrh	r2, [r2, #6]
 800b042:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	88db      	ldrh	r3, [r3, #6]
 800b048:	2b07      	cmp	r3, #7
 800b04a:	bf28      	it	cs
 800b04c:	2307      	movcs	r3, #7
 800b04e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	89fa      	ldrh	r2, [r7, #14]
 800b054:	4619      	mov	r1, r3
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 facd 	bl	800c5f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b05c:	e085      	b.n	800b16a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	785a      	ldrb	r2, [r3, #1]
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	88db      	ldrh	r3, [r3, #6]
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b074:	6939      	ldr	r1, [r7, #16]
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	88db      	ldrh	r3, [r3, #6]
 800b07a:	461a      	mov	r2, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f001 fae6 	bl	800c64e <USBD_CtlPrepareRx>
      break;
 800b082:	e072      	b.n	800b16a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	683a      	ldr	r2, [r7, #0]
 800b08e:	7850      	ldrb	r0, [r2, #1]
 800b090:	2200      	movs	r2, #0
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	4798      	blx	r3
      break;
 800b096:	e068      	b.n	800b16a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	785b      	ldrb	r3, [r3, #1]
 800b09c:	2b0b      	cmp	r3, #11
 800b09e:	d852      	bhi.n	800b146 <USBD_CDC_Setup+0x162>
 800b0a0:	a201      	add	r2, pc, #4	@ (adr r2, 800b0a8 <USBD_CDC_Setup+0xc4>)
 800b0a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a6:	bf00      	nop
 800b0a8:	0800b0d9 	.word	0x0800b0d9
 800b0ac:	0800b155 	.word	0x0800b155
 800b0b0:	0800b147 	.word	0x0800b147
 800b0b4:	0800b147 	.word	0x0800b147
 800b0b8:	0800b147 	.word	0x0800b147
 800b0bc:	0800b147 	.word	0x0800b147
 800b0c0:	0800b147 	.word	0x0800b147
 800b0c4:	0800b147 	.word	0x0800b147
 800b0c8:	0800b147 	.word	0x0800b147
 800b0cc:	0800b147 	.word	0x0800b147
 800b0d0:	0800b103 	.word	0x0800b103
 800b0d4:	0800b12d 	.word	0x0800b12d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d107      	bne.n	800b0f4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b0e4:	f107 030a 	add.w	r3, r7, #10
 800b0e8:	2202      	movs	r2, #2
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f001 fa82 	bl	800c5f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0f2:	e032      	b.n	800b15a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f001 fa0c 	bl	800c514 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	75fb      	strb	r3, [r7, #23]
          break;
 800b100:	e02b      	b.n	800b15a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b03      	cmp	r3, #3
 800b10c:	d107      	bne.n	800b11e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b10e:	f107 030d 	add.w	r3, r7, #13
 800b112:	2201      	movs	r2, #1
 800b114:	4619      	mov	r1, r3
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f001 fa6d 	bl	800c5f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b11c:	e01d      	b.n	800b15a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f001 f9f7 	bl	800c514 <USBD_CtlError>
            ret = USBD_FAIL;
 800b126:	2303      	movs	r3, #3
 800b128:	75fb      	strb	r3, [r7, #23]
          break;
 800b12a:	e016      	b.n	800b15a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b132:	b2db      	uxtb	r3, r3
 800b134:	2b03      	cmp	r3, #3
 800b136:	d00f      	beq.n	800b158 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f001 f9ea 	bl	800c514 <USBD_CtlError>
            ret = USBD_FAIL;
 800b140:	2303      	movs	r3, #3
 800b142:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b144:	e008      	b.n	800b158 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f001 f9e3 	bl	800c514 <USBD_CtlError>
          ret = USBD_FAIL;
 800b14e:	2303      	movs	r3, #3
 800b150:	75fb      	strb	r3, [r7, #23]
          break;
 800b152:	e002      	b.n	800b15a <USBD_CDC_Setup+0x176>
          break;
 800b154:	bf00      	nop
 800b156:	e008      	b.n	800b16a <USBD_CDC_Setup+0x186>
          break;
 800b158:	bf00      	nop
      }
      break;
 800b15a:	e006      	b.n	800b16a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b15c:	6839      	ldr	r1, [r7, #0]
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f001 f9d8 	bl	800c514 <USBD_CtlError>
      ret = USBD_FAIL;
 800b164:	2303      	movs	r3, #3
 800b166:	75fb      	strb	r3, [r7, #23]
      break;
 800b168:	bf00      	nop
  }

  return (uint8_t)ret;
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3718      	adds	r7, #24
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b186:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d101      	bne.n	800b196 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b192:	2303      	movs	r3, #3
 800b194:	e04f      	b.n	800b236 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b19c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b19e:	78fa      	ldrb	r2, [r7, #3]
 800b1a0:	6879      	ldr	r1, [r7, #4]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	4413      	add	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	440b      	add	r3, r1
 800b1ac:	3318      	adds	r3, #24
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d029      	beq.n	800b208 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	6879      	ldr	r1, [r7, #4]
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	440b      	add	r3, r1
 800b1c2:	3318      	adds	r3, #24
 800b1c4:	681a      	ldr	r2, [r3, #0]
 800b1c6:	78f9      	ldrb	r1, [r7, #3]
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	009b      	lsls	r3, r3, #2
 800b1ce:	440b      	add	r3, r1
 800b1d0:	00db      	lsls	r3, r3, #3
 800b1d2:	4403      	add	r3, r0
 800b1d4:	3320      	adds	r3, #32
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1dc:	fb01 f303 	mul.w	r3, r1, r3
 800b1e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d110      	bne.n	800b208 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b1e6:	78fa      	ldrb	r2, [r7, #3]
 800b1e8:	6879      	ldr	r1, [r7, #4]
 800b1ea:	4613      	mov	r3, r2
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	440b      	add	r3, r1
 800b1f4:	3318      	adds	r3, #24
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b1fa:	78f9      	ldrb	r1, [r7, #3]
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	2200      	movs	r2, #0
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f002 f872 	bl	800d2ea <USBD_LL_Transmit>
 800b206:	e015      	b.n	800b234 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b216:	691b      	ldr	r3, [r3, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d00b      	beq.n	800b234 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b222:	691b      	ldr	r3, [r3, #16]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b230:	78fa      	ldrb	r2, [r7, #3]
 800b232:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	460b      	mov	r3, r1
 800b248:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b250:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b25c:	2303      	movs	r3, #3
 800b25e:	e015      	b.n	800b28c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	4619      	mov	r1, r3
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f002 f882 	bl	800d36e <USBD_LL_GetRxDataSize>
 800b26a:	4602      	mov	r2, r0
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b278:	68db      	ldr	r3, [r3, #12]
 800b27a:	68fa      	ldr	r2, [r7, #12]
 800b27c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b286:	4611      	mov	r1, r2
 800b288:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b2a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e01a      	b.n	800b2e4 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d014      	beq.n	800b2e2 <USBD_CDC_EP0_RxReady+0x4e>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b2be:	2bff      	cmp	r3, #255	@ 0xff
 800b2c0:	d00f      	beq.n	800b2e2 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	68fa      	ldr	r2, [r7, #12]
 800b2cc:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b2d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b2d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	22ff      	movs	r2, #255	@ 0xff
 800b2de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3710      	adds	r7, #16
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b083      	sub	sp, #12
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2243      	movs	r2, #67	@ 0x43
 800b2f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b2fa:	4b03      	ldr	r3, [pc, #12]	@ (800b308 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	200000a0 	.word	0x200000a0

0800b30c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2243      	movs	r2, #67	@ 0x43
 800b318:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b31a:	4b03      	ldr	r3, [pc, #12]	@ (800b328 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	370c      	adds	r7, #12
 800b320:	46bd      	mov	sp, r7
 800b322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b326:	4770      	bx	lr
 800b328:	2000005c 	.word	0x2000005c

0800b32c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2243      	movs	r2, #67	@ 0x43
 800b338:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b33a:	4b03      	ldr	r3, [pc, #12]	@ (800b348 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	370c      	adds	r7, #12
 800b340:	46bd      	mov	sp, r7
 800b342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b346:	4770      	bx	lr
 800b348:	200000e4 	.word	0x200000e4

0800b34c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	220a      	movs	r2, #10
 800b358:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b35a:	4b03      	ldr	r3, [pc, #12]	@ (800b368 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	20000018 	.word	0x20000018

0800b36c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e004      	b.n	800b38a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b388:	2300      	movs	r3, #0
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	370c      	adds	r7, #12
 800b38e:	46bd      	mov	sp, r7
 800b390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b394:	4770      	bx	lr

0800b396 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b396:	b480      	push	{r7}
 800b398:	b087      	sub	sp, #28
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e008      	b.n	800b3c6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	68ba      	ldr	r2, [r7, #8]
 800b3b8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	371c      	adds	r7, #28
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b085      	sub	sp, #20
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
 800b3da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	e004      	b.n	800b3f8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	683a      	ldr	r2, [r7, #0]
 800b3f2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b3f6:	2300      	movs	r3, #0
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b412:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b414:	2301      	movs	r3, #1
 800b416:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d101      	bne.n	800b426 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b422:	2303      	movs	r3, #3
 800b424:	e01a      	b.n	800b45c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d114      	bne.n	800b45a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	2201      	movs	r2, #1
 800b434:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b44e:	2181      	movs	r1, #129	@ 0x81
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f001 ff4a 	bl	800d2ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b45a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b47e:	2303      	movs	r3, #3
 800b480:	e016      	b.n	800b4b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	7c1b      	ldrb	r3, [r3, #16]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b490:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b494:	2101      	movs	r1, #1
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f001 ff48 	bl	800d32c <USBD_LL_PrepareReceive>
 800b49c:	e007      	b.n	800b4ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4a4:	2340      	movs	r3, #64	@ 0x40
 800b4a6:	2101      	movs	r1, #1
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f001 ff3f 	bl	800d32c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4ae:	2300      	movs	r3, #0
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3710      	adds	r7, #16
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}

0800b4b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b086      	sub	sp, #24
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e01f      	b.n	800b510 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2201      	movs	r2, #1
 800b4fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	79fa      	ldrb	r2, [r7, #7]
 800b502:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b504:	68f8      	ldr	r0, [r7, #12]
 800b506:	f001 fda7 	bl	800d058 <USBD_LL_Init>
 800b50a:	4603      	mov	r3, r0
 800b50c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b510:	4618      	mov	r0, r3
 800b512:	3718      	adds	r7, #24
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b522:	2300      	movs	r3, #0
 800b524:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d101      	bne.n	800b530 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e016      	b.n	800b55e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b53e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00b      	beq.n	800b55c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b54a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54c:	f107 020e 	add.w	r2, r7, #14
 800b550:	4610      	mov	r0, r2
 800b552:	4798      	blx	r3
 800b554:	4602      	mov	r2, r0
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3710      	adds	r7, #16
 800b562:	46bd      	mov	sp, r7
 800b564:	bd80      	pop	{r7, pc}

0800b566 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b566:	b580      	push	{r7, lr}
 800b568:	b082      	sub	sp, #8
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f001 fdd2 	bl	800d118 <USBD_LL_Start>
 800b574:	4603      	mov	r3, r0
}
 800b576:	4618      	mov	r0, r3
 800b578:	3708      	adds	r7, #8
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}

0800b57e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
 800b59c:	460b      	mov	r3, r1
 800b59e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d009      	beq.n	800b5c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	78fa      	ldrb	r2, [r7, #3]
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b5c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3710      	adds	r7, #16
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d007      	beq.n	800b5f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	78fa      	ldrb	r2, [r7, #3]
 800b5ec:	4611      	mov	r1, r2
 800b5ee:	6878      	ldr	r0, [r7, #4]
 800b5f0:	4798      	blx	r3
  }

  return USBD_OK;
 800b5f2:	2300      	movs	r3, #0
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3708      	adds	r7, #8
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}

0800b5fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
 800b604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	4618      	mov	r0, r3
 800b610:	f000 ff46 	bl	800c4a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b622:	461a      	mov	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b630:	f003 031f 	and.w	r3, r3, #31
 800b634:	2b02      	cmp	r3, #2
 800b636:	d01a      	beq.n	800b66e <USBD_LL_SetupStage+0x72>
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d822      	bhi.n	800b682 <USBD_LL_SetupStage+0x86>
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d002      	beq.n	800b646 <USBD_LL_SetupStage+0x4a>
 800b640:	2b01      	cmp	r3, #1
 800b642:	d00a      	beq.n	800b65a <USBD_LL_SetupStage+0x5e>
 800b644:	e01d      	b.n	800b682 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b64c:	4619      	mov	r1, r3
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 f9ee 	bl	800ba30 <USBD_StdDevReq>
 800b654:	4603      	mov	r3, r0
 800b656:	73fb      	strb	r3, [r7, #15]
      break;
 800b658:	e020      	b.n	800b69c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b660:	4619      	mov	r1, r3
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fa52 	bl	800bb0c <USBD_StdItfReq>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]
      break;
 800b66c:	e016      	b.n	800b69c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b674:	4619      	mov	r1, r3
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 fa91 	bl	800bb9e <USBD_StdEPReq>
 800b67c:	4603      	mov	r3, r0
 800b67e:	73fb      	strb	r3, [r7, #15]
      break;
 800b680:	e00c      	b.n	800b69c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b688:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	4619      	mov	r1, r3
 800b690:	6878      	ldr	r0, [r7, #4]
 800b692:	f001 fda1 	bl	800d1d8 <USBD_LL_StallEP>
 800b696:	4603      	mov	r3, r0
 800b698:	73fb      	strb	r3, [r7, #15]
      break;
 800b69a:	bf00      	nop
  }

  return ret;
 800b69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3710      	adds	r7, #16
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b086      	sub	sp, #24
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	60f8      	str	r0, [r7, #12]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	607a      	str	r2, [r7, #4]
 800b6b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b6b4:	7afb      	ldrb	r3, [r7, #11]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d138      	bne.n	800b72c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b6c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b6c8:	2b03      	cmp	r3, #3
 800b6ca:	d14a      	bne.n	800b762 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	689a      	ldr	r2, [r3, #8]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d913      	bls.n	800b700 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	689a      	ldr	r2, [r3, #8]
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	1ad2      	subs	r2, r2, r3
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	68da      	ldr	r2, [r3, #12]
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	bf28      	it	cs
 800b6f2:	4613      	movcs	r3, r2
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6879      	ldr	r1, [r7, #4]
 800b6f8:	68f8      	ldr	r0, [r7, #12]
 800b6fa:	f000 ffc5 	bl	800c688 <USBD_CtlContinueRx>
 800b6fe:	e030      	b.n	800b762 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b03      	cmp	r3, #3
 800b70a:	d10b      	bne.n	800b724 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b712:	691b      	ldr	r3, [r3, #16]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d005      	beq.n	800b724 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	68f8      	ldr	r0, [r7, #12]
 800b722:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f000 ffc0 	bl	800c6aa <USBD_CtlSendStatus>
 800b72a:	e01a      	b.n	800b762 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b732:	b2db      	uxtb	r3, r3
 800b734:	2b03      	cmp	r3, #3
 800b736:	d114      	bne.n	800b762 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d00e      	beq.n	800b762 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	7afa      	ldrb	r2, [r7, #11]
 800b74e:	4611      	mov	r1, r2
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	4798      	blx	r3
 800b754:	4603      	mov	r3, r0
 800b756:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b758:	7dfb      	ldrb	r3, [r7, #23]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d001      	beq.n	800b762 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	e000      	b.n	800b764 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	3718      	adds	r7, #24
 800b768:	46bd      	mov	sp, r7
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	60f8      	str	r0, [r7, #12]
 800b774:	460b      	mov	r3, r1
 800b776:	607a      	str	r2, [r7, #4]
 800b778:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b77a:	7afb      	ldrb	r3, [r7, #11]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d16b      	bne.n	800b858 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3314      	adds	r3, #20
 800b784:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b78c:	2b02      	cmp	r3, #2
 800b78e:	d156      	bne.n	800b83e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d914      	bls.n	800b7c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	689a      	ldr	r2, [r3, #8]
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	68db      	ldr	r3, [r3, #12]
 800b7a4:	1ad2      	subs	r2, r2, r3
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	6879      	ldr	r1, [r7, #4]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 ff3a 	bl	800c62c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	2100      	movs	r1, #0
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f001 fdb4 	bl	800d32c <USBD_LL_PrepareReceive>
 800b7c4:	e03b      	b.n	800b83e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	68da      	ldr	r2, [r3, #12]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d11c      	bne.n	800b80c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	685a      	ldr	r2, [r3, #4]
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b7da:	429a      	cmp	r2, r3
 800b7dc:	d316      	bcc.n	800b80c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	685a      	ldr	r2, [r3, #4]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d20f      	bcs.n	800b80c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f000 ff1b 	bl	800c62c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7fe:	2300      	movs	r3, #0
 800b800:	2200      	movs	r2, #0
 800b802:	2100      	movs	r1, #0
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	f001 fd91 	bl	800d32c <USBD_LL_PrepareReceive>
 800b80a:	e018      	b.n	800b83e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b812:	b2db      	uxtb	r3, r3
 800b814:	2b03      	cmp	r3, #3
 800b816:	d10b      	bne.n	800b830 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b81e:	68db      	ldr	r3, [r3, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d005      	beq.n	800b830 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b830:	2180      	movs	r1, #128	@ 0x80
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f001 fcd0 	bl	800d1d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f000 ff49 	bl	800c6d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b844:	2b01      	cmp	r3, #1
 800b846:	d122      	bne.n	800b88e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	f7ff fe98 	bl	800b57e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2200      	movs	r2, #0
 800b852:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b856:	e01a      	b.n	800b88e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b85e:	b2db      	uxtb	r3, r3
 800b860:	2b03      	cmp	r3, #3
 800b862:	d114      	bne.n	800b88e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00e      	beq.n	800b88e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b876:	695b      	ldr	r3, [r3, #20]
 800b878:	7afa      	ldrb	r2, [r7, #11]
 800b87a:	4611      	mov	r1, r2
 800b87c:	68f8      	ldr	r0, [r7, #12]
 800b87e:	4798      	blx	r3
 800b880:	4603      	mov	r3, r0
 800b882:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b884:	7dfb      	ldrb	r3, [r7, #23]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d001      	beq.n	800b88e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b88a:	7dfb      	ldrb	r3, [r7, #23]
 800b88c:	e000      	b.n	800b890 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b88e:	2300      	movs	r3, #0
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d101      	bne.n	800b8cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b8c8:	2303      	movs	r3, #3
 800b8ca:	e02f      	b.n	800b92c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d00f      	beq.n	800b8f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d009      	beq.n	800b8f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	6852      	ldr	r2, [r2, #4]
 800b8ee:	b2d2      	uxtb	r2, r2
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b8f6:	2340      	movs	r3, #64	@ 0x40
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 fc26 	bl	800d14e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2201      	movs	r2, #1
 800b906:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2240      	movs	r2, #64	@ 0x40
 800b90e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b912:	2340      	movs	r3, #64	@ 0x40
 800b914:	2200      	movs	r2, #0
 800b916:	2180      	movs	r1, #128	@ 0x80
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f001 fc18 	bl	800d14e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2240      	movs	r2, #64	@ 0x40
 800b928:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3708      	adds	r7, #8
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	78fa      	ldrb	r2, [r7, #3]
 800b944:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b962:	b2da      	uxtb	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2204      	movs	r2, #4
 800b96e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	2b04      	cmp	r3, #4
 800b992:	d106      	bne.n	800b9a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b99a:	b2da      	uxtb	r2, r3
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b9a2:	2300      	movs	r3, #0
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	370c      	adds	r7, #12
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d101      	bne.n	800b9c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b9c2:	2303      	movs	r3, #3
 800b9c4:	e012      	b.n	800b9ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d10b      	bne.n	800b9ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9d8:	69db      	ldr	r3, [r3, #28]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d005      	beq.n	800b9ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b087      	sub	sp, #28
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	3301      	adds	r3, #1
 800ba0a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ba12:	8a3b      	ldrh	r3, [r7, #16]
 800ba14:	021b      	lsls	r3, r3, #8
 800ba16:	b21a      	sxth	r2, r3
 800ba18:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	b21b      	sxth	r3, r3
 800ba20:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ba22:	89fb      	ldrh	r3, [r7, #14]
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	371c      	adds	r7, #28
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba46:	2b40      	cmp	r3, #64	@ 0x40
 800ba48:	d005      	beq.n	800ba56 <USBD_StdDevReq+0x26>
 800ba4a:	2b40      	cmp	r3, #64	@ 0x40
 800ba4c:	d853      	bhi.n	800baf6 <USBD_StdDevReq+0xc6>
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00b      	beq.n	800ba6a <USBD_StdDevReq+0x3a>
 800ba52:	2b20      	cmp	r3, #32
 800ba54:	d14f      	bne.n	800baf6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	4798      	blx	r3
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]
      break;
 800ba68:	e04a      	b.n	800bb00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	785b      	ldrb	r3, [r3, #1]
 800ba6e:	2b09      	cmp	r3, #9
 800ba70:	d83b      	bhi.n	800baea <USBD_StdDevReq+0xba>
 800ba72:	a201      	add	r2, pc, #4	@ (adr r2, 800ba78 <USBD_StdDevReq+0x48>)
 800ba74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba78:	0800bacd 	.word	0x0800bacd
 800ba7c:	0800bae1 	.word	0x0800bae1
 800ba80:	0800baeb 	.word	0x0800baeb
 800ba84:	0800bad7 	.word	0x0800bad7
 800ba88:	0800baeb 	.word	0x0800baeb
 800ba8c:	0800baab 	.word	0x0800baab
 800ba90:	0800baa1 	.word	0x0800baa1
 800ba94:	0800baeb 	.word	0x0800baeb
 800ba98:	0800bac3 	.word	0x0800bac3
 800ba9c:	0800bab5 	.word	0x0800bab5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800baa0:	6839      	ldr	r1, [r7, #0]
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f9de 	bl	800be64 <USBD_GetDescriptor>
          break;
 800baa8:	e024      	b.n	800baf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800baaa:	6839      	ldr	r1, [r7, #0]
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f000 fb6d 	bl	800c18c <USBD_SetAddress>
          break;
 800bab2:	e01f      	b.n	800baf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bab4:	6839      	ldr	r1, [r7, #0]
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fbac 	bl	800c214 <USBD_SetConfig>
 800babc:	4603      	mov	r3, r0
 800babe:	73fb      	strb	r3, [r7, #15]
          break;
 800bac0:	e018      	b.n	800baf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fc4b 	bl	800c360 <USBD_GetConfig>
          break;
 800baca:	e013      	b.n	800baf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 fc7c 	bl	800c3cc <USBD_GetStatus>
          break;
 800bad4:	e00e      	b.n	800baf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bad6:	6839      	ldr	r1, [r7, #0]
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fcab 	bl	800c434 <USBD_SetFeature>
          break;
 800bade:	e009      	b.n	800baf4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bae0:	6839      	ldr	r1, [r7, #0]
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fcba 	bl	800c45c <USBD_ClrFeature>
          break;
 800bae8:	e004      	b.n	800baf4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800baea:	6839      	ldr	r1, [r7, #0]
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fd11 	bl	800c514 <USBD_CtlError>
          break;
 800baf2:	bf00      	nop
      }
      break;
 800baf4:	e004      	b.n	800bb00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fd0b 	bl	800c514 <USBD_CtlError>
      break;
 800bafe:	bf00      	nop
  }

  return ret;
 800bb00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop

0800bb0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb16:	2300      	movs	r3, #0
 800bb18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb22:	2b40      	cmp	r3, #64	@ 0x40
 800bb24:	d005      	beq.n	800bb32 <USBD_StdItfReq+0x26>
 800bb26:	2b40      	cmp	r3, #64	@ 0x40
 800bb28:	d82f      	bhi.n	800bb8a <USBD_StdItfReq+0x7e>
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d001      	beq.n	800bb32 <USBD_StdItfReq+0x26>
 800bb2e:	2b20      	cmp	r3, #32
 800bb30:	d12b      	bne.n	800bb8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	2b02      	cmp	r3, #2
 800bb3e:	d81d      	bhi.n	800bb7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	889b      	ldrh	r3, [r3, #4]
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d813      	bhi.n	800bb72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb50:	689b      	ldr	r3, [r3, #8]
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	4798      	blx	r3
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	88db      	ldrh	r3, [r3, #6]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d110      	bne.n	800bb86 <USBD_StdItfReq+0x7a>
 800bb64:	7bfb      	ldrb	r3, [r7, #15]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d10d      	bne.n	800bb86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fd9d 	bl	800c6aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bb70:	e009      	b.n	800bb86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bb72:	6839      	ldr	r1, [r7, #0]
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fccd 	bl	800c514 <USBD_CtlError>
          break;
 800bb7a:	e004      	b.n	800bb86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bb7c:	6839      	ldr	r1, [r7, #0]
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fcc8 	bl	800c514 <USBD_CtlError>
          break;
 800bb84:	e000      	b.n	800bb88 <USBD_StdItfReq+0x7c>
          break;
 800bb86:	bf00      	nop
      }
      break;
 800bb88:	e004      	b.n	800bb94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bb8a:	6839      	ldr	r1, [r7, #0]
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fcc1 	bl	800c514 <USBD_CtlError>
      break;
 800bb92:	bf00      	nop
  }

  return ret;
 800bb94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}

0800bb9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b084      	sub	sp, #16
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
 800bba6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	889b      	ldrh	r3, [r3, #4]
 800bbb0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bbba:	2b40      	cmp	r3, #64	@ 0x40
 800bbbc:	d007      	beq.n	800bbce <USBD_StdEPReq+0x30>
 800bbbe:	2b40      	cmp	r3, #64	@ 0x40
 800bbc0:	f200 8145 	bhi.w	800be4e <USBD_StdEPReq+0x2b0>
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d00c      	beq.n	800bbe2 <USBD_StdEPReq+0x44>
 800bbc8:	2b20      	cmp	r3, #32
 800bbca:	f040 8140 	bne.w	800be4e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	6839      	ldr	r1, [r7, #0]
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	4798      	blx	r3
 800bbdc:	4603      	mov	r3, r0
 800bbde:	73fb      	strb	r3, [r7, #15]
      break;
 800bbe0:	e13a      	b.n	800be58 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	785b      	ldrb	r3, [r3, #1]
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d007      	beq.n	800bbfa <USBD_StdEPReq+0x5c>
 800bbea:	2b03      	cmp	r3, #3
 800bbec:	f300 8129 	bgt.w	800be42 <USBD_StdEPReq+0x2a4>
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d07f      	beq.n	800bcf4 <USBD_StdEPReq+0x156>
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d03c      	beq.n	800bc72 <USBD_StdEPReq+0xd4>
 800bbf8:	e123      	b.n	800be42 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d002      	beq.n	800bc0c <USBD_StdEPReq+0x6e>
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d016      	beq.n	800bc38 <USBD_StdEPReq+0x9a>
 800bc0a:	e02c      	b.n	800bc66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00d      	beq.n	800bc2e <USBD_StdEPReq+0x90>
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b80      	cmp	r3, #128	@ 0x80
 800bc16:	d00a      	beq.n	800bc2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 fadb 	bl	800d1d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc22:	2180      	movs	r1, #128	@ 0x80
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 fad7 	bl	800d1d8 <USBD_LL_StallEP>
 800bc2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc2c:	e020      	b.n	800bc70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fc6f 	bl	800c514 <USBD_CtlError>
              break;
 800bc36:	e01b      	b.n	800bc70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	885b      	ldrh	r3, [r3, #2]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d10e      	bne.n	800bc5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d00b      	beq.n	800bc5e <USBD_StdEPReq+0xc0>
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	2b80      	cmp	r3, #128	@ 0x80
 800bc4a:	d008      	beq.n	800bc5e <USBD_StdEPReq+0xc0>
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	88db      	ldrh	r3, [r3, #6]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d104      	bne.n	800bc5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc54:	7bbb      	ldrb	r3, [r7, #14]
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f001 fabd 	bl	800d1d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fd23 	bl	800c6aa <USBD_CtlSendStatus>

              break;
 800bc64:	e004      	b.n	800bc70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bc66:	6839      	ldr	r1, [r7, #0]
 800bc68:	6878      	ldr	r0, [r7, #4]
 800bc6a:	f000 fc53 	bl	800c514 <USBD_CtlError>
              break;
 800bc6e:	bf00      	nop
          }
          break;
 800bc70:	e0ec      	b.n	800be4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d002      	beq.n	800bc84 <USBD_StdEPReq+0xe6>
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d016      	beq.n	800bcb0 <USBD_StdEPReq+0x112>
 800bc82:	e030      	b.n	800bce6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc84:	7bbb      	ldrb	r3, [r7, #14]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00d      	beq.n	800bca6 <USBD_StdEPReq+0x108>
 800bc8a:	7bbb      	ldrb	r3, [r7, #14]
 800bc8c:	2b80      	cmp	r3, #128	@ 0x80
 800bc8e:	d00a      	beq.n	800bca6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc90:	7bbb      	ldrb	r3, [r7, #14]
 800bc92:	4619      	mov	r1, r3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f001 fa9f 	bl	800d1d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc9a:	2180      	movs	r1, #128	@ 0x80
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f001 fa9b 	bl	800d1d8 <USBD_LL_StallEP>
 800bca2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bca4:	e025      	b.n	800bcf2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bca6:	6839      	ldr	r1, [r7, #0]
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f000 fc33 	bl	800c514 <USBD_CtlError>
              break;
 800bcae:	e020      	b.n	800bcf2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	885b      	ldrh	r3, [r3, #2]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d11b      	bne.n	800bcf0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bcb8:	7bbb      	ldrb	r3, [r7, #14]
 800bcba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d004      	beq.n	800bccc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bcc2:	7bbb      	ldrb	r3, [r7, #14]
 800bcc4:	4619      	mov	r1, r3
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f001 faa5 	bl	800d216 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fcec 	bl	800c6aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	6839      	ldr	r1, [r7, #0]
 800bcdc:	6878      	ldr	r0, [r7, #4]
 800bcde:	4798      	blx	r3
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bce4:	e004      	b.n	800bcf0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fc13 	bl	800c514 <USBD_CtlError>
              break;
 800bcee:	e000      	b.n	800bcf2 <USBD_StdEPReq+0x154>
              break;
 800bcf0:	bf00      	nop
          }
          break;
 800bcf2:	e0ab      	b.n	800be4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d002      	beq.n	800bd06 <USBD_StdEPReq+0x168>
 800bd00:	2b03      	cmp	r3, #3
 800bd02:	d032      	beq.n	800bd6a <USBD_StdEPReq+0x1cc>
 800bd04:	e097      	b.n	800be36 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd06:	7bbb      	ldrb	r3, [r7, #14]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d007      	beq.n	800bd1c <USBD_StdEPReq+0x17e>
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	2b80      	cmp	r3, #128	@ 0x80
 800bd10:	d004      	beq.n	800bd1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bd12:	6839      	ldr	r1, [r7, #0]
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 fbfd 	bl	800c514 <USBD_CtlError>
                break;
 800bd1a:	e091      	b.n	800be40 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	da0b      	bge.n	800bd3c <USBD_StdEPReq+0x19e>
 800bd24:	7bbb      	ldrb	r3, [r7, #14]
 800bd26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	3310      	adds	r3, #16
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	4413      	add	r3, r2
 800bd38:	3304      	adds	r3, #4
 800bd3a:	e00b      	b.n	800bd54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd3c:	7bbb      	ldrb	r3, [r7, #14]
 800bd3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd42:	4613      	mov	r3, r2
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	4413      	add	r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	4413      	add	r3, r2
 800bd52:	3304      	adds	r3, #4
 800bd54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	2202      	movs	r2, #2
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f000 fc47 	bl	800c5f6 <USBD_CtlSendData>
              break;
 800bd68:	e06a      	b.n	800be40 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bd6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	da11      	bge.n	800bd96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bd72:	7bbb      	ldrb	r3, [r7, #14]
 800bd74:	f003 020f 	and.w	r2, r3, #15
 800bd78:	6879      	ldr	r1, [r7, #4]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	009b      	lsls	r3, r3, #2
 800bd7e:	4413      	add	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	440b      	add	r3, r1
 800bd84:	3324      	adds	r3, #36	@ 0x24
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d117      	bne.n	800bdbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fbc0 	bl	800c514 <USBD_CtlError>
                  break;
 800bd94:	e054      	b.n	800be40 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd96:	7bbb      	ldrb	r3, [r7, #14]
 800bd98:	f003 020f 	and.w	r2, r3, #15
 800bd9c:	6879      	ldr	r1, [r7, #4]
 800bd9e:	4613      	mov	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	4413      	add	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	440b      	add	r3, r1
 800bda8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d104      	bne.n	800bdbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bdb2:	6839      	ldr	r1, [r7, #0]
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 fbad 	bl	800c514 <USBD_CtlError>
                  break;
 800bdba:	e041      	b.n	800be40 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	da0b      	bge.n	800bddc <USBD_StdEPReq+0x23e>
 800bdc4:	7bbb      	ldrb	r3, [r7, #14]
 800bdc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bdca:	4613      	mov	r3, r2
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	3310      	adds	r3, #16
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	3304      	adds	r3, #4
 800bdda:	e00b      	b.n	800bdf4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bddc:	7bbb      	ldrb	r3, [r7, #14]
 800bdde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bde2:	4613      	mov	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bdf6:	7bbb      	ldrb	r3, [r7, #14]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <USBD_StdEPReq+0x264>
 800bdfc:	7bbb      	ldrb	r3, [r7, #14]
 800bdfe:	2b80      	cmp	r3, #128	@ 0x80
 800be00:	d103      	bne.n	800be0a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	2200      	movs	r2, #0
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	e00e      	b.n	800be28 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800be0a:	7bbb      	ldrb	r3, [r7, #14]
 800be0c:	4619      	mov	r1, r3
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f001 fa20 	bl	800d254 <USBD_LL_IsStallEP>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d003      	beq.n	800be22 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	2201      	movs	r2, #1
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	e002      	b.n	800be28 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	2200      	movs	r2, #0
 800be26:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	2202      	movs	r2, #2
 800be2c:	4619      	mov	r1, r3
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fbe1 	bl	800c5f6 <USBD_CtlSendData>
              break;
 800be34:	e004      	b.n	800be40 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800be36:	6839      	ldr	r1, [r7, #0]
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f000 fb6b 	bl	800c514 <USBD_CtlError>
              break;
 800be3e:	bf00      	nop
          }
          break;
 800be40:	e004      	b.n	800be4c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800be42:	6839      	ldr	r1, [r7, #0]
 800be44:	6878      	ldr	r0, [r7, #4]
 800be46:	f000 fb65 	bl	800c514 <USBD_CtlError>
          break;
 800be4a:	bf00      	nop
      }
      break;
 800be4c:	e004      	b.n	800be58 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fb5f 	bl	800c514 <USBD_CtlError>
      break;
 800be56:	bf00      	nop
  }

  return ret;
 800be58:	7bfb      	ldrb	r3, [r7, #15]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
	...

0800be64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800be6e:	2300      	movs	r3, #0
 800be70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800be72:	2300      	movs	r3, #0
 800be74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800be76:	2300      	movs	r3, #0
 800be78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	885b      	ldrh	r3, [r3, #2]
 800be7e:	0a1b      	lsrs	r3, r3, #8
 800be80:	b29b      	uxth	r3, r3
 800be82:	3b01      	subs	r3, #1
 800be84:	2b0e      	cmp	r3, #14
 800be86:	f200 8152 	bhi.w	800c12e <USBD_GetDescriptor+0x2ca>
 800be8a:	a201      	add	r2, pc, #4	@ (adr r2, 800be90 <USBD_GetDescriptor+0x2c>)
 800be8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be90:	0800bf01 	.word	0x0800bf01
 800be94:	0800bf19 	.word	0x0800bf19
 800be98:	0800bf59 	.word	0x0800bf59
 800be9c:	0800c12f 	.word	0x0800c12f
 800bea0:	0800c12f 	.word	0x0800c12f
 800bea4:	0800c0cf 	.word	0x0800c0cf
 800bea8:	0800c0fb 	.word	0x0800c0fb
 800beac:	0800c12f 	.word	0x0800c12f
 800beb0:	0800c12f 	.word	0x0800c12f
 800beb4:	0800c12f 	.word	0x0800c12f
 800beb8:	0800c12f 	.word	0x0800c12f
 800bebc:	0800c12f 	.word	0x0800c12f
 800bec0:	0800c12f 	.word	0x0800c12f
 800bec4:	0800c12f 	.word	0x0800c12f
 800bec8:	0800becd 	.word	0x0800becd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed2:	69db      	ldr	r3, [r3, #28]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00b      	beq.n	800bef0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bede:	69db      	ldr	r3, [r3, #28]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	7c12      	ldrb	r2, [r2, #16]
 800bee4:	f107 0108 	add.w	r1, r7, #8
 800bee8:	4610      	mov	r0, r2
 800beea:	4798      	blx	r3
 800beec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800beee:	e126      	b.n	800c13e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 fb0e 	bl	800c514 <USBD_CtlError>
        err++;
 800bef8:	7afb      	ldrb	r3, [r7, #11]
 800befa:	3301      	adds	r3, #1
 800befc:	72fb      	strb	r3, [r7, #11]
      break;
 800befe:	e11e      	b.n	800c13e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	7c12      	ldrb	r2, [r2, #16]
 800bf0c:	f107 0108 	add.w	r1, r7, #8
 800bf10:	4610      	mov	r0, r2
 800bf12:	4798      	blx	r3
 800bf14:	60f8      	str	r0, [r7, #12]
      break;
 800bf16:	e112      	b.n	800c13e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	7c1b      	ldrb	r3, [r3, #16]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d10d      	bne.n	800bf3c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf28:	f107 0208 	add.w	r2, r7, #8
 800bf2c:	4610      	mov	r0, r2
 800bf2e:	4798      	blx	r3
 800bf30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	3301      	adds	r3, #1
 800bf36:	2202      	movs	r2, #2
 800bf38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf3a:	e100      	b.n	800c13e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf44:	f107 0208 	add.w	r2, r7, #8
 800bf48:	4610      	mov	r0, r2
 800bf4a:	4798      	blx	r3
 800bf4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3301      	adds	r3, #1
 800bf52:	2202      	movs	r2, #2
 800bf54:	701a      	strb	r2, [r3, #0]
      break;
 800bf56:	e0f2      	b.n	800c13e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	885b      	ldrh	r3, [r3, #2]
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	2b05      	cmp	r3, #5
 800bf60:	f200 80ac 	bhi.w	800c0bc <USBD_GetDescriptor+0x258>
 800bf64:	a201      	add	r2, pc, #4	@ (adr r2, 800bf6c <USBD_GetDescriptor+0x108>)
 800bf66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf6a:	bf00      	nop
 800bf6c:	0800bf85 	.word	0x0800bf85
 800bf70:	0800bfb9 	.word	0x0800bfb9
 800bf74:	0800bfed 	.word	0x0800bfed
 800bf78:	0800c021 	.word	0x0800c021
 800bf7c:	0800c055 	.word	0x0800c055
 800bf80:	0800c089 	.word	0x0800c089
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d00b      	beq.n	800bfa8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf96:	685b      	ldr	r3, [r3, #4]
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	7c12      	ldrb	r2, [r2, #16]
 800bf9c:	f107 0108 	add.w	r1, r7, #8
 800bfa0:	4610      	mov	r0, r2
 800bfa2:	4798      	blx	r3
 800bfa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfa6:	e091      	b.n	800c0cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bfa8:	6839      	ldr	r1, [r7, #0]
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fab2 	bl	800c514 <USBD_CtlError>
            err++;
 800bfb0:	7afb      	ldrb	r3, [r7, #11]
 800bfb2:	3301      	adds	r3, #1
 800bfb4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfb6:	e089      	b.n	800c0cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfbe:	689b      	ldr	r3, [r3, #8]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00b      	beq.n	800bfdc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	7c12      	ldrb	r2, [r2, #16]
 800bfd0:	f107 0108 	add.w	r1, r7, #8
 800bfd4:	4610      	mov	r0, r2
 800bfd6:	4798      	blx	r3
 800bfd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfda:	e077      	b.n	800c0cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bfdc:	6839      	ldr	r1, [r7, #0]
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 fa98 	bl	800c514 <USBD_CtlError>
            err++;
 800bfe4:	7afb      	ldrb	r3, [r7, #11]
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfea:	e06f      	b.n	800c0cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bff2:	68db      	ldr	r3, [r3, #12]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00b      	beq.n	800c010 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bffe:	68db      	ldr	r3, [r3, #12]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	7c12      	ldrb	r2, [r2, #16]
 800c004:	f107 0108 	add.w	r1, r7, #8
 800c008:	4610      	mov	r0, r2
 800c00a:	4798      	blx	r3
 800c00c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c00e:	e05d      	b.n	800c0cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 fa7e 	bl	800c514 <USBD_CtlError>
            err++;
 800c018:	7afb      	ldrb	r3, [r7, #11]
 800c01a:	3301      	adds	r3, #1
 800c01c:	72fb      	strb	r3, [r7, #11]
          break;
 800c01e:	e055      	b.n	800c0cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c026:	691b      	ldr	r3, [r3, #16]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00b      	beq.n	800c044 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	7c12      	ldrb	r2, [r2, #16]
 800c038:	f107 0108 	add.w	r1, r7, #8
 800c03c:	4610      	mov	r0, r2
 800c03e:	4798      	blx	r3
 800c040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c042:	e043      	b.n	800c0cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fa64 	bl	800c514 <USBD_CtlError>
            err++;
 800c04c:	7afb      	ldrb	r3, [r7, #11]
 800c04e:	3301      	adds	r3, #1
 800c050:	72fb      	strb	r3, [r7, #11]
          break;
 800c052:	e03b      	b.n	800c0cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c05a:	695b      	ldr	r3, [r3, #20]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d00b      	beq.n	800c078 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	7c12      	ldrb	r2, [r2, #16]
 800c06c:	f107 0108 	add.w	r1, r7, #8
 800c070:	4610      	mov	r0, r2
 800c072:	4798      	blx	r3
 800c074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c076:	e029      	b.n	800c0cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c078:	6839      	ldr	r1, [r7, #0]
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fa4a 	bl	800c514 <USBD_CtlError>
            err++;
 800c080:	7afb      	ldrb	r3, [r7, #11]
 800c082:	3301      	adds	r3, #1
 800c084:	72fb      	strb	r3, [r7, #11]
          break;
 800c086:	e021      	b.n	800c0cc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c08e:	699b      	ldr	r3, [r3, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00b      	beq.n	800c0ac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c09a:	699b      	ldr	r3, [r3, #24]
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	7c12      	ldrb	r2, [r2, #16]
 800c0a0:	f107 0108 	add.w	r1, r7, #8
 800c0a4:	4610      	mov	r0, r2
 800c0a6:	4798      	blx	r3
 800c0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0aa:	e00f      	b.n	800c0cc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 fa30 	bl	800c514 <USBD_CtlError>
            err++;
 800c0b4:	7afb      	ldrb	r3, [r7, #11]
 800c0b6:	3301      	adds	r3, #1
 800c0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c0ba:	e007      	b.n	800c0cc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fa28 	bl	800c514 <USBD_CtlError>
          err++;
 800c0c4:	7afb      	ldrb	r3, [r7, #11]
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c0ca:	bf00      	nop
      }
      break;
 800c0cc:	e037      	b.n	800c13e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	7c1b      	ldrb	r3, [r3, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d109      	bne.n	800c0ea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c0dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c0de:	f107 0208 	add.w	r2, r7, #8
 800c0e2:	4610      	mov	r0, r2
 800c0e4:	4798      	blx	r3
 800c0e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0e8:	e029      	b.n	800c13e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c0ea:	6839      	ldr	r1, [r7, #0]
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 fa11 	bl	800c514 <USBD_CtlError>
        err++;
 800c0f2:	7afb      	ldrb	r3, [r7, #11]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	72fb      	strb	r3, [r7, #11]
      break;
 800c0f8:	e021      	b.n	800c13e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	7c1b      	ldrb	r3, [r3, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d10d      	bne.n	800c11e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c10a:	f107 0208 	add.w	r2, r7, #8
 800c10e:	4610      	mov	r0, r2
 800c110:	4798      	blx	r3
 800c112:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	3301      	adds	r3, #1
 800c118:	2207      	movs	r2, #7
 800c11a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c11c:	e00f      	b.n	800c13e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c11e:	6839      	ldr	r1, [r7, #0]
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f9f7 	bl	800c514 <USBD_CtlError>
        err++;
 800c126:	7afb      	ldrb	r3, [r7, #11]
 800c128:	3301      	adds	r3, #1
 800c12a:	72fb      	strb	r3, [r7, #11]
      break;
 800c12c:	e007      	b.n	800c13e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c12e:	6839      	ldr	r1, [r7, #0]
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f9ef 	bl	800c514 <USBD_CtlError>
      err++;
 800c136:	7afb      	ldrb	r3, [r7, #11]
 800c138:	3301      	adds	r3, #1
 800c13a:	72fb      	strb	r3, [r7, #11]
      break;
 800c13c:	bf00      	nop
  }

  if (err != 0U)
 800c13e:	7afb      	ldrb	r3, [r7, #11]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d11e      	bne.n	800c182 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	88db      	ldrh	r3, [r3, #6]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d016      	beq.n	800c17a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c14c:	893b      	ldrh	r3, [r7, #8]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00e      	beq.n	800c170 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	88da      	ldrh	r2, [r3, #6]
 800c156:	893b      	ldrh	r3, [r7, #8]
 800c158:	4293      	cmp	r3, r2
 800c15a:	bf28      	it	cs
 800c15c:	4613      	movcs	r3, r2
 800c15e:	b29b      	uxth	r3, r3
 800c160:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c162:	893b      	ldrh	r3, [r7, #8]
 800c164:	461a      	mov	r2, r3
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f000 fa44 	bl	800c5f6 <USBD_CtlSendData>
 800c16e:	e009      	b.n	800c184 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 f9ce 	bl	800c514 <USBD_CtlError>
 800c178:	e004      	b.n	800c184 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fa95 	bl	800c6aa <USBD_CtlSendStatus>
 800c180:	e000      	b.n	800c184 <USBD_GetDescriptor+0x320>
    return;
 800c182:	bf00      	nop
  }
}
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}
 800c18a:	bf00      	nop

0800c18c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c18c:	b580      	push	{r7, lr}
 800c18e:	b084      	sub	sp, #16
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	889b      	ldrh	r3, [r3, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d131      	bne.n	800c202 <USBD_SetAddress+0x76>
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	88db      	ldrh	r3, [r3, #6]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d12d      	bne.n	800c202 <USBD_SetAddress+0x76>
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	885b      	ldrh	r3, [r3, #2]
 800c1aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800c1ac:	d829      	bhi.n	800c202 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	885b      	ldrh	r3, [r3, #2]
 800c1b2:	b2db      	uxtb	r3, r3
 800c1b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1c0:	b2db      	uxtb	r3, r3
 800c1c2:	2b03      	cmp	r3, #3
 800c1c4:	d104      	bne.n	800c1d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 f9a3 	bl	800c514 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ce:	e01d      	b.n	800c20c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	7bfa      	ldrb	r2, [r7, #15]
 800c1d4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
 800c1da:	4619      	mov	r1, r3
 800c1dc:	6878      	ldr	r0, [r7, #4]
 800c1de:	f001 f865 	bl	800d2ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 fa61 	bl	800c6aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c1e8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d004      	beq.n	800c1f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2202      	movs	r2, #2
 800c1f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1f6:	e009      	b.n	800c20c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c200:	e004      	b.n	800c20c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f985 	bl	800c514 <USBD_CtlError>
  }
}
 800c20a:	bf00      	nop
 800c20c:	bf00      	nop
 800c20e:	3710      	adds	r7, #16
 800c210:	46bd      	mov	sp, r7
 800c212:	bd80      	pop	{r7, pc}

0800c214 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b084      	sub	sp, #16
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	885b      	ldrh	r3, [r3, #2]
 800c226:	b2da      	uxtb	r2, r3
 800c228:	4b4c      	ldr	r3, [pc, #304]	@ (800c35c <USBD_SetConfig+0x148>)
 800c22a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c22c:	4b4b      	ldr	r3, [pc, #300]	@ (800c35c <USBD_SetConfig+0x148>)
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	2b01      	cmp	r3, #1
 800c232:	d905      	bls.n	800c240 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f96c 	bl	800c514 <USBD_CtlError>
    return USBD_FAIL;
 800c23c:	2303      	movs	r3, #3
 800c23e:	e088      	b.n	800c352 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c246:	b2db      	uxtb	r3, r3
 800c248:	2b02      	cmp	r3, #2
 800c24a:	d002      	beq.n	800c252 <USBD_SetConfig+0x3e>
 800c24c:	2b03      	cmp	r3, #3
 800c24e:	d025      	beq.n	800c29c <USBD_SetConfig+0x88>
 800c250:	e071      	b.n	800c336 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c252:	4b42      	ldr	r3, [pc, #264]	@ (800c35c <USBD_SetConfig+0x148>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d01c      	beq.n	800c294 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c25a:	4b40      	ldr	r3, [pc, #256]	@ (800c35c <USBD_SetConfig+0x148>)
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	461a      	mov	r2, r3
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c264:	4b3d      	ldr	r3, [pc, #244]	@ (800c35c <USBD_SetConfig+0x148>)
 800c266:	781b      	ldrb	r3, [r3, #0]
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff f992 	bl	800b594 <USBD_SetClassConfig>
 800c270:	4603      	mov	r3, r0
 800c272:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c274:	7bfb      	ldrb	r3, [r7, #15]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d004      	beq.n	800c284 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f949 	bl	800c514 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c282:	e065      	b.n	800c350 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fa10 	bl	800c6aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2203      	movs	r2, #3
 800c28e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c292:	e05d      	b.n	800c350 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f000 fa08 	bl	800c6aa <USBD_CtlSendStatus>
      break;
 800c29a:	e059      	b.n	800c350 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c29c:	4b2f      	ldr	r3, [pc, #188]	@ (800c35c <USBD_SetConfig+0x148>)
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d112      	bne.n	800c2ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c2ac:	4b2b      	ldr	r3, [pc, #172]	@ (800c35c <USBD_SetConfig+0x148>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2b6:	4b29      	ldr	r3, [pc, #164]	@ (800c35c <USBD_SetConfig+0x148>)
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f7ff f985 	bl	800b5cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 f9f1 	bl	800c6aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c2c8:	e042      	b.n	800c350 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c2ca:	4b24      	ldr	r3, [pc, #144]	@ (800c35c <USBD_SetConfig+0x148>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	d02a      	beq.n	800c32e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	b2db      	uxtb	r3, r3
 800c2de:	4619      	mov	r1, r3
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7ff f973 	bl	800b5cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c2e6:	4b1d      	ldr	r3, [pc, #116]	@ (800c35c <USBD_SetConfig+0x148>)
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c2f0:	4b1a      	ldr	r3, [pc, #104]	@ (800c35c <USBD_SetConfig+0x148>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7ff f94c 	bl	800b594 <USBD_SetClassConfig>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c300:	7bfb      	ldrb	r3, [r7, #15]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00f      	beq.n	800c326 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 f903 	bl	800c514 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	b2db      	uxtb	r3, r3
 800c314:	4619      	mov	r1, r3
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f7ff f958 	bl	800b5cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2202      	movs	r2, #2
 800c320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c324:	e014      	b.n	800c350 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f9bf 	bl	800c6aa <USBD_CtlSendStatus>
      break;
 800c32c:	e010      	b.n	800c350 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f9bb 	bl	800c6aa <USBD_CtlSendStatus>
      break;
 800c334:	e00c      	b.n	800c350 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f8eb 	bl	800c514 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c33e:	4b07      	ldr	r3, [pc, #28]	@ (800c35c <USBD_SetConfig+0x148>)
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	4619      	mov	r1, r3
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f7ff f941 	bl	800b5cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c34a:	2303      	movs	r3, #3
 800c34c:	73fb      	strb	r3, [r7, #15]
      break;
 800c34e:	bf00      	nop
  }

  return ret;
 800c350:	7bfb      	ldrb	r3, [r7, #15]
}
 800c352:	4618      	mov	r0, r3
 800c354:	3710      	adds	r7, #16
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20003768 	.word	0x20003768

0800c360 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	88db      	ldrh	r3, [r3, #6]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d004      	beq.n	800c37c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c372:	6839      	ldr	r1, [r7, #0]
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f000 f8cd 	bl	800c514 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c37a:	e023      	b.n	800c3c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c382:	b2db      	uxtb	r3, r3
 800c384:	2b02      	cmp	r3, #2
 800c386:	dc02      	bgt.n	800c38e <USBD_GetConfig+0x2e>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc03      	bgt.n	800c394 <USBD_GetConfig+0x34>
 800c38c:	e015      	b.n	800c3ba <USBD_GetConfig+0x5a>
 800c38e:	2b03      	cmp	r3, #3
 800c390:	d00b      	beq.n	800c3aa <USBD_GetConfig+0x4a>
 800c392:	e012      	b.n	800c3ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2200      	movs	r2, #0
 800c398:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	3308      	adds	r3, #8
 800c39e:	2201      	movs	r2, #1
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f927 	bl	800c5f6 <USBD_CtlSendData>
        break;
 800c3a8:	e00c      	b.n	800c3c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	3304      	adds	r3, #4
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f91f 	bl	800c5f6 <USBD_CtlSendData>
        break;
 800c3b8:	e004      	b.n	800c3c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f8a9 	bl	800c514 <USBD_CtlError>
        break;
 800c3c2:	bf00      	nop
}
 800c3c4:	bf00      	nop
 800c3c6:	3708      	adds	r7, #8
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d81e      	bhi.n	800c422 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	88db      	ldrh	r3, [r3, #6]
 800c3e8:	2b02      	cmp	r3, #2
 800c3ea:	d004      	beq.n	800c3f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f890 	bl	800c514 <USBD_CtlError>
        break;
 800c3f4:	e01a      	b.n	800c42c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c402:	2b00      	cmp	r3, #0
 800c404:	d005      	beq.n	800c412 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68db      	ldr	r3, [r3, #12]
 800c40a:	f043 0202 	orr.w	r2, r3, #2
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	330c      	adds	r3, #12
 800c416:	2202      	movs	r2, #2
 800c418:	4619      	mov	r1, r3
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 f8eb 	bl	800c5f6 <USBD_CtlSendData>
      break;
 800c420:	e004      	b.n	800c42c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c422:	6839      	ldr	r1, [r7, #0]
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 f875 	bl	800c514 <USBD_CtlError>
      break;
 800c42a:	bf00      	nop
  }
}
 800c42c:	bf00      	nop
 800c42e:	3708      	adds	r7, #8
 800c430:	46bd      	mov	sp, r7
 800c432:	bd80      	pop	{r7, pc}

0800c434 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	885b      	ldrh	r3, [r3, #2]
 800c442:	2b01      	cmp	r3, #1
 800c444:	d106      	bne.n	800c454 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2201      	movs	r2, #1
 800c44a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 f92b 	bl	800c6aa <USBD_CtlSendStatus>
  }
}
 800c454:	bf00      	nop
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}

0800c45c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	3b01      	subs	r3, #1
 800c470:	2b02      	cmp	r3, #2
 800c472:	d80b      	bhi.n	800c48c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	885b      	ldrh	r3, [r3, #2]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d10c      	bne.n	800c496 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f910 	bl	800c6aa <USBD_CtlSendStatus>
      }
      break;
 800c48a:	e004      	b.n	800c496 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c48c:	6839      	ldr	r1, [r7, #0]
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f000 f840 	bl	800c514 <USBD_CtlError>
      break;
 800c494:	e000      	b.n	800c498 <USBD_ClrFeature+0x3c>
      break;
 800c496:	bf00      	nop
  }
}
 800c498:	bf00      	nop
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	781a      	ldrb	r2, [r3, #0]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	781a      	ldrb	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f7ff fa92 	bl	800b9f4 <SWAPBYTE>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f7ff fa85 	bl	800b9f4 <SWAPBYTE>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff fa78 	bl	800b9f4 <SWAPBYTE>
 800c504:	4603      	mov	r3, r0
 800c506:	461a      	mov	r2, r3
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	80da      	strh	r2, [r3, #6]
}
 800c50c:	bf00      	nop
 800c50e:	3710      	adds	r7, #16
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b082      	sub	sp, #8
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c51e:	2180      	movs	r1, #128	@ 0x80
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 fe59 	bl	800d1d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c526:	2100      	movs	r1, #0
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fe55 	bl	800d1d8 <USBD_LL_StallEP>
}
 800c52e:	bf00      	nop
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b086      	sub	sp, #24
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	60f8      	str	r0, [r7, #12]
 800c53e:	60b9      	str	r1, [r7, #8]
 800c540:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c542:	2300      	movs	r3, #0
 800c544:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d036      	beq.n	800c5ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c550:	6938      	ldr	r0, [r7, #16]
 800c552:	f000 f836 	bl	800c5c2 <USBD_GetLen>
 800c556:	4603      	mov	r3, r0
 800c558:	3301      	adds	r3, #1
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	b29a      	uxth	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	4413      	add	r3, r2
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	7812      	ldrb	r2, [r2, #0]
 800c56e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c570:	7dfb      	ldrb	r3, [r7, #23]
 800c572:	3301      	adds	r3, #1
 800c574:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c576:	7dfb      	ldrb	r3, [r7, #23]
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	4413      	add	r3, r2
 800c57c:	2203      	movs	r2, #3
 800c57e:	701a      	strb	r2, [r3, #0]
  idx++;
 800c580:	7dfb      	ldrb	r3, [r7, #23]
 800c582:	3301      	adds	r3, #1
 800c584:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c586:	e013      	b.n	800c5b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c588:	7dfb      	ldrb	r3, [r7, #23]
 800c58a:	68ba      	ldr	r2, [r7, #8]
 800c58c:	4413      	add	r3, r2
 800c58e:	693a      	ldr	r2, [r7, #16]
 800c590:	7812      	ldrb	r2, [r2, #0]
 800c592:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	3301      	adds	r3, #1
 800c598:	613b      	str	r3, [r7, #16]
    idx++;
 800c59a:	7dfb      	ldrb	r3, [r7, #23]
 800c59c:	3301      	adds	r3, #1
 800c59e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
 800c5a2:	68ba      	ldr	r2, [r7, #8]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	701a      	strb	r2, [r3, #0]
    idx++;
 800c5aa:	7dfb      	ldrb	r3, [r7, #23]
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d1e7      	bne.n	800c588 <USBD_GetString+0x52>
 800c5b8:	e000      	b.n	800c5bc <USBD_GetString+0x86>
    return;
 800c5ba:	bf00      	nop
  }
}
 800c5bc:	3718      	adds	r7, #24
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	bd80      	pop	{r7, pc}

0800c5c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5c2:	b480      	push	{r7}
 800c5c4:	b085      	sub	sp, #20
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c5d2:	e005      	b.n	800c5e0 <USBD_GetLen+0x1e>
  {
    len++;
 800c5d4:	7bfb      	ldrb	r3, [r7, #15]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	3301      	adds	r3, #1
 800c5de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1f5      	bne.n	800c5d4 <USBD_GetLen+0x12>
  }

  return len;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr

0800c5f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c5f6:	b580      	push	{r7, lr}
 800c5f8:	b084      	sub	sp, #16
 800c5fa:	af00      	add	r7, sp, #0
 800c5fc:	60f8      	str	r0, [r7, #12]
 800c5fe:	60b9      	str	r1, [r7, #8]
 800c600:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2202      	movs	r2, #2
 800c606:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	2100      	movs	r1, #0
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 fe64 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3710      	adds	r7, #16
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	68ba      	ldr	r2, [r7, #8]
 800c63c:	2100      	movs	r1, #0
 800c63e:	68f8      	ldr	r0, [r7, #12]
 800c640:	f000 fe53 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3710      	adds	r7, #16
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b084      	sub	sp, #16
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2203      	movs	r2, #3
 800c65e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	68ba      	ldr	r2, [r7, #8]
 800c676:	2100      	movs	r1, #0
 800c678:	68f8      	ldr	r0, [r7, #12]
 800c67a:	f000 fe57 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c67e:	2300      	movs	r3, #0
}
 800c680:	4618      	mov	r0, r3
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	68ba      	ldr	r2, [r7, #8]
 800c698:	2100      	movs	r1, #0
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f000 fe46 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b082      	sub	sp, #8
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2204      	movs	r2, #4
 800c6b6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	2200      	movs	r2, #0
 800c6be:	2100      	movs	r1, #0
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fe12 	bl	800d2ea <USBD_LL_Transmit>

  return USBD_OK;
 800c6c6:	2300      	movs	r3, #0
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2205      	movs	r2, #5
 800c6dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fe20 	bl	800d32c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
	...

0800c6f8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	4912      	ldr	r1, [pc, #72]	@ (800c748 <MX_USB_Device_Init+0x50>)
 800c700:	4812      	ldr	r0, [pc, #72]	@ (800c74c <MX_USB_Device_Init+0x54>)
 800c702:	f7fe fed9 	bl	800b4b8 <USBD_Init>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d001      	beq.n	800c710 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c70c:	f7f6 fe56 	bl	80033bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c710:	490f      	ldr	r1, [pc, #60]	@ (800c750 <MX_USB_Device_Init+0x58>)
 800c712:	480e      	ldr	r0, [pc, #56]	@ (800c74c <MX_USB_Device_Init+0x54>)
 800c714:	f7fe ff00 	bl	800b518 <USBD_RegisterClass>
 800c718:	4603      	mov	r3, r0
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d001      	beq.n	800c722 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c71e:	f7f6 fe4d 	bl	80033bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c722:	490c      	ldr	r1, [pc, #48]	@ (800c754 <MX_USB_Device_Init+0x5c>)
 800c724:	4809      	ldr	r0, [pc, #36]	@ (800c74c <MX_USB_Device_Init+0x54>)
 800c726:	f7fe fe21 	bl	800b36c <USBD_CDC_RegisterInterface>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d001      	beq.n	800c734 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c730:	f7f6 fe44 	bl	80033bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c734:	4805      	ldr	r0, [pc, #20]	@ (800c74c <MX_USB_Device_Init+0x54>)
 800c736:	f7fe ff16 	bl	800b566 <USBD_Start>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c740:	f7f6 fe3c 	bl	80033bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c744:	bf00      	nop
 800c746:	bd80      	pop	{r7, pc}
 800c748:	20000144 	.word	0x20000144
 800c74c:	2000376c 	.word	0x2000376c
 800c750:	20000024 	.word	0x20000024
 800c754:	20000130 	.word	0x20000130

0800c758 <cdcIfInit>:
uint8_t CDC_SoF_ISR(struct _USBD_HandleTypeDef *pdev);



bool cdcIfInit(void)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	af00      	add	r7, sp, #0
  is_opened = false;
 800c75c:	4b0a      	ldr	r3, [pc, #40]	@ (800c788 <cdcIfInit+0x30>)
 800c75e:	2200      	movs	r2, #0
 800c760:	701a      	strb	r2, [r3, #0]

  qbufferCreate(&q_rx, q_rx_buf, 1024);
 800c762:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c766:	4909      	ldr	r1, [pc, #36]	@ (800c78c <cdcIfInit+0x34>)
 800c768:	4809      	ldr	r0, [pc, #36]	@ (800c790 <cdcIfInit+0x38>)
 800c76a:	f7f4 fca7 	bl	80010bc <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 1024);
 800c76e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c772:	4908      	ldr	r1, [pc, #32]	@ (800c794 <cdcIfInit+0x3c>)
 800c774:	4808      	ldr	r0, [pc, #32]	@ (800c798 <cdcIfInit+0x40>)
 800c776:	f7f4 fca1 	bl	80010bc <qbufferCreate>


  USBD_CDC.SOF = CDC_SoF_ISR;
 800c77a:	4b08      	ldr	r3, [pc, #32]	@ (800c79c <cdcIfInit+0x44>)
 800c77c:	4a08      	ldr	r2, [pc, #32]	@ (800c7a0 <cdcIfInit+0x48>)
 800c77e:	61da      	str	r2, [r3, #28]

  return true;
 800c780:	2301      	movs	r3, #1
}
 800c782:	4618      	mov	r0, r3
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	20005268 	.word	0x20005268
 800c78c:	20004a68 	.word	0x20004a68
 800c790:	20004a40 	.word	0x20004a40
 800c794:	20004e68 	.word	0x20004e68
 800c798:	20004a54 	.word	0x20004a54
 800c79c:	20000024 	.word	0x20000024
 800c7a0:	0800c90d 	.word	0x0800c90d

0800c7a4 <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 800c7a8:	4802      	ldr	r0, [pc, #8]	@ (800c7b4 <cdcIfAvailable+0x10>)
 800c7aa:	f7f4 fd59 	bl	8001260 <qbufferAvailable>
 800c7ae:	4603      	mov	r3, r0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	20004a40 	.word	0x20004a40

0800c7b8 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b082      	sub	sp, #8
 800c7bc:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 800c7c2:	1dfb      	adds	r3, r7, #7
 800c7c4:	2201      	movs	r2, #1
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	4803      	ldr	r0, [pc, #12]	@ (800c7d8 <cdcIfRead+0x20>)
 800c7ca:	f7f4 fcf1 	bl	80011b0 <qbufferRead>

  return ret;
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	20004a40 	.word	0x20004a40

0800c7dc <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 800c7dc:	b590      	push	{r4, r7, lr}
 800c7de:	b087      	sub	sp, #28
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 800c7e6:	f000 f85f 	bl	800c8a8 <cdcIfIsConnected>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f083 0301 	eor.w	r3, r3, #1
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <cdcIfWrite+0x1e>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	e044      	b.n	800c884 <cdcIfWrite+0xa8>


  sent_len = 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	613b      	str	r3, [r7, #16]

  pre_time = millis();
 800c7fe:	f7f4 fc56 	bl	80010ae <millis>
 800c802:	60f8      	str	r0, [r7, #12]
  while(sent_len < length)
 800c804:	e035      	b.n	800c872 <cdcIfWrite+0x96>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 800c806:	4b21      	ldr	r3, [pc, #132]	@ (800c88c <cdcIfWrite+0xb0>)
 800c808:	689c      	ldr	r4, [r3, #8]
 800c80a:	4820      	ldr	r0, [pc, #128]	@ (800c88c <cdcIfWrite+0xb0>)
 800c80c:	f7f4 fd28 	bl	8001260 <qbufferAvailable>
 800c810:	4603      	mov	r3, r0
 800c812:	1ae3      	subs	r3, r4, r3
 800c814:	3b01      	subs	r3, #1
 800c816:	60bb      	str	r3, [r7, #8]
    tx_len = length - sent_len;
 800c818:	683a      	ldr	r2, [r7, #0]
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 800c820:	697a      	ldr	r2, [r7, #20]
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	429a      	cmp	r2, r3
 800c826:	d901      	bls.n	800c82c <cdcIfWrite+0x50>
    {
      tx_len = buf_len;
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00d      	beq.n	800c84e <cdcIfWrite+0x72>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 800c832:	697a      	ldr	r2, [r7, #20]
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	4815      	ldr	r0, [pc, #84]	@ (800c88c <cdcIfWrite+0xb0>)
 800c838:	f7f4 fc5e 	bl	80010f8 <qbufferWrite>
      p_data += tx_len;
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	4413      	add	r3, r2
 800c842:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 800c844:	693a      	ldr	r2, [r7, #16]
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	4413      	add	r3, r2
 800c84a:	613b      	str	r3, [r7, #16]
 800c84c:	e002      	b.n	800c854 <cdcIfWrite+0x78>
    }
    else
    {
      delay(1);
 800c84e:	2001      	movs	r0, #1
 800c850:	f7f4 fc22 	bl	8001098 <delay>
    }

    if (cdcIfIsConnected() != true)
 800c854:	f000 f828 	bl	800c8a8 <cdcIfIsConnected>
 800c858:	4603      	mov	r3, r0
 800c85a:	f083 0301 	eor.w	r3, r3, #1
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	2b00      	cmp	r3, #0
 800c862:	d10b      	bne.n	800c87c <cdcIfWrite+0xa0>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 800c864:	f7f4 fc23 	bl	80010ae <millis>
 800c868:	4602      	mov	r2, r0
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	1ad3      	subs	r3, r2, r3
 800c86e:	2b63      	cmp	r3, #99	@ 0x63
 800c870:	d806      	bhi.n	800c880 <cdcIfWrite+0xa4>
  while(sent_len < length)
 800c872:	693a      	ldr	r2, [r7, #16]
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	429a      	cmp	r2, r3
 800c878:	d3c5      	bcc.n	800c806 <cdcIfWrite+0x2a>
 800c87a:	e002      	b.n	800c882 <cdcIfWrite+0xa6>
      break;
 800c87c:	bf00      	nop
 800c87e:	e000      	b.n	800c882 <cdcIfWrite+0xa6>
    {
      break;
 800c880:	bf00      	nop
    }
  }

  return sent_len;
 800c882:	693b      	ldr	r3, [r7, #16]
}
 800c884:	4618      	mov	r0, r3
 800c886:	371c      	adds	r7, #28
 800c888:	46bd      	mov	sp, r7
 800c88a:	bd90      	pop	{r4, r7, pc}
 800c88c:	20004a54 	.word	0x20004a54

0800c890 <cdcIfGetBaud>:

uint32_t cdcIfGetBaud(void)
{
 800c890:	b480      	push	{r7}
 800c892:	af00      	add	r7, sp, #0
  return LineCoding.bitrate;
 800c894:	4b03      	ldr	r3, [pc, #12]	@ (800c8a4 <cdcIfGetBaud+0x14>)
 800c896:	681b      	ldr	r3, [r3, #0]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	20000128 	.word	0x20000128

0800c8a8 <cdcIfIsConnected>:

bool cdcIfIsConnected(void)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b083      	sub	sp, #12
 800c8ac:	af00      	add	r7, sp, #0
  bool ret = true;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	71fb      	strb	r3, [r7, #7]

  if (hUsbDeviceFS.pClassData == NULL)
 800c8b2:	4b14      	ldr	r3, [pc, #80]	@ (800c904 <cdcIfIsConnected+0x5c>)
 800c8b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <cdcIfIsConnected+0x18>
  {
    ret = false;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	71fb      	strb	r3, [r7, #7]
  }
  if (is_opened == false)
 800c8c0:	4b11      	ldr	r3, [pc, #68]	@ (800c908 <cdcIfIsConnected+0x60>)
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	f083 0301 	eor.w	r3, r3, #1
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <cdcIfIsConnected+0x2a>
  {
    ret = false;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	71fb      	strb	r3, [r7, #7]
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800c8d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c904 <cdcIfIsConnected+0x5c>)
 800c8d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8d8:	b2db      	uxtb	r3, r3
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	d001      	beq.n	800c8e2 <cdcIfIsConnected+0x3a>
  {
    ret = false;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	71fb      	strb	r3, [r7, #7]
  }
  if (hUsbDeviceFS.dev_config == 0)
 800c8e2:	4b08      	ldr	r3, [pc, #32]	@ (800c904 <cdcIfIsConnected+0x5c>)
 800c8e4:	685b      	ldr	r3, [r3, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d101      	bne.n	800c8ee <cdcIfIsConnected+0x46>
  {
    ret = false;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	71fb      	strb	r3, [r7, #7]
  }

  is_opened = ret;
 800c8ee:	4a06      	ldr	r2, [pc, #24]	@ (800c908 <cdcIfIsConnected+0x60>)
 800c8f0:	79fb      	ldrb	r3, [r7, #7]
 800c8f2:	7013      	strb	r3, [r2, #0]

  return ret;
 800c8f4:	79fb      	ldrb	r3, [r7, #7]
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	2000376c 	.word	0x2000376c
 800c908:	20005268 	.word	0x20005268

0800c90c <CDC_SoF_ISR>:
{
  return cdc_type;
}

uint8_t CDC_SoF_ISR(struct _USBD_HandleTypeDef *pdev)
{
 800c90c:	b590      	push	{r4, r7, lr}
 800c90e:	b087      	sub	sp, #28
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]

  //-- RX
  //
  if (is_rx_full)
 800c914:	4b23      	ldr	r3, [pc, #140]	@ (800c9a4 <CDC_SoF_ISR+0x98>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d015      	beq.n	800c948 <CDC_SoF_ISR+0x3c>
  {
    uint32_t buf_len;

    buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800c91c:	4b22      	ldr	r3, [pc, #136]	@ (800c9a8 <CDC_SoF_ISR+0x9c>)
 800c91e:	689c      	ldr	r4, [r3, #8]
 800c920:	4821      	ldr	r0, [pc, #132]	@ (800c9a8 <CDC_SoF_ISR+0x9c>)
 800c922:	f7f4 fc9d 	bl	8001260 <qbufferAvailable>
 800c926:	4603      	mov	r3, r0
 800c928:	1ae3      	subs	r3, r4, r3
 800c92a:	3b01      	subs	r3, #1
 800c92c:	613b      	str	r3, [r7, #16]

    if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2b3f      	cmp	r3, #63	@ 0x3f
 800c932:	d909      	bls.n	800c948 <CDC_SoF_ISR+0x3c>
    {
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 800c934:	491d      	ldr	r1, [pc, #116]	@ (800c9ac <CDC_SoF_ISR+0xa0>)
 800c936:	481e      	ldr	r0, [pc, #120]	@ (800c9b0 <CDC_SoF_ISR+0xa4>)
 800c938:	f7fe fd4b 	bl	800b3d2 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c93c:	481c      	ldr	r0, [pc, #112]	@ (800c9b0 <CDC_SoF_ISR+0xa4>)
 800c93e:	f7fe fd91 	bl	800b464 <USBD_CDC_ReceivePacket>
      is_rx_full = false;
 800c942:	4b18      	ldr	r3, [pc, #96]	@ (800c9a4 <CDC_SoF_ISR+0x98>)
 800c944:	2200      	movs	r2, #0
 800c946:	701a      	strb	r2, [r3, #0]


  //-- TX
  //
  uint32_t tx_len;
  tx_len = qbufferAvailable(&q_tx);
 800c948:	481a      	ldr	r0, [pc, #104]	@ (800c9b4 <CDC_SoF_ISR+0xa8>)
 800c94a:	f7f4 fc89 	bl	8001260 <qbufferAvailable>
 800c94e:	6178      	str	r0, [r7, #20]

  if (tx_len%CDC_DATA_FS_MAX_PACKET_SIZE == 0)
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c956:	2b00      	cmp	r3, #0
 800c958:	d105      	bne.n	800c966 <CDC_SoF_ISR+0x5a>
  {
    if (tx_len > 0)
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d002      	beq.n	800c966 <CDC_SoF_ISR+0x5a>
    {
      tx_len = tx_len - 1;
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	3b01      	subs	r3, #1
 800c964:	617b      	str	r3, [r7, #20]
    }
  }

  if (tx_len > 0)
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d015      	beq.n	800c998 <CDC_SoF_ISR+0x8c>
  {
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c96c:	4b10      	ldr	r3, [pc, #64]	@ (800c9b0 <CDC_SoF_ISR+0xa4>)
 800c96e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c972:	60fb      	str	r3, [r7, #12]
    if (hcdc->TxState == 0)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10c      	bne.n	800c998 <CDC_SoF_ISR+0x8c>
    {
      qbufferRead(&q_tx, UserTxBufferFS, tx_len);
 800c97e:	697a      	ldr	r2, [r7, #20]
 800c980:	490d      	ldr	r1, [pc, #52]	@ (800c9b8 <CDC_SoF_ISR+0xac>)
 800c982:	480c      	ldr	r0, [pc, #48]	@ (800c9b4 <CDC_SoF_ISR+0xa8>)
 800c984:	f7f4 fc14 	bl	80011b0 <qbufferRead>

      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, tx_len);
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	490b      	ldr	r1, [pc, #44]	@ (800c9b8 <CDC_SoF_ISR+0xac>)
 800c98c:	4808      	ldr	r0, [pc, #32]	@ (800c9b0 <CDC_SoF_ISR+0xa4>)
 800c98e:	f7fe fd02 	bl	800b396 <USBD_CDC_SetTxBuffer>
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c992:	4807      	ldr	r0, [pc, #28]	@ (800c9b0 <CDC_SoF_ISR+0xa4>)
 800c994:	f7fe fd36 	bl	800b404 <USBD_CDC_TransmitPacket>
    }
  }

  return 0;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	371c      	adds	r7, #28
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	bd90      	pop	{r4, r7, pc}
 800c9a2:	bf00      	nop
 800c9a4:	20005269 	.word	0x20005269
 800c9a8:	20004a40 	.word	0x20004a40
 800c9ac:	20003a3c 	.word	0x20003a3c
 800c9b0:	2000376c 	.word	0x2000376c
 800c9b4:	20004a54 	.word	0x20004a54
 800c9b8:	2000423c 	.word	0x2000423c

0800c9bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */

  cdcIfInit();
 800c9c0:	f7ff feca 	bl	800c758 <cdcIfInit>

  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	4907      	ldr	r1, [pc, #28]	@ (800c9e4 <CDC_Init_FS+0x28>)
 800c9c8:	4807      	ldr	r0, [pc, #28]	@ (800c9e8 <CDC_Init_FS+0x2c>)
 800c9ca:	f7fe fce4 	bl	800b396 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c9ce:	4907      	ldr	r1, [pc, #28]	@ (800c9ec <CDC_Init_FS+0x30>)
 800c9d0:	4805      	ldr	r0, [pc, #20]	@ (800c9e8 <CDC_Init_FS+0x2c>)
 800c9d2:	f7fe fcfe 	bl	800b3d2 <USBD_CDC_SetRxBuffer>

  is_opened = false;
 800c9d6:	4b06      	ldr	r3, [pc, #24]	@ (800c9f0 <CDC_Init_FS+0x34>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800c9dc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	2000423c 	.word	0x2000423c
 800c9e8:	2000376c 	.word	0x2000376c
 800c9ec:	20003a3c 	.word	0x20003a3c
 800c9f0:	20005268 	.word	0x20005268

0800c9f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */

  is_opened = false;
 800c9f8:	4b04      	ldr	r3, [pc, #16]	@ (800ca0c <CDC_DeInit_FS+0x18>)
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800c9fe:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	46bd      	mov	sp, r7
 800ca04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	20005268 	.word	0x20005268

0800ca10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ca10:	b480      	push	{r7}
 800ca12:	b085      	sub	sp, #20
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	4603      	mov	r3, r0
 800ca18:	6039      	str	r1, [r7, #0]
 800ca1a:	71fb      	strb	r3, [r7, #7]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */

  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	60fb      	str	r3, [r7, #12]
  uint32_t bitrate;


  switch(cmd)
 800ca24:	79fb      	ldrb	r3, [r7, #7]
 800ca26:	2b23      	cmp	r3, #35	@ 0x23
 800ca28:	f200 80c4 	bhi.w	800cbb4 <CDC_Control_FS+0x1a4>
 800ca2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca34 <CDC_Control_FS+0x24>)
 800ca2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca32:	bf00      	nop
 800ca34:	0800cbb5 	.word	0x0800cbb5
 800ca38:	0800cbb5 	.word	0x0800cbb5
 800ca3c:	0800cbb5 	.word	0x0800cbb5
 800ca40:	0800cbb5 	.word	0x0800cbb5
 800ca44:	0800cbb5 	.word	0x0800cbb5
 800ca48:	0800cbb5 	.word	0x0800cbb5
 800ca4c:	0800cbb5 	.word	0x0800cbb5
 800ca50:	0800cbb5 	.word	0x0800cbb5
 800ca54:	0800cbb5 	.word	0x0800cbb5
 800ca58:	0800cbb5 	.word	0x0800cbb5
 800ca5c:	0800cbb5 	.word	0x0800cbb5
 800ca60:	0800cbb5 	.word	0x0800cbb5
 800ca64:	0800cbb5 	.word	0x0800cbb5
 800ca68:	0800cbb5 	.word	0x0800cbb5
 800ca6c:	0800cbb5 	.word	0x0800cbb5
 800ca70:	0800cbb5 	.word	0x0800cbb5
 800ca74:	0800cbb5 	.word	0x0800cbb5
 800ca78:	0800cbb5 	.word	0x0800cbb5
 800ca7c:	0800cbb5 	.word	0x0800cbb5
 800ca80:	0800cbb5 	.word	0x0800cbb5
 800ca84:	0800cbb5 	.word	0x0800cbb5
 800ca88:	0800cbb5 	.word	0x0800cbb5
 800ca8c:	0800cbb5 	.word	0x0800cbb5
 800ca90:	0800cbb5 	.word	0x0800cbb5
 800ca94:	0800cbb5 	.word	0x0800cbb5
 800ca98:	0800cbb5 	.word	0x0800cbb5
 800ca9c:	0800cbb5 	.word	0x0800cbb5
 800caa0:	0800cbb5 	.word	0x0800cbb5
 800caa4:	0800cbb5 	.word	0x0800cbb5
 800caa8:	0800cbb5 	.word	0x0800cbb5
 800caac:	0800cbb5 	.word	0x0800cbb5
 800cab0:	0800cbb5 	.word	0x0800cbb5
 800cab4:	0800cac5 	.word	0x0800cac5
 800cab8:	0800cb41 	.word	0x0800cb41
 800cabc:	0800cb99 	.word	0x0800cb99
 800cac0:	0800cbb5 	.word	0x0800cbb5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      bitrate   = (uint32_t)(pbuf[0]);
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	60bb      	str	r3, [r7, #8]
      bitrate  |= (uint32_t)(pbuf[1]<<8);
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	3301      	adds	r3, #1
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	021b      	lsls	r3, r3, #8
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	60bb      	str	r3, [r7, #8]
      bitrate  |= (uint32_t)(pbuf[2]<<16);
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	3302      	adds	r3, #2
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	041b      	lsls	r3, r3, #16
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	4313      	orrs	r3, r2
 800cae4:	60bb      	str	r3, [r7, #8]
      bitrate  |= (uint32_t)(pbuf[3]<<24);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	3303      	adds	r3, #3
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	061b      	lsls	r3, r3, #24
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	4313      	orrs	r3, r2
 800caf2:	60bb      	str	r3, [r7, #8]
      LineCoding.format    = pbuf[4];
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	791a      	ldrb	r2, [r3, #4]
 800caf8:	4b32      	ldr	r3, [pc, #200]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cafa:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	795a      	ldrb	r2, [r3, #5]
 800cb00:	4b30      	ldr	r3, [pc, #192]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cb02:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	799a      	ldrb	r2, [r3, #6]
 800cb08:	4b2e      	ldr	r3, [pc, #184]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cb0a:	719a      	strb	r2, [r3, #6]
      LineCoding.bitrate   = bitrate - (bitrate%10);
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	4b2e      	ldr	r3, [pc, #184]	@ (800cbc8 <CDC_Control_FS+0x1b8>)
 800cb10:	fba3 2301 	umull	r2, r3, r3, r1
 800cb14:	08da      	lsrs	r2, r3, #3
 800cb16:	4613      	mov	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	4413      	add	r3, r2
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	1aca      	subs	r2, r1, r3
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	1a9b      	subs	r3, r3, r2
 800cb24:	4a27      	ldr	r2, [pc, #156]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cb26:	6013      	str	r3, [r2, #0]

      if( LineCoding.bitrate == 1200 )
 800cb28:	4b26      	ldr	r3, [pc, #152]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800cb30:	d102      	bne.n	800cb38 <CDC_Control_FS+0x128>
      {
        CDC_Reset_Status = 1;
 800cb32:	4b26      	ldr	r3, [pc, #152]	@ (800cbcc <CDC_Control_FS+0x1bc>)
 800cb34:	2201      	movs	r2, #1
 800cb36:	701a      	strb	r2, [r3, #0]
      }
      cdc_type = 0;
 800cb38:	4b25      	ldr	r3, [pc, #148]	@ (800cbd0 <CDC_Control_FS+0x1c0>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
    break;
 800cb3e:	e03a      	b.n	800cbb6 <CDC_Control_FS+0x1a6>

    case CDC_GET_LINE_CODING:
      bitrate = LineCoding.bitrate | cdc_type;
 800cb40:	4b20      	ldr	r3, [pc, #128]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a22      	ldr	r2, [pc, #136]	@ (800cbd0 <CDC_Control_FS+0x1c0>)
 800cb46:	7812      	ldrb	r2, [r2, #0]
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	60bb      	str	r3, [r7, #8]

      pbuf[0] = (uint8_t)(bitrate);
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	b2da      	uxtb	r2, r3
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(bitrate>>8);
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	0a1a      	lsrs	r2, r3, #8
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	b2d2      	uxtb	r2, r2
 800cb5e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(bitrate>>16);
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	0c1a      	lsrs	r2, r3, #16
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	3302      	adds	r3, #2
 800cb68:	b2d2      	uxtb	r2, r2
 800cb6a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(bitrate>>24);
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	0e1a      	lsrs	r2, r3, #24
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	3303      	adds	r3, #3
 800cb74:	b2d2      	uxtb	r2, r2
 800cb76:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	3304      	adds	r3, #4
 800cb7c:	4a11      	ldr	r2, [pc, #68]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cb7e:	7912      	ldrb	r2, [r2, #4]
 800cb80:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	3305      	adds	r3, #5
 800cb86:	4a0f      	ldr	r2, [pc, #60]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cb88:	7952      	ldrb	r2, [r2, #5]
 800cb8a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	3306      	adds	r3, #6
 800cb90:	4a0c      	ldr	r2, [pc, #48]	@ (800cbc4 <CDC_Control_FS+0x1b4>)
 800cb92:	7992      	ldrb	r2, [r2, #6]
 800cb94:	701a      	strb	r2, [r3, #0]
    break;
 800cb96:	e00e      	b.n	800cbb6 <CDC_Control_FS+0x1a6>

    case CDC_SET_CONTROL_LINE_STATE:
      // TODO : ?��중에 ?���?? ?��미널?��?�� 문제 ?��?���?? ?��?�� ?��?��
      //is_opened = req->wValue&0x01;  // 0 bit:DTR, 1 bit:RTS
      if (req->wValue & 0x01)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	885b      	ldrh	r3, [r3, #2]
 800cb9c:	f003 0301 	and.w	r3, r3, #1
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d003      	beq.n	800cbac <CDC_Control_FS+0x19c>
        is_opened = true;
 800cba4:	4b0b      	ldr	r3, [pc, #44]	@ (800cbd4 <CDC_Control_FS+0x1c4>)
 800cba6:	2201      	movs	r2, #1
 800cba8:	701a      	strb	r2, [r3, #0]
      else
        is_opened = false;
    break;
 800cbaa:	e004      	b.n	800cbb6 <CDC_Control_FS+0x1a6>
        is_opened = false;
 800cbac:	4b09      	ldr	r3, [pc, #36]	@ (800cbd4 <CDC_Control_FS+0x1c4>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
    break;
 800cbb2:	e000      	b.n	800cbb6 <CDC_Control_FS+0x1a6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cbb4:	bf00      	nop
  }

  return (USBD_OK);
 800cbb6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	20000128 	.word	0x20000128
 800cbc8:	cccccccd 	.word	0xcccccccd
 800cbcc:	20004a3c 	.word	0x20004a3c
 800cbd0:	2000526a 	.word	0x2000526a
 800cbd4:	20005268 	.word	0x20005268

0800cbd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cbd8:	b590      	push	{r4, r7, lr}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
//  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
//  USBD_CDC_ReceivePacket(&hUsbDeviceFS);


  qbufferWrite(&q_rx, Buf, *Len);
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	6879      	ldr	r1, [r7, #4]
 800cbea:	4813      	ldr	r0, [pc, #76]	@ (800cc38 <CDC_Receive_FS+0x60>)
 800cbec:	f7f4 fa84 	bl	80010f8 <qbufferWrite>

  if( CDC_Reset_Status == 1 )
 800cbf0:	4b12      	ldr	r3, [pc, #72]	@ (800cc3c <CDC_Receive_FS+0x64>)
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d102      	bne.n	800cbfe <CDC_Receive_FS+0x26>
  {
    CDC_Reset_Status = 0;
 800cbf8:	4b10      	ldr	r3, [pc, #64]	@ (800cc3c <CDC_Receive_FS+0x64>)
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	701a      	strb	r2, [r3, #0]
  }

  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800cbfe:	4b0e      	ldr	r3, [pc, #56]	@ (800cc38 <CDC_Receive_FS+0x60>)
 800cc00:	689c      	ldr	r4, [r3, #8]
 800cc02:	480d      	ldr	r0, [pc, #52]	@ (800cc38 <CDC_Receive_FS+0x60>)
 800cc04:	f7f4 fb2c 	bl	8001260 <qbufferAvailable>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	1ae3      	subs	r3, r4, r3
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b3f      	cmp	r3, #63	@ 0x3f
 800cc14:	d907      	bls.n	800cc26 <CDC_Receive_FS+0x4e>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cc16:	6879      	ldr	r1, [r7, #4]
 800cc18:	4809      	ldr	r0, [pc, #36]	@ (800cc40 <CDC_Receive_FS+0x68>)
 800cc1a:	f7fe fbda 	bl	800b3d2 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cc1e:	4808      	ldr	r0, [pc, #32]	@ (800cc40 <CDC_Receive_FS+0x68>)
 800cc20:	f7fe fc20 	bl	800b464 <USBD_CDC_ReceivePacket>
 800cc24:	e002      	b.n	800cc2c <CDC_Receive_FS+0x54>
  }
  else
  {
    is_rx_full = true;
 800cc26:	4b07      	ldr	r3, [pc, #28]	@ (800cc44 <CDC_Receive_FS+0x6c>)
 800cc28:	2201      	movs	r2, #1
 800cc2a:	701a      	strb	r2, [r3, #0]
  }


  return (USBD_OK);
 800cc2c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3714      	adds	r7, #20
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd90      	pop	{r4, r7, pc}
 800cc36:	bf00      	nop
 800cc38:	20004a40 	.word	0x20004a40
 800cc3c:	20004a3c 	.word	0x20004a3c
 800cc40:	2000376c 	.word	0x2000376c
 800cc44:	20005269 	.word	0x20005269

0800cc48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b087      	sub	sp, #28
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	4613      	mov	r3, r2
 800cc54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cc56:	2300      	movs	r3, #0
 800cc58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cc5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	371c      	adds	r7, #28
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
	...

0800cc6c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	b083      	sub	sp, #12
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	6039      	str	r1, [r7, #0]
 800cc76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	2212      	movs	r2, #18
 800cc7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cc7e:	4b03      	ldr	r3, [pc, #12]	@ (800cc8c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	20000164 	.word	0x20000164

0800cc90 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	4603      	mov	r3, r0
 800cc98:	6039      	str	r1, [r7, #0]
 800cc9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	2204      	movs	r2, #4
 800cca0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cca2:	4b03      	ldr	r3, [pc, #12]	@ (800ccb0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	370c      	adds	r7, #12
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr
 800ccb0:	20000178 	.word	0x20000178

0800ccb4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	4603      	mov	r3, r0
 800ccbc:	6039      	str	r1, [r7, #0]
 800ccbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ccc0:	79fb      	ldrb	r3, [r7, #7]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d105      	bne.n	800ccd2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	4907      	ldr	r1, [pc, #28]	@ (800cce8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ccca:	4808      	ldr	r0, [pc, #32]	@ (800ccec <USBD_CDC_ProductStrDescriptor+0x38>)
 800cccc:	f7ff fc33 	bl	800c536 <USBD_GetString>
 800ccd0:	e004      	b.n	800ccdc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ccd2:	683a      	ldr	r2, [r7, #0]
 800ccd4:	4904      	ldr	r1, [pc, #16]	@ (800cce8 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ccd6:	4805      	ldr	r0, [pc, #20]	@ (800ccec <USBD_CDC_ProductStrDescriptor+0x38>)
 800ccd8:	f7ff fc2d 	bl	800c536 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ccdc:	4b02      	ldr	r3, [pc, #8]	@ (800cce8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}
 800cce6:	bf00      	nop
 800cce8:	2000526c 	.word	0x2000526c
 800ccec:	08010a24 	.word	0x08010a24

0800ccf0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	6039      	str	r1, [r7, #0]
 800ccfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	4904      	ldr	r1, [pc, #16]	@ (800cd10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cd00:	4804      	ldr	r0, [pc, #16]	@ (800cd14 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800cd02:	f7ff fc18 	bl	800c536 <USBD_GetString>
  return USBD_StrDesc;
 800cd06:	4b02      	ldr	r3, [pc, #8]	@ (800cd10 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	2000526c 	.word	0x2000526c
 800cd14:	08010a3c 	.word	0x08010a3c

0800cd18 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b082      	sub	sp, #8
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	6039      	str	r1, [r7, #0]
 800cd22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	221a      	movs	r2, #26
 800cd28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cd2a:	f000 f843 	bl	800cdb4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800cd2e:	4b02      	ldr	r3, [pc, #8]	@ (800cd38 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3708      	adds	r7, #8
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	2000017c 	.word	0x2000017c

0800cd3c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b082      	sub	sp, #8
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	4603      	mov	r3, r0
 800cd44:	6039      	str	r1, [r7, #0]
 800cd46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd4e:	683a      	ldr	r2, [r7, #0]
 800cd50:	4907      	ldr	r1, [pc, #28]	@ (800cd70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd52:	4808      	ldr	r0, [pc, #32]	@ (800cd74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd54:	f7ff fbef 	bl	800c536 <USBD_GetString>
 800cd58:	e004      	b.n	800cd64 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cd5a:	683a      	ldr	r2, [r7, #0]
 800cd5c:	4904      	ldr	r1, [pc, #16]	@ (800cd70 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cd5e:	4805      	ldr	r0, [pc, #20]	@ (800cd74 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cd60:	f7ff fbe9 	bl	800c536 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd64:	4b02      	ldr	r3, [pc, #8]	@ (800cd70 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
 800cd6e:	bf00      	nop
 800cd70:	2000526c 	.word	0x2000526c
 800cd74:	08010a50 	.word	0x08010a50

0800cd78 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	4603      	mov	r3, r0
 800cd80:	6039      	str	r1, [r7, #0]
 800cd82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd84:	79fb      	ldrb	r3, [r7, #7]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d105      	bne.n	800cd96 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	4907      	ldr	r1, [pc, #28]	@ (800cdac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd8e:	4808      	ldr	r0, [pc, #32]	@ (800cdb0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd90:	f7ff fbd1 	bl	800c536 <USBD_GetString>
 800cd94:	e004      	b.n	800cda0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800cd96:	683a      	ldr	r2, [r7, #0]
 800cd98:	4904      	ldr	r1, [pc, #16]	@ (800cdac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800cd9a:	4805      	ldr	r0, [pc, #20]	@ (800cdb0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800cd9c:	f7ff fbcb 	bl	800c536 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cda0:	4b02      	ldr	r3, [pc, #8]	@ (800cdac <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3708      	adds	r7, #8
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}
 800cdaa:	bf00      	nop
 800cdac:	2000526c 	.word	0x2000526c
 800cdb0:	08010a5c 	.word	0x08010a5c

0800cdb4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cdba:	4b0f      	ldr	r3, [pc, #60]	@ (800cdf8 <Get_SerialNum+0x44>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cdc0:	4b0e      	ldr	r3, [pc, #56]	@ (800cdfc <Get_SerialNum+0x48>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cdc6:	4b0e      	ldr	r3, [pc, #56]	@ (800ce00 <Get_SerialNum+0x4c>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d009      	beq.n	800cdee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cdda:	2208      	movs	r2, #8
 800cddc:	4909      	ldr	r1, [pc, #36]	@ (800ce04 <Get_SerialNum+0x50>)
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f000 f814 	bl	800ce0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cde4:	2204      	movs	r2, #4
 800cde6:	4908      	ldr	r1, [pc, #32]	@ (800ce08 <Get_SerialNum+0x54>)
 800cde8:	68b8      	ldr	r0, [r7, #8]
 800cdea:	f000 f80f 	bl	800ce0c <IntToUnicode>
  }
}
 800cdee:	bf00      	nop
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	1fff7590 	.word	0x1fff7590
 800cdfc:	1fff7594 	.word	0x1fff7594
 800ce00:	1fff7598 	.word	0x1fff7598
 800ce04:	2000017e 	.word	0x2000017e
 800ce08:	2000018e 	.word	0x2000018e

0800ce0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b087      	sub	sp, #28
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	60f8      	str	r0, [r7, #12]
 800ce14:	60b9      	str	r1, [r7, #8]
 800ce16:	4613      	mov	r3, r2
 800ce18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce1e:	2300      	movs	r3, #0
 800ce20:	75fb      	strb	r3, [r7, #23]
 800ce22:	e027      	b.n	800ce74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	0f1b      	lsrs	r3, r3, #28
 800ce28:	2b09      	cmp	r3, #9
 800ce2a:	d80b      	bhi.n	800ce44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	0f1b      	lsrs	r3, r3, #28
 800ce30:	b2da      	uxtb	r2, r3
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	005b      	lsls	r3, r3, #1
 800ce36:	4619      	mov	r1, r3
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	440b      	add	r3, r1
 800ce3c:	3230      	adds	r2, #48	@ 0x30
 800ce3e:	b2d2      	uxtb	r2, r2
 800ce40:	701a      	strb	r2, [r3, #0]
 800ce42:	e00a      	b.n	800ce5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	0f1b      	lsrs	r3, r3, #28
 800ce48:	b2da      	uxtb	r2, r3
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
 800ce4c:	005b      	lsls	r3, r3, #1
 800ce4e:	4619      	mov	r1, r3
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	440b      	add	r3, r1
 800ce54:	3237      	adds	r2, #55	@ 0x37
 800ce56:	b2d2      	uxtb	r2, r2
 800ce58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	011b      	lsls	r3, r3, #4
 800ce5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ce60:	7dfb      	ldrb	r3, [r7, #23]
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	3301      	adds	r3, #1
 800ce66:	68ba      	ldr	r2, [r7, #8]
 800ce68:	4413      	add	r3, r2
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ce6e:	7dfb      	ldrb	r3, [r7, #23]
 800ce70:	3301      	adds	r3, #1
 800ce72:	75fb      	strb	r3, [r7, #23]
 800ce74:	7dfa      	ldrb	r2, [r7, #23]
 800ce76:	79fb      	ldrb	r3, [r7, #7]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d3d3      	bcc.n	800ce24 <IntToUnicode+0x18>
  }
}
 800ce7c:	bf00      	nop
 800ce7e:	bf00      	nop
 800ce80:	371c      	adds	r7, #28
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
	...

0800ce8c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b094      	sub	sp, #80	@ 0x50
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ce94:	f107 030c 	add.w	r3, r7, #12
 800ce98:	2244      	movs	r2, #68	@ 0x44
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f001 fb49 	bl	800e534 <memset>
  if(pcdHandle->Instance==USB)
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4a15      	ldr	r2, [pc, #84]	@ (800cefc <HAL_PCD_MspInit+0x70>)
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d123      	bne.n	800cef4 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ceac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ceb0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800ceb2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ceb6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ceb8:	f107 030c 	add.w	r3, r7, #12
 800cebc:	4618      	mov	r0, r3
 800cebe:	f7fa f835 	bl	8006f2c <HAL_RCCEx_PeriphCLKConfig>
 800cec2:	4603      	mov	r3, r0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d001      	beq.n	800cecc <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800cec8:	f7f6 fa78 	bl	80033bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cecc:	4b0c      	ldr	r3, [pc, #48]	@ (800cf00 <HAL_PCD_MspInit+0x74>)
 800cece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ced0:	4a0b      	ldr	r2, [pc, #44]	@ (800cf00 <HAL_PCD_MspInit+0x74>)
 800ced2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ced6:	6593      	str	r3, [r2, #88]	@ 0x58
 800ced8:	4b09      	ldr	r3, [pc, #36]	@ (800cf00 <HAL_PCD_MspInit+0x74>)
 800ceda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cedc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800cee0:	60bb      	str	r3, [r7, #8]
 800cee2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cee4:	2200      	movs	r2, #0
 800cee6:	2100      	movs	r1, #0
 800cee8:	2014      	movs	r0, #20
 800ceea:	f7f6 ff36 	bl	8003d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ceee:	2014      	movs	r0, #20
 800cef0:	f7f6 ff4d 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cef4:	bf00      	nop
 800cef6:	3750      	adds	r7, #80	@ 0x50
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}
 800cefc:	40005c00 	.word	0x40005c00
 800cf00:	40021000 	.word	0x40021000

0800cf04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b082      	sub	sp, #8
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4610      	mov	r0, r2
 800cf1c:	f7fe fb6e 	bl	800b5fc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cf20:	bf00      	nop
 800cf22:	3708      	adds	r7, #8
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd80      	pop	{r7, pc}

0800cf28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cf3a:	78fa      	ldrb	r2, [r7, #3]
 800cf3c:	6879      	ldr	r1, [r7, #4]
 800cf3e:	4613      	mov	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	440b      	add	r3, r1
 800cf48:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	78fb      	ldrb	r3, [r7, #3]
 800cf50:	4619      	mov	r1, r3
 800cf52:	f7fe fba8 	bl	800b6a6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cf56:	bf00      	nop
 800cf58:	3708      	adds	r7, #8
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}

0800cf5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf5e:	b580      	push	{r7, lr}
 800cf60:	b082      	sub	sp, #8
 800cf62:	af00      	add	r7, sp, #0
 800cf64:	6078      	str	r0, [r7, #4]
 800cf66:	460b      	mov	r3, r1
 800cf68:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cf70:	78fa      	ldrb	r2, [r7, #3]
 800cf72:	6879      	ldr	r1, [r7, #4]
 800cf74:	4613      	mov	r3, r2
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	4413      	add	r3, r2
 800cf7a:	00db      	lsls	r3, r3, #3
 800cf7c:	440b      	add	r3, r1
 800cf7e:	3324      	adds	r3, #36	@ 0x24
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	78fb      	ldrb	r3, [r7, #3]
 800cf84:	4619      	mov	r1, r3
 800cf86:	f7fe fbf1 	bl	800b76c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cf8a:	bf00      	nop
 800cf8c:	3708      	adds	r7, #8
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b082      	sub	sp, #8
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fe fd05 	bl	800b9b0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cfa6:	bf00      	nop
 800cfa8:	3708      	adds	r7, #8
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}

0800cfae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfae:	b580      	push	{r7, lr}
 800cfb0:	b084      	sub	sp, #16
 800cfb2:	af00      	add	r7, sp, #0
 800cfb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	795b      	ldrb	r3, [r3, #5]
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d001      	beq.n	800cfc6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cfc2:	f7f6 f9fb 	bl	80033bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfcc:	7bfa      	ldrb	r2, [r7, #15]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fe fcaf 	bl	800b934 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fe fc5b 	bl	800b898 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cfe2:	bf00      	nop
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
	...

0800cfec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fe fcaa 	bl	800b954 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	7a5b      	ldrb	r3, [r3, #9]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d005      	beq.n	800d014 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d008:	4b04      	ldr	r3, [pc, #16]	@ (800d01c <HAL_PCD_SuspendCallback+0x30>)
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	4a03      	ldr	r2, [pc, #12]	@ (800d01c <HAL_PCD_SuspendCallback+0x30>)
 800d00e:	f043 0306 	orr.w	r3, r3, #6
 800d012:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	e000ed00 	.word	0xe000ed00

0800d020 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	7a5b      	ldrb	r3, [r3, #9]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d007      	beq.n	800d040 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d030:	4b08      	ldr	r3, [pc, #32]	@ (800d054 <HAL_PCD_ResumeCallback+0x34>)
 800d032:	691b      	ldr	r3, [r3, #16]
 800d034:	4a07      	ldr	r2, [pc, #28]	@ (800d054 <HAL_PCD_ResumeCallback+0x34>)
 800d036:	f023 0306 	bic.w	r3, r3, #6
 800d03a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d03c:	f000 f9f8 	bl	800d430 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d046:	4618      	mov	r0, r3
 800d048:	f7fe fc9a 	bl	800b980 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d04c:	bf00      	nop
 800d04e:	3708      	adds	r7, #8
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	e000ed00 	.word	0xe000ed00

0800d058 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d060:	4a2b      	ldr	r2, [pc, #172]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4a29      	ldr	r2, [pc, #164]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d06c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d070:	4b27      	ldr	r3, [pc, #156]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d072:	4a28      	ldr	r2, [pc, #160]	@ (800d114 <USBD_LL_Init+0xbc>)
 800d074:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d076:	4b26      	ldr	r3, [pc, #152]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d078:	2208      	movs	r2, #8
 800d07a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d07c:	4b24      	ldr	r3, [pc, #144]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d07e:	2202      	movs	r2, #2
 800d080:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d082:	4b23      	ldr	r3, [pc, #140]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d084:	2202      	movs	r2, #2
 800d086:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d088:	4b21      	ldr	r3, [pc, #132]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d08a:	2200      	movs	r2, #0
 800d08c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d08e:	4b20      	ldr	r3, [pc, #128]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d090:	2200      	movs	r2, #0
 800d092:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d094:	4b1e      	ldr	r3, [pc, #120]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d096:	2200      	movs	r2, #0
 800d098:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d09a:	4b1d      	ldr	r3, [pc, #116]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d09c:	2200      	movs	r2, #0
 800d09e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d0a0:	481b      	ldr	r0, [pc, #108]	@ (800d110 <USBD_LL_Init+0xb8>)
 800d0a2:	f7f7 fc2d 	bl	8004900 <HAL_PCD_Init>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d001      	beq.n	800d0b0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d0ac:	f7f6 f986 	bl	80033bc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0b6:	2318      	movs	r3, #24
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	2100      	movs	r1, #0
 800d0bc:	f7f9 f8e6 	bl	800628c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0c6:	2358      	movs	r3, #88	@ 0x58
 800d0c8:	2200      	movs	r2, #0
 800d0ca:	2180      	movs	r1, #128	@ 0x80
 800d0cc:	f7f9 f8de 	bl	800628c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0d6:	23c0      	movs	r3, #192	@ 0xc0
 800d0d8:	2200      	movs	r2, #0
 800d0da:	2181      	movs	r1, #129	@ 0x81
 800d0dc:	f7f9 f8d6 	bl	800628c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0e6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	2101      	movs	r1, #1
 800d0ee:	f7f9 f8cd 	bl	800628c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d0f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2182      	movs	r1, #130	@ 0x82
 800d100:	f7f9 f8c4 	bl	800628c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3708      	adds	r7, #8
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	2000546c 	.word	0x2000546c
 800d114:	40005c00 	.word	0x40005c00

0800d118 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d120:	2300      	movs	r3, #0
 800d122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d12e:	4618      	mov	r0, r3
 800d130:	f7f7 fcb4 	bl	8004a9c <HAL_PCD_Start>
 800d134:	4603      	mov	r3, r0
 800d136:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d138:	7bfb      	ldrb	r3, [r7, #15]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f000 f97e 	bl	800d43c <USBD_Get_USB_Status>
 800d140:	4603      	mov	r3, r0
 800d142:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d144:	7bbb      	ldrb	r3, [r7, #14]
}
 800d146:	4618      	mov	r0, r3
 800d148:	3710      	adds	r7, #16
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}

0800d14e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d14e:	b580      	push	{r7, lr}
 800d150:	b084      	sub	sp, #16
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	4608      	mov	r0, r1
 800d158:	4611      	mov	r1, r2
 800d15a:	461a      	mov	r2, r3
 800d15c:	4603      	mov	r3, r0
 800d15e:	70fb      	strb	r3, [r7, #3]
 800d160:	460b      	mov	r3, r1
 800d162:	70bb      	strb	r3, [r7, #2]
 800d164:	4613      	mov	r3, r2
 800d166:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d168:	2300      	movs	r3, #0
 800d16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d16c:	2300      	movs	r3, #0
 800d16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d176:	78bb      	ldrb	r3, [r7, #2]
 800d178:	883a      	ldrh	r2, [r7, #0]
 800d17a:	78f9      	ldrb	r1, [r7, #3]
 800d17c:	f7f7 fdfb 	bl	8004d76 <HAL_PCD_EP_Open>
 800d180:	4603      	mov	r3, r0
 800d182:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d184:	7bfb      	ldrb	r3, [r7, #15]
 800d186:	4618      	mov	r0, r3
 800d188:	f000 f958 	bl	800d43c <USBD_Get_USB_Status>
 800d18c:	4603      	mov	r3, r0
 800d18e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d190:	7bbb      	ldrb	r3, [r7, #14]
}
 800d192:	4618      	mov	r0, r3
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}

0800d19a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1b4:	78fa      	ldrb	r2, [r7, #3]
 800d1b6:	4611      	mov	r1, r2
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7f7 fe39 	bl	8004e30 <HAL_PCD_EP_Close>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 f939 	bl	800d43c <USBD_Get_USB_Status>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
 800d1e0:	460b      	mov	r3, r1
 800d1e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d1f2:	78fa      	ldrb	r2, [r7, #3]
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7f7 fee2 	bl	8004fc0 <HAL_PCD_EP_SetStall>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d200:	7bfb      	ldrb	r3, [r7, #15]
 800d202:	4618      	mov	r0, r3
 800d204:	f000 f91a 	bl	800d43c <USBD_Get_USB_Status>
 800d208:	4603      	mov	r3, r0
 800d20a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d20c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
 800d21e:	460b      	mov	r3, r1
 800d220:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d230:	78fa      	ldrb	r2, [r7, #3]
 800d232:	4611      	mov	r1, r2
 800d234:	4618      	mov	r0, r3
 800d236:	f7f7 ff15 	bl	8005064 <HAL_PCD_EP_ClrStall>
 800d23a:	4603      	mov	r3, r0
 800d23c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f8fb 	bl	800d43c <USBD_Get_USB_Status>
 800d246:	4603      	mov	r3, r0
 800d248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d24a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d254:	b480      	push	{r7}
 800d256:	b085      	sub	sp, #20
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
 800d25c:	460b      	mov	r3, r1
 800d25e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d266:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d268:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	da0b      	bge.n	800d288 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d270:	78fb      	ldrb	r3, [r7, #3]
 800d272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d276:	68f9      	ldr	r1, [r7, #12]
 800d278:	4613      	mov	r3, r2
 800d27a:	009b      	lsls	r3, r3, #2
 800d27c:	4413      	add	r3, r2
 800d27e:	00db      	lsls	r3, r3, #3
 800d280:	440b      	add	r3, r1
 800d282:	3312      	adds	r3, #18
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	e00b      	b.n	800d2a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d288:	78fb      	ldrb	r3, [r7, #3]
 800d28a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d28e:	68f9      	ldr	r1, [r7, #12]
 800d290:	4613      	mov	r3, r2
 800d292:	009b      	lsls	r3, r3, #2
 800d294:	4413      	add	r3, r2
 800d296:	00db      	lsls	r3, r3, #3
 800d298:	440b      	add	r3, r1
 800d29a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800d29e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	3714      	adds	r7, #20
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d2c6:	78fa      	ldrb	r2, [r7, #3]
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7f7 fd2f 	bl	8004d2e <HAL_PCD_SetAddress>
 800d2d0:	4603      	mov	r3, r0
 800d2d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2d4:	7bfb      	ldrb	r3, [r7, #15]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 f8b0 	bl	800d43c <USBD_Get_USB_Status>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d2ea:	b580      	push	{r7, lr}
 800d2ec:	b086      	sub	sp, #24
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	60f8      	str	r0, [r7, #12]
 800d2f2:	607a      	str	r2, [r7, #4]
 800d2f4:	603b      	str	r3, [r7, #0]
 800d2f6:	460b      	mov	r3, r1
 800d2f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d308:	7af9      	ldrb	r1, [r7, #11]
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	f7f7 fe20 	bl	8004f52 <HAL_PCD_EP_Transmit>
 800d312:	4603      	mov	r3, r0
 800d314:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d316:	7dfb      	ldrb	r3, [r7, #23]
 800d318:	4618      	mov	r0, r3
 800d31a:	f000 f88f 	bl	800d43c <USBD_Get_USB_Status>
 800d31e:	4603      	mov	r3, r0
 800d320:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d322:	7dbb      	ldrb	r3, [r7, #22]
}
 800d324:	4618      	mov	r0, r3
 800d326:	3718      	adds	r7, #24
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	603b      	str	r3, [r7, #0]
 800d338:	460b      	mov	r3, r1
 800d33a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d33c:	2300      	movs	r3, #0
 800d33e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800d34a:	7af9      	ldrb	r1, [r7, #11]
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	f7f7 fdb6 	bl	8004ec0 <HAL_PCD_EP_Receive>
 800d354:	4603      	mov	r3, r0
 800d356:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d358:	7dfb      	ldrb	r3, [r7, #23]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 f86e 	bl	800d43c <USBD_Get_USB_Status>
 800d360:	4603      	mov	r3, r0
 800d362:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d364:	7dbb      	ldrb	r3, [r7, #22]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3718      	adds	r7, #24
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b082      	sub	sp, #8
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	460b      	mov	r3, r1
 800d378:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800d380:	78fa      	ldrb	r2, [r7, #3]
 800d382:	4611      	mov	r1, r2
 800d384:	4618      	mov	r0, r3
 800d386:	f7f7 fdcc 	bl	8004f22 <HAL_PCD_EP_GetRxCount>
 800d38a:	4603      	mov	r3, r0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3708      	adds	r7, #8
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b082      	sub	sp, #8
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
 800d39c:	460b      	mov	r3, r1
 800d39e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d002      	beq.n	800d3ac <HAL_PCDEx_LPM_Callback+0x18>
 800d3a6:	2b01      	cmp	r3, #1
 800d3a8:	d013      	beq.n	800d3d2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d3aa:	e023      	b.n	800d3f4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	7a5b      	ldrb	r3, [r3, #9]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d007      	beq.n	800d3c4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d3b4:	f000 f83c 	bl	800d430 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3b8:	4b10      	ldr	r3, [pc, #64]	@ (800d3fc <HAL_PCDEx_LPM_Callback+0x68>)
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	4a0f      	ldr	r2, [pc, #60]	@ (800d3fc <HAL_PCDEx_LPM_Callback+0x68>)
 800d3be:	f023 0306 	bic.w	r3, r3, #6
 800d3c2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fe fad8 	bl	800b980 <USBD_LL_Resume>
    break;
 800d3d0:	e010      	b.n	800d3f4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fe fabb 	bl	800b954 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	7a5b      	ldrb	r3, [r3, #9]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d005      	beq.n	800d3f2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d3e6:	4b05      	ldr	r3, [pc, #20]	@ (800d3fc <HAL_PCDEx_LPM_Callback+0x68>)
 800d3e8:	691b      	ldr	r3, [r3, #16]
 800d3ea:	4a04      	ldr	r2, [pc, #16]	@ (800d3fc <HAL_PCDEx_LPM_Callback+0x68>)
 800d3ec:	f043 0306 	orr.w	r3, r3, #6
 800d3f0:	6113      	str	r3, [r2, #16]
    break;
 800d3f2:	bf00      	nop
}
 800d3f4:	bf00      	nop
 800d3f6:	3708      	adds	r7, #8
 800d3f8:	46bd      	mov	sp, r7
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	e000ed00 	.word	0xe000ed00

0800d400 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
 800d406:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d408:	4b03      	ldr	r3, [pc, #12]	@ (800d418 <USBD_static_malloc+0x18>)
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	370c      	adds	r7, #12
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	20005748 	.word	0x20005748

0800d41c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]

}
 800d424:	bf00      	nop
 800d426:	370c      	adds	r7, #12
 800d428:	46bd      	mov	sp, r7
 800d42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d434:	f7f5 fdea 	bl	800300c <SystemClock_Config>
}
 800d438:	bf00      	nop
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	4603      	mov	r3, r0
 800d444:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	2b03      	cmp	r3, #3
 800d44e:	d817      	bhi.n	800d480 <USBD_Get_USB_Status+0x44>
 800d450:	a201      	add	r2, pc, #4	@ (adr r2, 800d458 <USBD_Get_USB_Status+0x1c>)
 800d452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d456:	bf00      	nop
 800d458:	0800d469 	.word	0x0800d469
 800d45c:	0800d46f 	.word	0x0800d46f
 800d460:	0800d475 	.word	0x0800d475
 800d464:	0800d47b 	.word	0x0800d47b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
    break;
 800d46c:	e00b      	b.n	800d486 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d46e:	2303      	movs	r3, #3
 800d470:	73fb      	strb	r3, [r7, #15]
    break;
 800d472:	e008      	b.n	800d486 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d474:	2301      	movs	r3, #1
 800d476:	73fb      	strb	r3, [r7, #15]
    break;
 800d478:	e005      	b.n	800d486 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d47a:	2303      	movs	r3, #3
 800d47c:	73fb      	strb	r3, [r7, #15]
    break;
 800d47e:	e002      	b.n	800d486 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d480:	2303      	movs	r3, #3
 800d482:	73fb      	strb	r3, [r7, #15]
    break;
 800d484:	bf00      	nop
  }
  return usb_status;
 800d486:	7bfb      	ldrb	r3, [r7, #15]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3714      	adds	r7, #20
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr

0800d494 <sulp>:
 800d494:	b570      	push	{r4, r5, r6, lr}
 800d496:	4604      	mov	r4, r0
 800d498:	460d      	mov	r5, r1
 800d49a:	ec45 4b10 	vmov	d0, r4, r5
 800d49e:	4616      	mov	r6, r2
 800d4a0:	f002 f8e0 	bl	800f664 <__ulp>
 800d4a4:	ec51 0b10 	vmov	r0, r1, d0
 800d4a8:	b17e      	cbz	r6, 800d4ca <sulp+0x36>
 800d4aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d4ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	dd09      	ble.n	800d4ca <sulp+0x36>
 800d4b6:	051b      	lsls	r3, r3, #20
 800d4b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d4bc:	2400      	movs	r4, #0
 800d4be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d4c2:	4622      	mov	r2, r4
 800d4c4:	462b      	mov	r3, r5
 800d4c6:	f7f3 f8c7 	bl	8000658 <__aeabi_dmul>
 800d4ca:	ec41 0b10 	vmov	d0, r0, r1
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}

0800d4d0 <_strtod_l>:
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	b09f      	sub	sp, #124	@ 0x7c
 800d4d6:	460c      	mov	r4, r1
 800d4d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d4da:	2200      	movs	r2, #0
 800d4dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800d4de:	9005      	str	r0, [sp, #20]
 800d4e0:	f04f 0a00 	mov.w	sl, #0
 800d4e4:	f04f 0b00 	mov.w	fp, #0
 800d4e8:	460a      	mov	r2, r1
 800d4ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800d4ec:	7811      	ldrb	r1, [r2, #0]
 800d4ee:	292b      	cmp	r1, #43	@ 0x2b
 800d4f0:	d04a      	beq.n	800d588 <_strtod_l+0xb8>
 800d4f2:	d838      	bhi.n	800d566 <_strtod_l+0x96>
 800d4f4:	290d      	cmp	r1, #13
 800d4f6:	d832      	bhi.n	800d55e <_strtod_l+0x8e>
 800d4f8:	2908      	cmp	r1, #8
 800d4fa:	d832      	bhi.n	800d562 <_strtod_l+0x92>
 800d4fc:	2900      	cmp	r1, #0
 800d4fe:	d03b      	beq.n	800d578 <_strtod_l+0xa8>
 800d500:	2200      	movs	r2, #0
 800d502:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d504:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d506:	782a      	ldrb	r2, [r5, #0]
 800d508:	2a30      	cmp	r2, #48	@ 0x30
 800d50a:	f040 80b3 	bne.w	800d674 <_strtod_l+0x1a4>
 800d50e:	786a      	ldrb	r2, [r5, #1]
 800d510:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d514:	2a58      	cmp	r2, #88	@ 0x58
 800d516:	d16e      	bne.n	800d5f6 <_strtod_l+0x126>
 800d518:	9302      	str	r3, [sp, #8]
 800d51a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d51c:	9301      	str	r3, [sp, #4]
 800d51e:	ab1a      	add	r3, sp, #104	@ 0x68
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	4a8e      	ldr	r2, [pc, #568]	@ (800d75c <_strtod_l+0x28c>)
 800d524:	9805      	ldr	r0, [sp, #20]
 800d526:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d528:	a919      	add	r1, sp, #100	@ 0x64
 800d52a:	f001 f995 	bl	800e858 <__gethex>
 800d52e:	f010 060f 	ands.w	r6, r0, #15
 800d532:	4604      	mov	r4, r0
 800d534:	d005      	beq.n	800d542 <_strtod_l+0x72>
 800d536:	2e06      	cmp	r6, #6
 800d538:	d128      	bne.n	800d58c <_strtod_l+0xbc>
 800d53a:	3501      	adds	r5, #1
 800d53c:	2300      	movs	r3, #0
 800d53e:	9519      	str	r5, [sp, #100]	@ 0x64
 800d540:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d542:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d544:	2b00      	cmp	r3, #0
 800d546:	f040 858e 	bne.w	800e066 <_strtod_l+0xb96>
 800d54a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d54c:	b1cb      	cbz	r3, 800d582 <_strtod_l+0xb2>
 800d54e:	4652      	mov	r2, sl
 800d550:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d554:	ec43 2b10 	vmov	d0, r2, r3
 800d558:	b01f      	add	sp, #124	@ 0x7c
 800d55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d55e:	2920      	cmp	r1, #32
 800d560:	d1ce      	bne.n	800d500 <_strtod_l+0x30>
 800d562:	3201      	adds	r2, #1
 800d564:	e7c1      	b.n	800d4ea <_strtod_l+0x1a>
 800d566:	292d      	cmp	r1, #45	@ 0x2d
 800d568:	d1ca      	bne.n	800d500 <_strtod_l+0x30>
 800d56a:	2101      	movs	r1, #1
 800d56c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d56e:	1c51      	adds	r1, r2, #1
 800d570:	9119      	str	r1, [sp, #100]	@ 0x64
 800d572:	7852      	ldrb	r2, [r2, #1]
 800d574:	2a00      	cmp	r2, #0
 800d576:	d1c5      	bne.n	800d504 <_strtod_l+0x34>
 800d578:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d57a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	f040 8570 	bne.w	800e062 <_strtod_l+0xb92>
 800d582:	4652      	mov	r2, sl
 800d584:	465b      	mov	r3, fp
 800d586:	e7e5      	b.n	800d554 <_strtod_l+0x84>
 800d588:	2100      	movs	r1, #0
 800d58a:	e7ef      	b.n	800d56c <_strtod_l+0x9c>
 800d58c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d58e:	b13a      	cbz	r2, 800d5a0 <_strtod_l+0xd0>
 800d590:	2135      	movs	r1, #53	@ 0x35
 800d592:	a81c      	add	r0, sp, #112	@ 0x70
 800d594:	f002 f960 	bl	800f858 <__copybits>
 800d598:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d59a:	9805      	ldr	r0, [sp, #20]
 800d59c:	f001 fd2e 	bl	800effc <_Bfree>
 800d5a0:	3e01      	subs	r6, #1
 800d5a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d5a4:	2e04      	cmp	r6, #4
 800d5a6:	d806      	bhi.n	800d5b6 <_strtod_l+0xe6>
 800d5a8:	e8df f006 	tbb	[pc, r6]
 800d5ac:	201d0314 	.word	0x201d0314
 800d5b0:	14          	.byte	0x14
 800d5b1:	00          	.byte	0x00
 800d5b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d5b6:	05e1      	lsls	r1, r4, #23
 800d5b8:	bf48      	it	mi
 800d5ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d5be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d5c2:	0d1b      	lsrs	r3, r3, #20
 800d5c4:	051b      	lsls	r3, r3, #20
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1bb      	bne.n	800d542 <_strtod_l+0x72>
 800d5ca:	f001 f83f 	bl	800e64c <__errno>
 800d5ce:	2322      	movs	r3, #34	@ 0x22
 800d5d0:	6003      	str	r3, [r0, #0]
 800d5d2:	e7b6      	b.n	800d542 <_strtod_l+0x72>
 800d5d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d5d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d5dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d5e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d5e4:	e7e7      	b.n	800d5b6 <_strtod_l+0xe6>
 800d5e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d764 <_strtod_l+0x294>
 800d5ea:	e7e4      	b.n	800d5b6 <_strtod_l+0xe6>
 800d5ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d5f0:	f04f 3aff 	mov.w	sl, #4294967295
 800d5f4:	e7df      	b.n	800d5b6 <_strtod_l+0xe6>
 800d5f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5f8:	1c5a      	adds	r2, r3, #1
 800d5fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d5fc:	785b      	ldrb	r3, [r3, #1]
 800d5fe:	2b30      	cmp	r3, #48	@ 0x30
 800d600:	d0f9      	beq.n	800d5f6 <_strtod_l+0x126>
 800d602:	2b00      	cmp	r3, #0
 800d604:	d09d      	beq.n	800d542 <_strtod_l+0x72>
 800d606:	2301      	movs	r3, #1
 800d608:	9309      	str	r3, [sp, #36]	@ 0x24
 800d60a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d60c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d60e:	2300      	movs	r3, #0
 800d610:	9308      	str	r3, [sp, #32]
 800d612:	930a      	str	r3, [sp, #40]	@ 0x28
 800d614:	461f      	mov	r7, r3
 800d616:	220a      	movs	r2, #10
 800d618:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d61a:	7805      	ldrb	r5, [r0, #0]
 800d61c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d620:	b2d9      	uxtb	r1, r3
 800d622:	2909      	cmp	r1, #9
 800d624:	d928      	bls.n	800d678 <_strtod_l+0x1a8>
 800d626:	494e      	ldr	r1, [pc, #312]	@ (800d760 <_strtod_l+0x290>)
 800d628:	2201      	movs	r2, #1
 800d62a:	f000 ff8b 	bl	800e544 <strncmp>
 800d62e:	2800      	cmp	r0, #0
 800d630:	d032      	beq.n	800d698 <_strtod_l+0x1c8>
 800d632:	2000      	movs	r0, #0
 800d634:	462a      	mov	r2, r5
 800d636:	4681      	mov	r9, r0
 800d638:	463d      	mov	r5, r7
 800d63a:	4603      	mov	r3, r0
 800d63c:	2a65      	cmp	r2, #101	@ 0x65
 800d63e:	d001      	beq.n	800d644 <_strtod_l+0x174>
 800d640:	2a45      	cmp	r2, #69	@ 0x45
 800d642:	d114      	bne.n	800d66e <_strtod_l+0x19e>
 800d644:	b91d      	cbnz	r5, 800d64e <_strtod_l+0x17e>
 800d646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d648:	4302      	orrs	r2, r0
 800d64a:	d095      	beq.n	800d578 <_strtod_l+0xa8>
 800d64c:	2500      	movs	r5, #0
 800d64e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d650:	1c62      	adds	r2, r4, #1
 800d652:	9219      	str	r2, [sp, #100]	@ 0x64
 800d654:	7862      	ldrb	r2, [r4, #1]
 800d656:	2a2b      	cmp	r2, #43	@ 0x2b
 800d658:	d077      	beq.n	800d74a <_strtod_l+0x27a>
 800d65a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d65c:	d07b      	beq.n	800d756 <_strtod_l+0x286>
 800d65e:	f04f 0c00 	mov.w	ip, #0
 800d662:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d666:	2909      	cmp	r1, #9
 800d668:	f240 8082 	bls.w	800d770 <_strtod_l+0x2a0>
 800d66c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d66e:	f04f 0800 	mov.w	r8, #0
 800d672:	e0a2      	b.n	800d7ba <_strtod_l+0x2ea>
 800d674:	2300      	movs	r3, #0
 800d676:	e7c7      	b.n	800d608 <_strtod_l+0x138>
 800d678:	2f08      	cmp	r7, #8
 800d67a:	bfd5      	itete	le
 800d67c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d67e:	9908      	ldrgt	r1, [sp, #32]
 800d680:	fb02 3301 	mlale	r3, r2, r1, r3
 800d684:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d688:	f100 0001 	add.w	r0, r0, #1
 800d68c:	bfd4      	ite	le
 800d68e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d690:	9308      	strgt	r3, [sp, #32]
 800d692:	3701      	adds	r7, #1
 800d694:	9019      	str	r0, [sp, #100]	@ 0x64
 800d696:	e7bf      	b.n	800d618 <_strtod_l+0x148>
 800d698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d69a:	1c5a      	adds	r2, r3, #1
 800d69c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d69e:	785a      	ldrb	r2, [r3, #1]
 800d6a0:	b37f      	cbz	r7, 800d702 <_strtod_l+0x232>
 800d6a2:	4681      	mov	r9, r0
 800d6a4:	463d      	mov	r5, r7
 800d6a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d6aa:	2b09      	cmp	r3, #9
 800d6ac:	d912      	bls.n	800d6d4 <_strtod_l+0x204>
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e7c4      	b.n	800d63c <_strtod_l+0x16c>
 800d6b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6b4:	1c5a      	adds	r2, r3, #1
 800d6b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800d6b8:	785a      	ldrb	r2, [r3, #1]
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	2a30      	cmp	r2, #48	@ 0x30
 800d6be:	d0f8      	beq.n	800d6b2 <_strtod_l+0x1e2>
 800d6c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d6c4:	2b08      	cmp	r3, #8
 800d6c6:	f200 84d3 	bhi.w	800e070 <_strtod_l+0xba0>
 800d6ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d6ce:	4681      	mov	r9, r0
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	4605      	mov	r5, r0
 800d6d4:	3a30      	subs	r2, #48	@ 0x30
 800d6d6:	f100 0301 	add.w	r3, r0, #1
 800d6da:	d02a      	beq.n	800d732 <_strtod_l+0x262>
 800d6dc:	4499      	add	r9, r3
 800d6de:	eb00 0c05 	add.w	ip, r0, r5
 800d6e2:	462b      	mov	r3, r5
 800d6e4:	210a      	movs	r1, #10
 800d6e6:	4563      	cmp	r3, ip
 800d6e8:	d10d      	bne.n	800d706 <_strtod_l+0x236>
 800d6ea:	1c69      	adds	r1, r5, #1
 800d6ec:	4401      	add	r1, r0
 800d6ee:	4428      	add	r0, r5
 800d6f0:	2808      	cmp	r0, #8
 800d6f2:	dc16      	bgt.n	800d722 <_strtod_l+0x252>
 800d6f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d6f6:	230a      	movs	r3, #10
 800d6f8:	fb03 2300 	mla	r3, r3, r0, r2
 800d6fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6fe:	2300      	movs	r3, #0
 800d700:	e018      	b.n	800d734 <_strtod_l+0x264>
 800d702:	4638      	mov	r0, r7
 800d704:	e7da      	b.n	800d6bc <_strtod_l+0x1ec>
 800d706:	2b08      	cmp	r3, #8
 800d708:	f103 0301 	add.w	r3, r3, #1
 800d70c:	dc03      	bgt.n	800d716 <_strtod_l+0x246>
 800d70e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d710:	434e      	muls	r6, r1
 800d712:	960a      	str	r6, [sp, #40]	@ 0x28
 800d714:	e7e7      	b.n	800d6e6 <_strtod_l+0x216>
 800d716:	2b10      	cmp	r3, #16
 800d718:	bfde      	ittt	le
 800d71a:	9e08      	ldrle	r6, [sp, #32]
 800d71c:	434e      	mulle	r6, r1
 800d71e:	9608      	strle	r6, [sp, #32]
 800d720:	e7e1      	b.n	800d6e6 <_strtod_l+0x216>
 800d722:	280f      	cmp	r0, #15
 800d724:	dceb      	bgt.n	800d6fe <_strtod_l+0x22e>
 800d726:	9808      	ldr	r0, [sp, #32]
 800d728:	230a      	movs	r3, #10
 800d72a:	fb03 2300 	mla	r3, r3, r0, r2
 800d72e:	9308      	str	r3, [sp, #32]
 800d730:	e7e5      	b.n	800d6fe <_strtod_l+0x22e>
 800d732:	4629      	mov	r1, r5
 800d734:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d736:	1c50      	adds	r0, r2, #1
 800d738:	9019      	str	r0, [sp, #100]	@ 0x64
 800d73a:	7852      	ldrb	r2, [r2, #1]
 800d73c:	4618      	mov	r0, r3
 800d73e:	460d      	mov	r5, r1
 800d740:	e7b1      	b.n	800d6a6 <_strtod_l+0x1d6>
 800d742:	f04f 0900 	mov.w	r9, #0
 800d746:	2301      	movs	r3, #1
 800d748:	e77d      	b.n	800d646 <_strtod_l+0x176>
 800d74a:	f04f 0c00 	mov.w	ip, #0
 800d74e:	1ca2      	adds	r2, r4, #2
 800d750:	9219      	str	r2, [sp, #100]	@ 0x64
 800d752:	78a2      	ldrb	r2, [r4, #2]
 800d754:	e785      	b.n	800d662 <_strtod_l+0x192>
 800d756:	f04f 0c01 	mov.w	ip, #1
 800d75a:	e7f8      	b.n	800d74e <_strtod_l+0x27e>
 800d75c:	08010b48 	.word	0x08010b48
 800d760:	08010b24 	.word	0x08010b24
 800d764:	7ff00000 	.word	0x7ff00000
 800d768:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d76a:	1c51      	adds	r1, r2, #1
 800d76c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d76e:	7852      	ldrb	r2, [r2, #1]
 800d770:	2a30      	cmp	r2, #48	@ 0x30
 800d772:	d0f9      	beq.n	800d768 <_strtod_l+0x298>
 800d774:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d778:	2908      	cmp	r1, #8
 800d77a:	f63f af78 	bhi.w	800d66e <_strtod_l+0x19e>
 800d77e:	3a30      	subs	r2, #48	@ 0x30
 800d780:	920e      	str	r2, [sp, #56]	@ 0x38
 800d782:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d784:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d786:	f04f 080a 	mov.w	r8, #10
 800d78a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d78c:	1c56      	adds	r6, r2, #1
 800d78e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d790:	7852      	ldrb	r2, [r2, #1]
 800d792:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d796:	f1be 0f09 	cmp.w	lr, #9
 800d79a:	d939      	bls.n	800d810 <_strtod_l+0x340>
 800d79c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d79e:	1a76      	subs	r6, r6, r1
 800d7a0:	2e08      	cmp	r6, #8
 800d7a2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d7a6:	dc03      	bgt.n	800d7b0 <_strtod_l+0x2e0>
 800d7a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d7aa:	4588      	cmp	r8, r1
 800d7ac:	bfa8      	it	ge
 800d7ae:	4688      	movge	r8, r1
 800d7b0:	f1bc 0f00 	cmp.w	ip, #0
 800d7b4:	d001      	beq.n	800d7ba <_strtod_l+0x2ea>
 800d7b6:	f1c8 0800 	rsb	r8, r8, #0
 800d7ba:	2d00      	cmp	r5, #0
 800d7bc:	d14e      	bne.n	800d85c <_strtod_l+0x38c>
 800d7be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d7c0:	4308      	orrs	r0, r1
 800d7c2:	f47f aebe 	bne.w	800d542 <_strtod_l+0x72>
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	f47f aed6 	bne.w	800d578 <_strtod_l+0xa8>
 800d7cc:	2a69      	cmp	r2, #105	@ 0x69
 800d7ce:	d028      	beq.n	800d822 <_strtod_l+0x352>
 800d7d0:	dc25      	bgt.n	800d81e <_strtod_l+0x34e>
 800d7d2:	2a49      	cmp	r2, #73	@ 0x49
 800d7d4:	d025      	beq.n	800d822 <_strtod_l+0x352>
 800d7d6:	2a4e      	cmp	r2, #78	@ 0x4e
 800d7d8:	f47f aece 	bne.w	800d578 <_strtod_l+0xa8>
 800d7dc:	499b      	ldr	r1, [pc, #620]	@ (800da4c <_strtod_l+0x57c>)
 800d7de:	a819      	add	r0, sp, #100	@ 0x64
 800d7e0:	f001 fa5c 	bl	800ec9c <__match>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	f43f aec7 	beq.w	800d578 <_strtod_l+0xa8>
 800d7ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	2b28      	cmp	r3, #40	@ 0x28
 800d7f0:	d12e      	bne.n	800d850 <_strtod_l+0x380>
 800d7f2:	4997      	ldr	r1, [pc, #604]	@ (800da50 <_strtod_l+0x580>)
 800d7f4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d7f6:	a819      	add	r0, sp, #100	@ 0x64
 800d7f8:	f001 fa64 	bl	800ecc4 <__hexnan>
 800d7fc:	2805      	cmp	r0, #5
 800d7fe:	d127      	bne.n	800d850 <_strtod_l+0x380>
 800d800:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d802:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d806:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d80a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d80e:	e698      	b.n	800d542 <_strtod_l+0x72>
 800d810:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d812:	fb08 2101 	mla	r1, r8, r1, r2
 800d816:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d81a:	920e      	str	r2, [sp, #56]	@ 0x38
 800d81c:	e7b5      	b.n	800d78a <_strtod_l+0x2ba>
 800d81e:	2a6e      	cmp	r2, #110	@ 0x6e
 800d820:	e7da      	b.n	800d7d8 <_strtod_l+0x308>
 800d822:	498c      	ldr	r1, [pc, #560]	@ (800da54 <_strtod_l+0x584>)
 800d824:	a819      	add	r0, sp, #100	@ 0x64
 800d826:	f001 fa39 	bl	800ec9c <__match>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	f43f aea4 	beq.w	800d578 <_strtod_l+0xa8>
 800d830:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d832:	4989      	ldr	r1, [pc, #548]	@ (800da58 <_strtod_l+0x588>)
 800d834:	3b01      	subs	r3, #1
 800d836:	a819      	add	r0, sp, #100	@ 0x64
 800d838:	9319      	str	r3, [sp, #100]	@ 0x64
 800d83a:	f001 fa2f 	bl	800ec9c <__match>
 800d83e:	b910      	cbnz	r0, 800d846 <_strtod_l+0x376>
 800d840:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d842:	3301      	adds	r3, #1
 800d844:	9319      	str	r3, [sp, #100]	@ 0x64
 800d846:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800da68 <_strtod_l+0x598>
 800d84a:	f04f 0a00 	mov.w	sl, #0
 800d84e:	e678      	b.n	800d542 <_strtod_l+0x72>
 800d850:	4882      	ldr	r0, [pc, #520]	@ (800da5c <_strtod_l+0x58c>)
 800d852:	f000 ff41 	bl	800e6d8 <nan>
 800d856:	ec5b ab10 	vmov	sl, fp, d0
 800d85a:	e672      	b.n	800d542 <_strtod_l+0x72>
 800d85c:	eba8 0309 	sub.w	r3, r8, r9
 800d860:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d862:	9309      	str	r3, [sp, #36]	@ 0x24
 800d864:	2f00      	cmp	r7, #0
 800d866:	bf08      	it	eq
 800d868:	462f      	moveq	r7, r5
 800d86a:	2d10      	cmp	r5, #16
 800d86c:	462c      	mov	r4, r5
 800d86e:	bfa8      	it	ge
 800d870:	2410      	movge	r4, #16
 800d872:	f7f2 fe77 	bl	8000564 <__aeabi_ui2d>
 800d876:	2d09      	cmp	r5, #9
 800d878:	4682      	mov	sl, r0
 800d87a:	468b      	mov	fp, r1
 800d87c:	dc13      	bgt.n	800d8a6 <_strtod_l+0x3d6>
 800d87e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d880:	2b00      	cmp	r3, #0
 800d882:	f43f ae5e 	beq.w	800d542 <_strtod_l+0x72>
 800d886:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d888:	dd78      	ble.n	800d97c <_strtod_l+0x4ac>
 800d88a:	2b16      	cmp	r3, #22
 800d88c:	dc5f      	bgt.n	800d94e <_strtod_l+0x47e>
 800d88e:	4974      	ldr	r1, [pc, #464]	@ (800da60 <_strtod_l+0x590>)
 800d890:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d894:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d898:	4652      	mov	r2, sl
 800d89a:	465b      	mov	r3, fp
 800d89c:	f7f2 fedc 	bl	8000658 <__aeabi_dmul>
 800d8a0:	4682      	mov	sl, r0
 800d8a2:	468b      	mov	fp, r1
 800d8a4:	e64d      	b.n	800d542 <_strtod_l+0x72>
 800d8a6:	4b6e      	ldr	r3, [pc, #440]	@ (800da60 <_strtod_l+0x590>)
 800d8a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d8b0:	f7f2 fed2 	bl	8000658 <__aeabi_dmul>
 800d8b4:	4682      	mov	sl, r0
 800d8b6:	9808      	ldr	r0, [sp, #32]
 800d8b8:	468b      	mov	fp, r1
 800d8ba:	f7f2 fe53 	bl	8000564 <__aeabi_ui2d>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4650      	mov	r0, sl
 800d8c4:	4659      	mov	r1, fp
 800d8c6:	f7f2 fd11 	bl	80002ec <__adddf3>
 800d8ca:	2d0f      	cmp	r5, #15
 800d8cc:	4682      	mov	sl, r0
 800d8ce:	468b      	mov	fp, r1
 800d8d0:	ddd5      	ble.n	800d87e <_strtod_l+0x3ae>
 800d8d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8d4:	1b2c      	subs	r4, r5, r4
 800d8d6:	441c      	add	r4, r3
 800d8d8:	2c00      	cmp	r4, #0
 800d8da:	f340 8096 	ble.w	800da0a <_strtod_l+0x53a>
 800d8de:	f014 030f 	ands.w	r3, r4, #15
 800d8e2:	d00a      	beq.n	800d8fa <_strtod_l+0x42a>
 800d8e4:	495e      	ldr	r1, [pc, #376]	@ (800da60 <_strtod_l+0x590>)
 800d8e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d8ea:	4652      	mov	r2, sl
 800d8ec:	465b      	mov	r3, fp
 800d8ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d8f2:	f7f2 feb1 	bl	8000658 <__aeabi_dmul>
 800d8f6:	4682      	mov	sl, r0
 800d8f8:	468b      	mov	fp, r1
 800d8fa:	f034 040f 	bics.w	r4, r4, #15
 800d8fe:	d073      	beq.n	800d9e8 <_strtod_l+0x518>
 800d900:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d904:	dd48      	ble.n	800d998 <_strtod_l+0x4c8>
 800d906:	2400      	movs	r4, #0
 800d908:	46a0      	mov	r8, r4
 800d90a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d90c:	46a1      	mov	r9, r4
 800d90e:	9a05      	ldr	r2, [sp, #20]
 800d910:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800da68 <_strtod_l+0x598>
 800d914:	2322      	movs	r3, #34	@ 0x22
 800d916:	6013      	str	r3, [r2, #0]
 800d918:	f04f 0a00 	mov.w	sl, #0
 800d91c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f43f ae0f 	beq.w	800d542 <_strtod_l+0x72>
 800d924:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d926:	9805      	ldr	r0, [sp, #20]
 800d928:	f001 fb68 	bl	800effc <_Bfree>
 800d92c:	9805      	ldr	r0, [sp, #20]
 800d92e:	4649      	mov	r1, r9
 800d930:	f001 fb64 	bl	800effc <_Bfree>
 800d934:	9805      	ldr	r0, [sp, #20]
 800d936:	4641      	mov	r1, r8
 800d938:	f001 fb60 	bl	800effc <_Bfree>
 800d93c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d93e:	9805      	ldr	r0, [sp, #20]
 800d940:	f001 fb5c 	bl	800effc <_Bfree>
 800d944:	9805      	ldr	r0, [sp, #20]
 800d946:	4621      	mov	r1, r4
 800d948:	f001 fb58 	bl	800effc <_Bfree>
 800d94c:	e5f9      	b.n	800d542 <_strtod_l+0x72>
 800d94e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d950:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d954:	4293      	cmp	r3, r2
 800d956:	dbbc      	blt.n	800d8d2 <_strtod_l+0x402>
 800d958:	4c41      	ldr	r4, [pc, #260]	@ (800da60 <_strtod_l+0x590>)
 800d95a:	f1c5 050f 	rsb	r5, r5, #15
 800d95e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d962:	4652      	mov	r2, sl
 800d964:	465b      	mov	r3, fp
 800d966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d96a:	f7f2 fe75 	bl	8000658 <__aeabi_dmul>
 800d96e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d970:	1b5d      	subs	r5, r3, r5
 800d972:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d976:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d97a:	e78f      	b.n	800d89c <_strtod_l+0x3cc>
 800d97c:	3316      	adds	r3, #22
 800d97e:	dba8      	blt.n	800d8d2 <_strtod_l+0x402>
 800d980:	4b37      	ldr	r3, [pc, #220]	@ (800da60 <_strtod_l+0x590>)
 800d982:	eba9 0808 	sub.w	r8, r9, r8
 800d986:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d98a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d98e:	4650      	mov	r0, sl
 800d990:	4659      	mov	r1, fp
 800d992:	f7f2 ff8b 	bl	80008ac <__aeabi_ddiv>
 800d996:	e783      	b.n	800d8a0 <_strtod_l+0x3d0>
 800d998:	4b32      	ldr	r3, [pc, #200]	@ (800da64 <_strtod_l+0x594>)
 800d99a:	9308      	str	r3, [sp, #32]
 800d99c:	2300      	movs	r3, #0
 800d99e:	1124      	asrs	r4, r4, #4
 800d9a0:	4650      	mov	r0, sl
 800d9a2:	4659      	mov	r1, fp
 800d9a4:	461e      	mov	r6, r3
 800d9a6:	2c01      	cmp	r4, #1
 800d9a8:	dc21      	bgt.n	800d9ee <_strtod_l+0x51e>
 800d9aa:	b10b      	cbz	r3, 800d9b0 <_strtod_l+0x4e0>
 800d9ac:	4682      	mov	sl, r0
 800d9ae:	468b      	mov	fp, r1
 800d9b0:	492c      	ldr	r1, [pc, #176]	@ (800da64 <_strtod_l+0x594>)
 800d9b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d9b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d9ba:	4652      	mov	r2, sl
 800d9bc:	465b      	mov	r3, fp
 800d9be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d9c2:	f7f2 fe49 	bl	8000658 <__aeabi_dmul>
 800d9c6:	4b28      	ldr	r3, [pc, #160]	@ (800da68 <_strtod_l+0x598>)
 800d9c8:	460a      	mov	r2, r1
 800d9ca:	400b      	ands	r3, r1
 800d9cc:	4927      	ldr	r1, [pc, #156]	@ (800da6c <_strtod_l+0x59c>)
 800d9ce:	428b      	cmp	r3, r1
 800d9d0:	4682      	mov	sl, r0
 800d9d2:	d898      	bhi.n	800d906 <_strtod_l+0x436>
 800d9d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d9d8:	428b      	cmp	r3, r1
 800d9da:	bf86      	itte	hi
 800d9dc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800da70 <_strtod_l+0x5a0>
 800d9e0:	f04f 3aff 	movhi.w	sl, #4294967295
 800d9e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	9308      	str	r3, [sp, #32]
 800d9ec:	e07a      	b.n	800dae4 <_strtod_l+0x614>
 800d9ee:	07e2      	lsls	r2, r4, #31
 800d9f0:	d505      	bpl.n	800d9fe <_strtod_l+0x52e>
 800d9f2:	9b08      	ldr	r3, [sp, #32]
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f7f2 fe2e 	bl	8000658 <__aeabi_dmul>
 800d9fc:	2301      	movs	r3, #1
 800d9fe:	9a08      	ldr	r2, [sp, #32]
 800da00:	3208      	adds	r2, #8
 800da02:	3601      	adds	r6, #1
 800da04:	1064      	asrs	r4, r4, #1
 800da06:	9208      	str	r2, [sp, #32]
 800da08:	e7cd      	b.n	800d9a6 <_strtod_l+0x4d6>
 800da0a:	d0ed      	beq.n	800d9e8 <_strtod_l+0x518>
 800da0c:	4264      	negs	r4, r4
 800da0e:	f014 020f 	ands.w	r2, r4, #15
 800da12:	d00a      	beq.n	800da2a <_strtod_l+0x55a>
 800da14:	4b12      	ldr	r3, [pc, #72]	@ (800da60 <_strtod_l+0x590>)
 800da16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800da1a:	4650      	mov	r0, sl
 800da1c:	4659      	mov	r1, fp
 800da1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da22:	f7f2 ff43 	bl	80008ac <__aeabi_ddiv>
 800da26:	4682      	mov	sl, r0
 800da28:	468b      	mov	fp, r1
 800da2a:	1124      	asrs	r4, r4, #4
 800da2c:	d0dc      	beq.n	800d9e8 <_strtod_l+0x518>
 800da2e:	2c1f      	cmp	r4, #31
 800da30:	dd20      	ble.n	800da74 <_strtod_l+0x5a4>
 800da32:	2400      	movs	r4, #0
 800da34:	46a0      	mov	r8, r4
 800da36:	940a      	str	r4, [sp, #40]	@ 0x28
 800da38:	46a1      	mov	r9, r4
 800da3a:	9a05      	ldr	r2, [sp, #20]
 800da3c:	2322      	movs	r3, #34	@ 0x22
 800da3e:	f04f 0a00 	mov.w	sl, #0
 800da42:	f04f 0b00 	mov.w	fp, #0
 800da46:	6013      	str	r3, [r2, #0]
 800da48:	e768      	b.n	800d91c <_strtod_l+0x44c>
 800da4a:	bf00      	nop
 800da4c:	08010b2f 	.word	0x08010b2f
 800da50:	08010b34 	.word	0x08010b34
 800da54:	08010b26 	.word	0x08010b26
 800da58:	08010b29 	.word	0x08010b29
 800da5c:	08010ede 	.word	0x08010ede
 800da60:	08010da8 	.word	0x08010da8
 800da64:	08010d80 	.word	0x08010d80
 800da68:	7ff00000 	.word	0x7ff00000
 800da6c:	7ca00000 	.word	0x7ca00000
 800da70:	7fefffff 	.word	0x7fefffff
 800da74:	f014 0310 	ands.w	r3, r4, #16
 800da78:	bf18      	it	ne
 800da7a:	236a      	movne	r3, #106	@ 0x6a
 800da7c:	4ea9      	ldr	r6, [pc, #676]	@ (800dd24 <_strtod_l+0x854>)
 800da7e:	9308      	str	r3, [sp, #32]
 800da80:	4650      	mov	r0, sl
 800da82:	4659      	mov	r1, fp
 800da84:	2300      	movs	r3, #0
 800da86:	07e2      	lsls	r2, r4, #31
 800da88:	d504      	bpl.n	800da94 <_strtod_l+0x5c4>
 800da8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da8e:	f7f2 fde3 	bl	8000658 <__aeabi_dmul>
 800da92:	2301      	movs	r3, #1
 800da94:	1064      	asrs	r4, r4, #1
 800da96:	f106 0608 	add.w	r6, r6, #8
 800da9a:	d1f4      	bne.n	800da86 <_strtod_l+0x5b6>
 800da9c:	b10b      	cbz	r3, 800daa2 <_strtod_l+0x5d2>
 800da9e:	4682      	mov	sl, r0
 800daa0:	468b      	mov	fp, r1
 800daa2:	9b08      	ldr	r3, [sp, #32]
 800daa4:	b1b3      	cbz	r3, 800dad4 <_strtod_l+0x604>
 800daa6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800daaa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800daae:	2b00      	cmp	r3, #0
 800dab0:	4659      	mov	r1, fp
 800dab2:	dd0f      	ble.n	800dad4 <_strtod_l+0x604>
 800dab4:	2b1f      	cmp	r3, #31
 800dab6:	dd55      	ble.n	800db64 <_strtod_l+0x694>
 800dab8:	2b34      	cmp	r3, #52	@ 0x34
 800daba:	bfde      	ittt	le
 800dabc:	f04f 33ff 	movle.w	r3, #4294967295
 800dac0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800dac4:	4093      	lslle	r3, r2
 800dac6:	f04f 0a00 	mov.w	sl, #0
 800daca:	bfcc      	ite	gt
 800dacc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800dad0:	ea03 0b01 	andle.w	fp, r3, r1
 800dad4:	2200      	movs	r2, #0
 800dad6:	2300      	movs	r3, #0
 800dad8:	4650      	mov	r0, sl
 800dada:	4659      	mov	r1, fp
 800dadc:	f7f3 f824 	bl	8000b28 <__aeabi_dcmpeq>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d1a6      	bne.n	800da32 <_strtod_l+0x562>
 800dae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dae6:	9300      	str	r3, [sp, #0]
 800dae8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800daea:	9805      	ldr	r0, [sp, #20]
 800daec:	462b      	mov	r3, r5
 800daee:	463a      	mov	r2, r7
 800daf0:	f001 faec 	bl	800f0cc <__s2b>
 800daf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f43f af05 	beq.w	800d906 <_strtod_l+0x436>
 800dafc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dafe:	2a00      	cmp	r2, #0
 800db00:	eba9 0308 	sub.w	r3, r9, r8
 800db04:	bfa8      	it	ge
 800db06:	2300      	movge	r3, #0
 800db08:	9312      	str	r3, [sp, #72]	@ 0x48
 800db0a:	2400      	movs	r4, #0
 800db0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800db10:	9316      	str	r3, [sp, #88]	@ 0x58
 800db12:	46a0      	mov	r8, r4
 800db14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db16:	9805      	ldr	r0, [sp, #20]
 800db18:	6859      	ldr	r1, [r3, #4]
 800db1a:	f001 fa2f 	bl	800ef7c <_Balloc>
 800db1e:	4681      	mov	r9, r0
 800db20:	2800      	cmp	r0, #0
 800db22:	f43f aef4 	beq.w	800d90e <_strtod_l+0x43e>
 800db26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800db28:	691a      	ldr	r2, [r3, #16]
 800db2a:	3202      	adds	r2, #2
 800db2c:	f103 010c 	add.w	r1, r3, #12
 800db30:	0092      	lsls	r2, r2, #2
 800db32:	300c      	adds	r0, #12
 800db34:	f000 fdbf 	bl	800e6b6 <memcpy>
 800db38:	ec4b ab10 	vmov	d0, sl, fp
 800db3c:	9805      	ldr	r0, [sp, #20]
 800db3e:	aa1c      	add	r2, sp, #112	@ 0x70
 800db40:	a91b      	add	r1, sp, #108	@ 0x6c
 800db42:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800db46:	f001 fdfd 	bl	800f744 <__d2b>
 800db4a:	901a      	str	r0, [sp, #104]	@ 0x68
 800db4c:	2800      	cmp	r0, #0
 800db4e:	f43f aede 	beq.w	800d90e <_strtod_l+0x43e>
 800db52:	9805      	ldr	r0, [sp, #20]
 800db54:	2101      	movs	r1, #1
 800db56:	f001 fb4f 	bl	800f1f8 <__i2b>
 800db5a:	4680      	mov	r8, r0
 800db5c:	b948      	cbnz	r0, 800db72 <_strtod_l+0x6a2>
 800db5e:	f04f 0800 	mov.w	r8, #0
 800db62:	e6d4      	b.n	800d90e <_strtod_l+0x43e>
 800db64:	f04f 32ff 	mov.w	r2, #4294967295
 800db68:	fa02 f303 	lsl.w	r3, r2, r3
 800db6c:	ea03 0a0a 	and.w	sl, r3, sl
 800db70:	e7b0      	b.n	800dad4 <_strtod_l+0x604>
 800db72:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800db74:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800db76:	2d00      	cmp	r5, #0
 800db78:	bfab      	itete	ge
 800db7a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800db7c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800db7e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800db80:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800db82:	bfac      	ite	ge
 800db84:	18ef      	addge	r7, r5, r3
 800db86:	1b5e      	sublt	r6, r3, r5
 800db88:	9b08      	ldr	r3, [sp, #32]
 800db8a:	1aed      	subs	r5, r5, r3
 800db8c:	4415      	add	r5, r2
 800db8e:	4b66      	ldr	r3, [pc, #408]	@ (800dd28 <_strtod_l+0x858>)
 800db90:	3d01      	subs	r5, #1
 800db92:	429d      	cmp	r5, r3
 800db94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800db98:	da50      	bge.n	800dc3c <_strtod_l+0x76c>
 800db9a:	1b5b      	subs	r3, r3, r5
 800db9c:	2b1f      	cmp	r3, #31
 800db9e:	eba2 0203 	sub.w	r2, r2, r3
 800dba2:	f04f 0101 	mov.w	r1, #1
 800dba6:	dc3d      	bgt.n	800dc24 <_strtod_l+0x754>
 800dba8:	fa01 f303 	lsl.w	r3, r1, r3
 800dbac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dbae:	2300      	movs	r3, #0
 800dbb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800dbb2:	18bd      	adds	r5, r7, r2
 800dbb4:	9b08      	ldr	r3, [sp, #32]
 800dbb6:	42af      	cmp	r7, r5
 800dbb8:	4416      	add	r6, r2
 800dbba:	441e      	add	r6, r3
 800dbbc:	463b      	mov	r3, r7
 800dbbe:	bfa8      	it	ge
 800dbc0:	462b      	movge	r3, r5
 800dbc2:	42b3      	cmp	r3, r6
 800dbc4:	bfa8      	it	ge
 800dbc6:	4633      	movge	r3, r6
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	bfc2      	ittt	gt
 800dbcc:	1aed      	subgt	r5, r5, r3
 800dbce:	1af6      	subgt	r6, r6, r3
 800dbd0:	1aff      	subgt	r7, r7, r3
 800dbd2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	dd16      	ble.n	800dc06 <_strtod_l+0x736>
 800dbd8:	4641      	mov	r1, r8
 800dbda:	9805      	ldr	r0, [sp, #20]
 800dbdc:	461a      	mov	r2, r3
 800dbde:	f001 fbcb 	bl	800f378 <__pow5mult>
 800dbe2:	4680      	mov	r8, r0
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d0ba      	beq.n	800db5e <_strtod_l+0x68e>
 800dbe8:	4601      	mov	r1, r0
 800dbea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800dbec:	9805      	ldr	r0, [sp, #20]
 800dbee:	f001 fb19 	bl	800f224 <__multiply>
 800dbf2:	900e      	str	r0, [sp, #56]	@ 0x38
 800dbf4:	2800      	cmp	r0, #0
 800dbf6:	f43f ae8a 	beq.w	800d90e <_strtod_l+0x43e>
 800dbfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dbfc:	9805      	ldr	r0, [sp, #20]
 800dbfe:	f001 f9fd 	bl	800effc <_Bfree>
 800dc02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc04:	931a      	str	r3, [sp, #104]	@ 0x68
 800dc06:	2d00      	cmp	r5, #0
 800dc08:	dc1d      	bgt.n	800dc46 <_strtod_l+0x776>
 800dc0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dd23      	ble.n	800dc58 <_strtod_l+0x788>
 800dc10:	4649      	mov	r1, r9
 800dc12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800dc14:	9805      	ldr	r0, [sp, #20]
 800dc16:	f001 fbaf 	bl	800f378 <__pow5mult>
 800dc1a:	4681      	mov	r9, r0
 800dc1c:	b9e0      	cbnz	r0, 800dc58 <_strtod_l+0x788>
 800dc1e:	f04f 0900 	mov.w	r9, #0
 800dc22:	e674      	b.n	800d90e <_strtod_l+0x43e>
 800dc24:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800dc28:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800dc2c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800dc30:	35e2      	adds	r5, #226	@ 0xe2
 800dc32:	fa01 f305 	lsl.w	r3, r1, r5
 800dc36:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc38:	9113      	str	r1, [sp, #76]	@ 0x4c
 800dc3a:	e7ba      	b.n	800dbb2 <_strtod_l+0x6e2>
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800dc40:	2301      	movs	r3, #1
 800dc42:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc44:	e7b5      	b.n	800dbb2 <_strtod_l+0x6e2>
 800dc46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc48:	9805      	ldr	r0, [sp, #20]
 800dc4a:	462a      	mov	r2, r5
 800dc4c:	f001 fbee 	bl	800f42c <__lshift>
 800dc50:	901a      	str	r0, [sp, #104]	@ 0x68
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d1d9      	bne.n	800dc0a <_strtod_l+0x73a>
 800dc56:	e65a      	b.n	800d90e <_strtod_l+0x43e>
 800dc58:	2e00      	cmp	r6, #0
 800dc5a:	dd07      	ble.n	800dc6c <_strtod_l+0x79c>
 800dc5c:	4649      	mov	r1, r9
 800dc5e:	9805      	ldr	r0, [sp, #20]
 800dc60:	4632      	mov	r2, r6
 800dc62:	f001 fbe3 	bl	800f42c <__lshift>
 800dc66:	4681      	mov	r9, r0
 800dc68:	2800      	cmp	r0, #0
 800dc6a:	d0d8      	beq.n	800dc1e <_strtod_l+0x74e>
 800dc6c:	2f00      	cmp	r7, #0
 800dc6e:	dd08      	ble.n	800dc82 <_strtod_l+0x7b2>
 800dc70:	4641      	mov	r1, r8
 800dc72:	9805      	ldr	r0, [sp, #20]
 800dc74:	463a      	mov	r2, r7
 800dc76:	f001 fbd9 	bl	800f42c <__lshift>
 800dc7a:	4680      	mov	r8, r0
 800dc7c:	2800      	cmp	r0, #0
 800dc7e:	f43f ae46 	beq.w	800d90e <_strtod_l+0x43e>
 800dc82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc84:	9805      	ldr	r0, [sp, #20]
 800dc86:	464a      	mov	r2, r9
 800dc88:	f001 fc58 	bl	800f53c <__mdiff>
 800dc8c:	4604      	mov	r4, r0
 800dc8e:	2800      	cmp	r0, #0
 800dc90:	f43f ae3d 	beq.w	800d90e <_strtod_l+0x43e>
 800dc94:	68c3      	ldr	r3, [r0, #12]
 800dc96:	930f      	str	r3, [sp, #60]	@ 0x3c
 800dc98:	2300      	movs	r3, #0
 800dc9a:	60c3      	str	r3, [r0, #12]
 800dc9c:	4641      	mov	r1, r8
 800dc9e:	f001 fc31 	bl	800f504 <__mcmp>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	da46      	bge.n	800dd34 <_strtod_l+0x864>
 800dca6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dca8:	ea53 030a 	orrs.w	r3, r3, sl
 800dcac:	d16c      	bne.n	800dd88 <_strtod_l+0x8b8>
 800dcae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d168      	bne.n	800dd88 <_strtod_l+0x8b8>
 800dcb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcba:	0d1b      	lsrs	r3, r3, #20
 800dcbc:	051b      	lsls	r3, r3, #20
 800dcbe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dcc2:	d961      	bls.n	800dd88 <_strtod_l+0x8b8>
 800dcc4:	6963      	ldr	r3, [r4, #20]
 800dcc6:	b913      	cbnz	r3, 800dcce <_strtod_l+0x7fe>
 800dcc8:	6923      	ldr	r3, [r4, #16]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	dd5c      	ble.n	800dd88 <_strtod_l+0x8b8>
 800dcce:	4621      	mov	r1, r4
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	9805      	ldr	r0, [sp, #20]
 800dcd4:	f001 fbaa 	bl	800f42c <__lshift>
 800dcd8:	4641      	mov	r1, r8
 800dcda:	4604      	mov	r4, r0
 800dcdc:	f001 fc12 	bl	800f504 <__mcmp>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	dd51      	ble.n	800dd88 <_strtod_l+0x8b8>
 800dce4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dce8:	9a08      	ldr	r2, [sp, #32]
 800dcea:	0d1b      	lsrs	r3, r3, #20
 800dcec:	051b      	lsls	r3, r3, #20
 800dcee:	2a00      	cmp	r2, #0
 800dcf0:	d06b      	beq.n	800ddca <_strtod_l+0x8fa>
 800dcf2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800dcf6:	d868      	bhi.n	800ddca <_strtod_l+0x8fa>
 800dcf8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800dcfc:	f67f ae9d 	bls.w	800da3a <_strtod_l+0x56a>
 800dd00:	4b0a      	ldr	r3, [pc, #40]	@ (800dd2c <_strtod_l+0x85c>)
 800dd02:	4650      	mov	r0, sl
 800dd04:	4659      	mov	r1, fp
 800dd06:	2200      	movs	r2, #0
 800dd08:	f7f2 fca6 	bl	8000658 <__aeabi_dmul>
 800dd0c:	4b08      	ldr	r3, [pc, #32]	@ (800dd30 <_strtod_l+0x860>)
 800dd0e:	400b      	ands	r3, r1
 800dd10:	4682      	mov	sl, r0
 800dd12:	468b      	mov	fp, r1
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	f47f ae05 	bne.w	800d924 <_strtod_l+0x454>
 800dd1a:	9a05      	ldr	r2, [sp, #20]
 800dd1c:	2322      	movs	r3, #34	@ 0x22
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	e600      	b.n	800d924 <_strtod_l+0x454>
 800dd22:	bf00      	nop
 800dd24:	08010b60 	.word	0x08010b60
 800dd28:	fffffc02 	.word	0xfffffc02
 800dd2c:	39500000 	.word	0x39500000
 800dd30:	7ff00000 	.word	0x7ff00000
 800dd34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dd38:	d165      	bne.n	800de06 <_strtod_l+0x936>
 800dd3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800dd3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd40:	b35a      	cbz	r2, 800dd9a <_strtod_l+0x8ca>
 800dd42:	4a9f      	ldr	r2, [pc, #636]	@ (800dfc0 <_strtod_l+0xaf0>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d12b      	bne.n	800dda0 <_strtod_l+0x8d0>
 800dd48:	9b08      	ldr	r3, [sp, #32]
 800dd4a:	4651      	mov	r1, sl
 800dd4c:	b303      	cbz	r3, 800dd90 <_strtod_l+0x8c0>
 800dd4e:	4b9d      	ldr	r3, [pc, #628]	@ (800dfc4 <_strtod_l+0xaf4>)
 800dd50:	465a      	mov	r2, fp
 800dd52:	4013      	ands	r3, r2
 800dd54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800dd58:	f04f 32ff 	mov.w	r2, #4294967295
 800dd5c:	d81b      	bhi.n	800dd96 <_strtod_l+0x8c6>
 800dd5e:	0d1b      	lsrs	r3, r3, #20
 800dd60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dd64:	fa02 f303 	lsl.w	r3, r2, r3
 800dd68:	4299      	cmp	r1, r3
 800dd6a:	d119      	bne.n	800dda0 <_strtod_l+0x8d0>
 800dd6c:	4b96      	ldr	r3, [pc, #600]	@ (800dfc8 <_strtod_l+0xaf8>)
 800dd6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d102      	bne.n	800dd7a <_strtod_l+0x8aa>
 800dd74:	3101      	adds	r1, #1
 800dd76:	f43f adca 	beq.w	800d90e <_strtod_l+0x43e>
 800dd7a:	4b92      	ldr	r3, [pc, #584]	@ (800dfc4 <_strtod_l+0xaf4>)
 800dd7c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dd7e:	401a      	ands	r2, r3
 800dd80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800dd84:	f04f 0a00 	mov.w	sl, #0
 800dd88:	9b08      	ldr	r3, [sp, #32]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d1b8      	bne.n	800dd00 <_strtod_l+0x830>
 800dd8e:	e5c9      	b.n	800d924 <_strtod_l+0x454>
 800dd90:	f04f 33ff 	mov.w	r3, #4294967295
 800dd94:	e7e8      	b.n	800dd68 <_strtod_l+0x898>
 800dd96:	4613      	mov	r3, r2
 800dd98:	e7e6      	b.n	800dd68 <_strtod_l+0x898>
 800dd9a:	ea53 030a 	orrs.w	r3, r3, sl
 800dd9e:	d0a1      	beq.n	800dce4 <_strtod_l+0x814>
 800dda0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dda2:	b1db      	cbz	r3, 800dddc <_strtod_l+0x90c>
 800dda4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dda6:	4213      	tst	r3, r2
 800dda8:	d0ee      	beq.n	800dd88 <_strtod_l+0x8b8>
 800ddaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddac:	9a08      	ldr	r2, [sp, #32]
 800ddae:	4650      	mov	r0, sl
 800ddb0:	4659      	mov	r1, fp
 800ddb2:	b1bb      	cbz	r3, 800dde4 <_strtod_l+0x914>
 800ddb4:	f7ff fb6e 	bl	800d494 <sulp>
 800ddb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddbc:	ec53 2b10 	vmov	r2, r3, d0
 800ddc0:	f7f2 fa94 	bl	80002ec <__adddf3>
 800ddc4:	4682      	mov	sl, r0
 800ddc6:	468b      	mov	fp, r1
 800ddc8:	e7de      	b.n	800dd88 <_strtod_l+0x8b8>
 800ddca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ddce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ddd2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ddd6:	f04f 3aff 	mov.w	sl, #4294967295
 800ddda:	e7d5      	b.n	800dd88 <_strtod_l+0x8b8>
 800dddc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ddde:	ea13 0f0a 	tst.w	r3, sl
 800dde2:	e7e1      	b.n	800dda8 <_strtod_l+0x8d8>
 800dde4:	f7ff fb56 	bl	800d494 <sulp>
 800dde8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ddec:	ec53 2b10 	vmov	r2, r3, d0
 800ddf0:	f7f2 fa7a 	bl	80002e8 <__aeabi_dsub>
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	4682      	mov	sl, r0
 800ddfa:	468b      	mov	fp, r1
 800ddfc:	f7f2 fe94 	bl	8000b28 <__aeabi_dcmpeq>
 800de00:	2800      	cmp	r0, #0
 800de02:	d0c1      	beq.n	800dd88 <_strtod_l+0x8b8>
 800de04:	e619      	b.n	800da3a <_strtod_l+0x56a>
 800de06:	4641      	mov	r1, r8
 800de08:	4620      	mov	r0, r4
 800de0a:	f001 fcf3 	bl	800f7f4 <__ratio>
 800de0e:	ec57 6b10 	vmov	r6, r7, d0
 800de12:	2200      	movs	r2, #0
 800de14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800de18:	4630      	mov	r0, r6
 800de1a:	4639      	mov	r1, r7
 800de1c:	f7f2 fe98 	bl	8000b50 <__aeabi_dcmple>
 800de20:	2800      	cmp	r0, #0
 800de22:	d06f      	beq.n	800df04 <_strtod_l+0xa34>
 800de24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800de26:	2b00      	cmp	r3, #0
 800de28:	d17a      	bne.n	800df20 <_strtod_l+0xa50>
 800de2a:	f1ba 0f00 	cmp.w	sl, #0
 800de2e:	d158      	bne.n	800dee2 <_strtod_l+0xa12>
 800de30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de36:	2b00      	cmp	r3, #0
 800de38:	d15a      	bne.n	800def0 <_strtod_l+0xa20>
 800de3a:	4b64      	ldr	r3, [pc, #400]	@ (800dfcc <_strtod_l+0xafc>)
 800de3c:	2200      	movs	r2, #0
 800de3e:	4630      	mov	r0, r6
 800de40:	4639      	mov	r1, r7
 800de42:	f7f2 fe7b 	bl	8000b3c <__aeabi_dcmplt>
 800de46:	2800      	cmp	r0, #0
 800de48:	d159      	bne.n	800defe <_strtod_l+0xa2e>
 800de4a:	4630      	mov	r0, r6
 800de4c:	4639      	mov	r1, r7
 800de4e:	4b60      	ldr	r3, [pc, #384]	@ (800dfd0 <_strtod_l+0xb00>)
 800de50:	2200      	movs	r2, #0
 800de52:	f7f2 fc01 	bl	8000658 <__aeabi_dmul>
 800de56:	4606      	mov	r6, r0
 800de58:	460f      	mov	r7, r1
 800de5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800de5e:	9606      	str	r6, [sp, #24]
 800de60:	9307      	str	r3, [sp, #28]
 800de62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de66:	4d57      	ldr	r5, [pc, #348]	@ (800dfc4 <_strtod_l+0xaf4>)
 800de68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800de6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de6e:	401d      	ands	r5, r3
 800de70:	4b58      	ldr	r3, [pc, #352]	@ (800dfd4 <_strtod_l+0xb04>)
 800de72:	429d      	cmp	r5, r3
 800de74:	f040 80b2 	bne.w	800dfdc <_strtod_l+0xb0c>
 800de78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800de7e:	ec4b ab10 	vmov	d0, sl, fp
 800de82:	f001 fbef 	bl	800f664 <__ulp>
 800de86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de8a:	ec51 0b10 	vmov	r0, r1, d0
 800de8e:	f7f2 fbe3 	bl	8000658 <__aeabi_dmul>
 800de92:	4652      	mov	r2, sl
 800de94:	465b      	mov	r3, fp
 800de96:	f7f2 fa29 	bl	80002ec <__adddf3>
 800de9a:	460b      	mov	r3, r1
 800de9c:	4949      	ldr	r1, [pc, #292]	@ (800dfc4 <_strtod_l+0xaf4>)
 800de9e:	4a4e      	ldr	r2, [pc, #312]	@ (800dfd8 <_strtod_l+0xb08>)
 800dea0:	4019      	ands	r1, r3
 800dea2:	4291      	cmp	r1, r2
 800dea4:	4682      	mov	sl, r0
 800dea6:	d942      	bls.n	800df2e <_strtod_l+0xa5e>
 800dea8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800deaa:	4b47      	ldr	r3, [pc, #284]	@ (800dfc8 <_strtod_l+0xaf8>)
 800deac:	429a      	cmp	r2, r3
 800deae:	d103      	bne.n	800deb8 <_strtod_l+0x9e8>
 800deb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800deb2:	3301      	adds	r3, #1
 800deb4:	f43f ad2b 	beq.w	800d90e <_strtod_l+0x43e>
 800deb8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dfc8 <_strtod_l+0xaf8>
 800debc:	f04f 3aff 	mov.w	sl, #4294967295
 800dec0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dec2:	9805      	ldr	r0, [sp, #20]
 800dec4:	f001 f89a 	bl	800effc <_Bfree>
 800dec8:	9805      	ldr	r0, [sp, #20]
 800deca:	4649      	mov	r1, r9
 800decc:	f001 f896 	bl	800effc <_Bfree>
 800ded0:	9805      	ldr	r0, [sp, #20]
 800ded2:	4641      	mov	r1, r8
 800ded4:	f001 f892 	bl	800effc <_Bfree>
 800ded8:	9805      	ldr	r0, [sp, #20]
 800deda:	4621      	mov	r1, r4
 800dedc:	f001 f88e 	bl	800effc <_Bfree>
 800dee0:	e618      	b.n	800db14 <_strtod_l+0x644>
 800dee2:	f1ba 0f01 	cmp.w	sl, #1
 800dee6:	d103      	bne.n	800def0 <_strtod_l+0xa20>
 800dee8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800deea:	2b00      	cmp	r3, #0
 800deec:	f43f ada5 	beq.w	800da3a <_strtod_l+0x56a>
 800def0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dfa0 <_strtod_l+0xad0>
 800def4:	4f35      	ldr	r7, [pc, #212]	@ (800dfcc <_strtod_l+0xafc>)
 800def6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800defa:	2600      	movs	r6, #0
 800defc:	e7b1      	b.n	800de62 <_strtod_l+0x992>
 800defe:	4f34      	ldr	r7, [pc, #208]	@ (800dfd0 <_strtod_l+0xb00>)
 800df00:	2600      	movs	r6, #0
 800df02:	e7aa      	b.n	800de5a <_strtod_l+0x98a>
 800df04:	4b32      	ldr	r3, [pc, #200]	@ (800dfd0 <_strtod_l+0xb00>)
 800df06:	4630      	mov	r0, r6
 800df08:	4639      	mov	r1, r7
 800df0a:	2200      	movs	r2, #0
 800df0c:	f7f2 fba4 	bl	8000658 <__aeabi_dmul>
 800df10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df12:	4606      	mov	r6, r0
 800df14:	460f      	mov	r7, r1
 800df16:	2b00      	cmp	r3, #0
 800df18:	d09f      	beq.n	800de5a <_strtod_l+0x98a>
 800df1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800df1e:	e7a0      	b.n	800de62 <_strtod_l+0x992>
 800df20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dfa8 <_strtod_l+0xad8>
 800df24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800df28:	ec57 6b17 	vmov	r6, r7, d7
 800df2c:	e799      	b.n	800de62 <_strtod_l+0x992>
 800df2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800df32:	9b08      	ldr	r3, [sp, #32]
 800df34:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d1c1      	bne.n	800dec0 <_strtod_l+0x9f0>
 800df3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800df40:	0d1b      	lsrs	r3, r3, #20
 800df42:	051b      	lsls	r3, r3, #20
 800df44:	429d      	cmp	r5, r3
 800df46:	d1bb      	bne.n	800dec0 <_strtod_l+0x9f0>
 800df48:	4630      	mov	r0, r6
 800df4a:	4639      	mov	r1, r7
 800df4c:	f7f2 febc 	bl	8000cc8 <__aeabi_d2lz>
 800df50:	f7f2 fb54 	bl	80005fc <__aeabi_l2d>
 800df54:	4602      	mov	r2, r0
 800df56:	460b      	mov	r3, r1
 800df58:	4630      	mov	r0, r6
 800df5a:	4639      	mov	r1, r7
 800df5c:	f7f2 f9c4 	bl	80002e8 <__aeabi_dsub>
 800df60:	460b      	mov	r3, r1
 800df62:	4602      	mov	r2, r0
 800df64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800df68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800df6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800df6e:	ea46 060a 	orr.w	r6, r6, sl
 800df72:	431e      	orrs	r6, r3
 800df74:	d06f      	beq.n	800e056 <_strtod_l+0xb86>
 800df76:	a30e      	add	r3, pc, #56	@ (adr r3, 800dfb0 <_strtod_l+0xae0>)
 800df78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7c:	f7f2 fdde 	bl	8000b3c <__aeabi_dcmplt>
 800df80:	2800      	cmp	r0, #0
 800df82:	f47f accf 	bne.w	800d924 <_strtod_l+0x454>
 800df86:	a30c      	add	r3, pc, #48	@ (adr r3, 800dfb8 <_strtod_l+0xae8>)
 800df88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df90:	f7f2 fdf2 	bl	8000b78 <__aeabi_dcmpgt>
 800df94:	2800      	cmp	r0, #0
 800df96:	d093      	beq.n	800dec0 <_strtod_l+0x9f0>
 800df98:	e4c4      	b.n	800d924 <_strtod_l+0x454>
 800df9a:	bf00      	nop
 800df9c:	f3af 8000 	nop.w
 800dfa0:	00000000 	.word	0x00000000
 800dfa4:	bff00000 	.word	0xbff00000
 800dfa8:	00000000 	.word	0x00000000
 800dfac:	3ff00000 	.word	0x3ff00000
 800dfb0:	94a03595 	.word	0x94a03595
 800dfb4:	3fdfffff 	.word	0x3fdfffff
 800dfb8:	35afe535 	.word	0x35afe535
 800dfbc:	3fe00000 	.word	0x3fe00000
 800dfc0:	000fffff 	.word	0x000fffff
 800dfc4:	7ff00000 	.word	0x7ff00000
 800dfc8:	7fefffff 	.word	0x7fefffff
 800dfcc:	3ff00000 	.word	0x3ff00000
 800dfd0:	3fe00000 	.word	0x3fe00000
 800dfd4:	7fe00000 	.word	0x7fe00000
 800dfd8:	7c9fffff 	.word	0x7c9fffff
 800dfdc:	9b08      	ldr	r3, [sp, #32]
 800dfde:	b323      	cbz	r3, 800e02a <_strtod_l+0xb5a>
 800dfe0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dfe4:	d821      	bhi.n	800e02a <_strtod_l+0xb5a>
 800dfe6:	a328      	add	r3, pc, #160	@ (adr r3, 800e088 <_strtod_l+0xbb8>)
 800dfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfec:	4630      	mov	r0, r6
 800dfee:	4639      	mov	r1, r7
 800dff0:	f7f2 fdae 	bl	8000b50 <__aeabi_dcmple>
 800dff4:	b1a0      	cbz	r0, 800e020 <_strtod_l+0xb50>
 800dff6:	4639      	mov	r1, r7
 800dff8:	4630      	mov	r0, r6
 800dffa:	f7f2 fddd 	bl	8000bb8 <__aeabi_d2uiz>
 800dffe:	2801      	cmp	r0, #1
 800e000:	bf38      	it	cc
 800e002:	2001      	movcc	r0, #1
 800e004:	f7f2 faae 	bl	8000564 <__aeabi_ui2d>
 800e008:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e00a:	4606      	mov	r6, r0
 800e00c:	460f      	mov	r7, r1
 800e00e:	b9fb      	cbnz	r3, 800e050 <_strtod_l+0xb80>
 800e010:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e014:	9014      	str	r0, [sp, #80]	@ 0x50
 800e016:	9315      	str	r3, [sp, #84]	@ 0x54
 800e018:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800e01c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800e020:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e022:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800e026:	1b5b      	subs	r3, r3, r5
 800e028:	9311      	str	r3, [sp, #68]	@ 0x44
 800e02a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e02e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800e032:	f001 fb17 	bl	800f664 <__ulp>
 800e036:	4650      	mov	r0, sl
 800e038:	ec53 2b10 	vmov	r2, r3, d0
 800e03c:	4659      	mov	r1, fp
 800e03e:	f7f2 fb0b 	bl	8000658 <__aeabi_dmul>
 800e042:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e046:	f7f2 f951 	bl	80002ec <__adddf3>
 800e04a:	4682      	mov	sl, r0
 800e04c:	468b      	mov	fp, r1
 800e04e:	e770      	b.n	800df32 <_strtod_l+0xa62>
 800e050:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800e054:	e7e0      	b.n	800e018 <_strtod_l+0xb48>
 800e056:	a30e      	add	r3, pc, #56	@ (adr r3, 800e090 <_strtod_l+0xbc0>)
 800e058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05c:	f7f2 fd6e 	bl	8000b3c <__aeabi_dcmplt>
 800e060:	e798      	b.n	800df94 <_strtod_l+0xac4>
 800e062:	2300      	movs	r3, #0
 800e064:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e066:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800e068:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e06a:	6013      	str	r3, [r2, #0]
 800e06c:	f7ff ba6d 	b.w	800d54a <_strtod_l+0x7a>
 800e070:	2a65      	cmp	r2, #101	@ 0x65
 800e072:	f43f ab66 	beq.w	800d742 <_strtod_l+0x272>
 800e076:	2a45      	cmp	r2, #69	@ 0x45
 800e078:	f43f ab63 	beq.w	800d742 <_strtod_l+0x272>
 800e07c:	2301      	movs	r3, #1
 800e07e:	f7ff bb9e 	b.w	800d7be <_strtod_l+0x2ee>
 800e082:	bf00      	nop
 800e084:	f3af 8000 	nop.w
 800e088:	ffc00000 	.word	0xffc00000
 800e08c:	41dfffff 	.word	0x41dfffff
 800e090:	94a03595 	.word	0x94a03595
 800e094:	3fcfffff 	.word	0x3fcfffff

0800e098 <strtof>:
 800e098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e09c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800e15c <strtof+0xc4>
 800e0a0:	4b29      	ldr	r3, [pc, #164]	@ (800e148 <strtof+0xb0>)
 800e0a2:	460a      	mov	r2, r1
 800e0a4:	ed2d 8b02 	vpush	{d8}
 800e0a8:	4601      	mov	r1, r0
 800e0aa:	f8d8 0000 	ldr.w	r0, [r8]
 800e0ae:	f7ff fa0f 	bl	800d4d0 <_strtod_l>
 800e0b2:	ec55 4b10 	vmov	r4, r5, d0
 800e0b6:	4622      	mov	r2, r4
 800e0b8:	462b      	mov	r3, r5
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	4629      	mov	r1, r5
 800e0be:	f7f2 fd65 	bl	8000b8c <__aeabi_dcmpun>
 800e0c2:	b190      	cbz	r0, 800e0ea <strtof+0x52>
 800e0c4:	2d00      	cmp	r5, #0
 800e0c6:	4821      	ldr	r0, [pc, #132]	@ (800e14c <strtof+0xb4>)
 800e0c8:	da09      	bge.n	800e0de <strtof+0x46>
 800e0ca:	f000 fb0d 	bl	800e6e8 <nanf>
 800e0ce:	eeb1 8a40 	vneg.f32	s16, s0
 800e0d2:	eeb0 0a48 	vmov.f32	s0, s16
 800e0d6:	ecbd 8b02 	vpop	{d8}
 800e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0de:	ecbd 8b02 	vpop	{d8}
 800e0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0e6:	f000 baff 	b.w	800e6e8 <nanf>
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7f2 fd83 	bl	8000bf8 <__aeabi_d2f>
 800e0f2:	ee08 0a10 	vmov	s16, r0
 800e0f6:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800e150 <strtof+0xb8>
 800e0fa:	eeb0 7ac8 	vabs.f32	s14, s16
 800e0fe:	eeb4 7a67 	vcmp.f32	s14, s15
 800e102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e106:	dd11      	ble.n	800e12c <strtof+0x94>
 800e108:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800e10c:	4b11      	ldr	r3, [pc, #68]	@ (800e154 <strtof+0xbc>)
 800e10e:	f04f 32ff 	mov.w	r2, #4294967295
 800e112:	4620      	mov	r0, r4
 800e114:	4639      	mov	r1, r7
 800e116:	f7f2 fd39 	bl	8000b8c <__aeabi_dcmpun>
 800e11a:	b980      	cbnz	r0, 800e13e <strtof+0xa6>
 800e11c:	4b0d      	ldr	r3, [pc, #52]	@ (800e154 <strtof+0xbc>)
 800e11e:	f04f 32ff 	mov.w	r2, #4294967295
 800e122:	4620      	mov	r0, r4
 800e124:	4639      	mov	r1, r7
 800e126:	f7f2 fd13 	bl	8000b50 <__aeabi_dcmple>
 800e12a:	b940      	cbnz	r0, 800e13e <strtof+0xa6>
 800e12c:	ee18 3a10 	vmov	r3, s16
 800e130:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800e134:	d1cd      	bne.n	800e0d2 <strtof+0x3a>
 800e136:	4b08      	ldr	r3, [pc, #32]	@ (800e158 <strtof+0xc0>)
 800e138:	402b      	ands	r3, r5
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d0c9      	beq.n	800e0d2 <strtof+0x3a>
 800e13e:	f8d8 3000 	ldr.w	r3, [r8]
 800e142:	2222      	movs	r2, #34	@ 0x22
 800e144:	601a      	str	r2, [r3, #0]
 800e146:	e7c4      	b.n	800e0d2 <strtof+0x3a>
 800e148:	200001a4 	.word	0x200001a4
 800e14c:	08010ede 	.word	0x08010ede
 800e150:	7f7fffff 	.word	0x7f7fffff
 800e154:	7fefffff 	.word	0x7fefffff
 800e158:	7ff00000 	.word	0x7ff00000
 800e15c:	20000310 	.word	0x20000310

0800e160 <_strtoul_l.constprop.0>:
 800e160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e164:	4e34      	ldr	r6, [pc, #208]	@ (800e238 <_strtoul_l.constprop.0+0xd8>)
 800e166:	4686      	mov	lr, r0
 800e168:	460d      	mov	r5, r1
 800e16a:	4628      	mov	r0, r5
 800e16c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e170:	5d37      	ldrb	r7, [r6, r4]
 800e172:	f017 0708 	ands.w	r7, r7, #8
 800e176:	d1f8      	bne.n	800e16a <_strtoul_l.constprop.0+0xa>
 800e178:	2c2d      	cmp	r4, #45	@ 0x2d
 800e17a:	d12f      	bne.n	800e1dc <_strtoul_l.constprop.0+0x7c>
 800e17c:	782c      	ldrb	r4, [r5, #0]
 800e17e:	2701      	movs	r7, #1
 800e180:	1c85      	adds	r5, r0, #2
 800e182:	f033 0010 	bics.w	r0, r3, #16
 800e186:	d109      	bne.n	800e19c <_strtoul_l.constprop.0+0x3c>
 800e188:	2c30      	cmp	r4, #48	@ 0x30
 800e18a:	d12c      	bne.n	800e1e6 <_strtoul_l.constprop.0+0x86>
 800e18c:	7828      	ldrb	r0, [r5, #0]
 800e18e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e192:	2858      	cmp	r0, #88	@ 0x58
 800e194:	d127      	bne.n	800e1e6 <_strtoul_l.constprop.0+0x86>
 800e196:	786c      	ldrb	r4, [r5, #1]
 800e198:	2310      	movs	r3, #16
 800e19a:	3502      	adds	r5, #2
 800e19c:	f04f 38ff 	mov.w	r8, #4294967295
 800e1a0:	2600      	movs	r6, #0
 800e1a2:	fbb8 f8f3 	udiv	r8, r8, r3
 800e1a6:	fb03 f908 	mul.w	r9, r3, r8
 800e1aa:	ea6f 0909 	mvn.w	r9, r9
 800e1ae:	4630      	mov	r0, r6
 800e1b0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e1b4:	f1bc 0f09 	cmp.w	ip, #9
 800e1b8:	d81c      	bhi.n	800e1f4 <_strtoul_l.constprop.0+0x94>
 800e1ba:	4664      	mov	r4, ip
 800e1bc:	42a3      	cmp	r3, r4
 800e1be:	dd2a      	ble.n	800e216 <_strtoul_l.constprop.0+0xb6>
 800e1c0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e1c4:	d007      	beq.n	800e1d6 <_strtoul_l.constprop.0+0x76>
 800e1c6:	4580      	cmp	r8, r0
 800e1c8:	d322      	bcc.n	800e210 <_strtoul_l.constprop.0+0xb0>
 800e1ca:	d101      	bne.n	800e1d0 <_strtoul_l.constprop.0+0x70>
 800e1cc:	45a1      	cmp	r9, r4
 800e1ce:	db1f      	blt.n	800e210 <_strtoul_l.constprop.0+0xb0>
 800e1d0:	fb00 4003 	mla	r0, r0, r3, r4
 800e1d4:	2601      	movs	r6, #1
 800e1d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e1da:	e7e9      	b.n	800e1b0 <_strtoul_l.constprop.0+0x50>
 800e1dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800e1de:	bf04      	itt	eq
 800e1e0:	782c      	ldrbeq	r4, [r5, #0]
 800e1e2:	1c85      	addeq	r5, r0, #2
 800e1e4:	e7cd      	b.n	800e182 <_strtoul_l.constprop.0+0x22>
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d1d8      	bne.n	800e19c <_strtoul_l.constprop.0+0x3c>
 800e1ea:	2c30      	cmp	r4, #48	@ 0x30
 800e1ec:	bf0c      	ite	eq
 800e1ee:	2308      	moveq	r3, #8
 800e1f0:	230a      	movne	r3, #10
 800e1f2:	e7d3      	b.n	800e19c <_strtoul_l.constprop.0+0x3c>
 800e1f4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e1f8:	f1bc 0f19 	cmp.w	ip, #25
 800e1fc:	d801      	bhi.n	800e202 <_strtoul_l.constprop.0+0xa2>
 800e1fe:	3c37      	subs	r4, #55	@ 0x37
 800e200:	e7dc      	b.n	800e1bc <_strtoul_l.constprop.0+0x5c>
 800e202:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e206:	f1bc 0f19 	cmp.w	ip, #25
 800e20a:	d804      	bhi.n	800e216 <_strtoul_l.constprop.0+0xb6>
 800e20c:	3c57      	subs	r4, #87	@ 0x57
 800e20e:	e7d5      	b.n	800e1bc <_strtoul_l.constprop.0+0x5c>
 800e210:	f04f 36ff 	mov.w	r6, #4294967295
 800e214:	e7df      	b.n	800e1d6 <_strtoul_l.constprop.0+0x76>
 800e216:	1c73      	adds	r3, r6, #1
 800e218:	d106      	bne.n	800e228 <_strtoul_l.constprop.0+0xc8>
 800e21a:	2322      	movs	r3, #34	@ 0x22
 800e21c:	f8ce 3000 	str.w	r3, [lr]
 800e220:	4630      	mov	r0, r6
 800e222:	b932      	cbnz	r2, 800e232 <_strtoul_l.constprop.0+0xd2>
 800e224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e228:	b107      	cbz	r7, 800e22c <_strtoul_l.constprop.0+0xcc>
 800e22a:	4240      	negs	r0, r0
 800e22c:	2a00      	cmp	r2, #0
 800e22e:	d0f9      	beq.n	800e224 <_strtoul_l.constprop.0+0xc4>
 800e230:	b106      	cbz	r6, 800e234 <_strtoul_l.constprop.0+0xd4>
 800e232:	1e69      	subs	r1, r5, #1
 800e234:	6011      	str	r1, [r2, #0]
 800e236:	e7f5      	b.n	800e224 <_strtoul_l.constprop.0+0xc4>
 800e238:	08010b89 	.word	0x08010b89

0800e23c <strtoul>:
 800e23c:	4613      	mov	r3, r2
 800e23e:	460a      	mov	r2, r1
 800e240:	4601      	mov	r1, r0
 800e242:	4802      	ldr	r0, [pc, #8]	@ (800e24c <strtoul+0x10>)
 800e244:	6800      	ldr	r0, [r0, #0]
 800e246:	f7ff bf8b 	b.w	800e160 <_strtoul_l.constprop.0>
 800e24a:	bf00      	nop
 800e24c:	20000310 	.word	0x20000310

0800e250 <std>:
 800e250:	2300      	movs	r3, #0
 800e252:	b510      	push	{r4, lr}
 800e254:	4604      	mov	r4, r0
 800e256:	e9c0 3300 	strd	r3, r3, [r0]
 800e25a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e25e:	6083      	str	r3, [r0, #8]
 800e260:	8181      	strh	r1, [r0, #12]
 800e262:	6643      	str	r3, [r0, #100]	@ 0x64
 800e264:	81c2      	strh	r2, [r0, #14]
 800e266:	6183      	str	r3, [r0, #24]
 800e268:	4619      	mov	r1, r3
 800e26a:	2208      	movs	r2, #8
 800e26c:	305c      	adds	r0, #92	@ 0x5c
 800e26e:	f000 f961 	bl	800e534 <memset>
 800e272:	4b0d      	ldr	r3, [pc, #52]	@ (800e2a8 <std+0x58>)
 800e274:	6263      	str	r3, [r4, #36]	@ 0x24
 800e276:	4b0d      	ldr	r3, [pc, #52]	@ (800e2ac <std+0x5c>)
 800e278:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e27a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b0 <std+0x60>)
 800e27c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e27e:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b4 <std+0x64>)
 800e280:	6323      	str	r3, [r4, #48]	@ 0x30
 800e282:	4b0d      	ldr	r3, [pc, #52]	@ (800e2b8 <std+0x68>)
 800e284:	6224      	str	r4, [r4, #32]
 800e286:	429c      	cmp	r4, r3
 800e288:	d006      	beq.n	800e298 <std+0x48>
 800e28a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e28e:	4294      	cmp	r4, r2
 800e290:	d002      	beq.n	800e298 <std+0x48>
 800e292:	33d0      	adds	r3, #208	@ 0xd0
 800e294:	429c      	cmp	r4, r3
 800e296:	d105      	bne.n	800e2a4 <std+0x54>
 800e298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2a0:	f000 b9fe 	b.w	800e6a0 <__retarget_lock_init_recursive>
 800e2a4:	bd10      	pop	{r4, pc}
 800e2a6:	bf00      	nop
 800e2a8:	0800e43d 	.word	0x0800e43d
 800e2ac:	0800e45f 	.word	0x0800e45f
 800e2b0:	0800e497 	.word	0x0800e497
 800e2b4:	0800e4bb 	.word	0x0800e4bb
 800e2b8:	20005968 	.word	0x20005968

0800e2bc <stdio_exit_handler>:
 800e2bc:	4a02      	ldr	r2, [pc, #8]	@ (800e2c8 <stdio_exit_handler+0xc>)
 800e2be:	4903      	ldr	r1, [pc, #12]	@ (800e2cc <stdio_exit_handler+0x10>)
 800e2c0:	4803      	ldr	r0, [pc, #12]	@ (800e2d0 <stdio_exit_handler+0x14>)
 800e2c2:	f000 b869 	b.w	800e398 <_fwalk_sglue>
 800e2c6:	bf00      	nop
 800e2c8:	20000198 	.word	0x20000198
 800e2cc:	0800ffcd 	.word	0x0800ffcd
 800e2d0:	20000314 	.word	0x20000314

0800e2d4 <cleanup_stdio>:
 800e2d4:	6841      	ldr	r1, [r0, #4]
 800e2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800e308 <cleanup_stdio+0x34>)
 800e2d8:	4299      	cmp	r1, r3
 800e2da:	b510      	push	{r4, lr}
 800e2dc:	4604      	mov	r4, r0
 800e2de:	d001      	beq.n	800e2e4 <cleanup_stdio+0x10>
 800e2e0:	f001 fe74 	bl	800ffcc <_fflush_r>
 800e2e4:	68a1      	ldr	r1, [r4, #8]
 800e2e6:	4b09      	ldr	r3, [pc, #36]	@ (800e30c <cleanup_stdio+0x38>)
 800e2e8:	4299      	cmp	r1, r3
 800e2ea:	d002      	beq.n	800e2f2 <cleanup_stdio+0x1e>
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f001 fe6d 	bl	800ffcc <_fflush_r>
 800e2f2:	68e1      	ldr	r1, [r4, #12]
 800e2f4:	4b06      	ldr	r3, [pc, #24]	@ (800e310 <cleanup_stdio+0x3c>)
 800e2f6:	4299      	cmp	r1, r3
 800e2f8:	d004      	beq.n	800e304 <cleanup_stdio+0x30>
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e300:	f001 be64 	b.w	800ffcc <_fflush_r>
 800e304:	bd10      	pop	{r4, pc}
 800e306:	bf00      	nop
 800e308:	20005968 	.word	0x20005968
 800e30c:	200059d0 	.word	0x200059d0
 800e310:	20005a38 	.word	0x20005a38

0800e314 <global_stdio_init.part.0>:
 800e314:	b510      	push	{r4, lr}
 800e316:	4b0b      	ldr	r3, [pc, #44]	@ (800e344 <global_stdio_init.part.0+0x30>)
 800e318:	4c0b      	ldr	r4, [pc, #44]	@ (800e348 <global_stdio_init.part.0+0x34>)
 800e31a:	4a0c      	ldr	r2, [pc, #48]	@ (800e34c <global_stdio_init.part.0+0x38>)
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	4620      	mov	r0, r4
 800e320:	2200      	movs	r2, #0
 800e322:	2104      	movs	r1, #4
 800e324:	f7ff ff94 	bl	800e250 <std>
 800e328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e32c:	2201      	movs	r2, #1
 800e32e:	2109      	movs	r1, #9
 800e330:	f7ff ff8e 	bl	800e250 <std>
 800e334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e338:	2202      	movs	r2, #2
 800e33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e33e:	2112      	movs	r1, #18
 800e340:	f7ff bf86 	b.w	800e250 <std>
 800e344:	20005aa0 	.word	0x20005aa0
 800e348:	20005968 	.word	0x20005968
 800e34c:	0800e2bd 	.word	0x0800e2bd

0800e350 <__sfp_lock_acquire>:
 800e350:	4801      	ldr	r0, [pc, #4]	@ (800e358 <__sfp_lock_acquire+0x8>)
 800e352:	f000 b9a6 	b.w	800e6a2 <__retarget_lock_acquire_recursive>
 800e356:	bf00      	nop
 800e358:	20005aa9 	.word	0x20005aa9

0800e35c <__sfp_lock_release>:
 800e35c:	4801      	ldr	r0, [pc, #4]	@ (800e364 <__sfp_lock_release+0x8>)
 800e35e:	f000 b9a1 	b.w	800e6a4 <__retarget_lock_release_recursive>
 800e362:	bf00      	nop
 800e364:	20005aa9 	.word	0x20005aa9

0800e368 <__sinit>:
 800e368:	b510      	push	{r4, lr}
 800e36a:	4604      	mov	r4, r0
 800e36c:	f7ff fff0 	bl	800e350 <__sfp_lock_acquire>
 800e370:	6a23      	ldr	r3, [r4, #32]
 800e372:	b11b      	cbz	r3, 800e37c <__sinit+0x14>
 800e374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e378:	f7ff bff0 	b.w	800e35c <__sfp_lock_release>
 800e37c:	4b04      	ldr	r3, [pc, #16]	@ (800e390 <__sinit+0x28>)
 800e37e:	6223      	str	r3, [r4, #32]
 800e380:	4b04      	ldr	r3, [pc, #16]	@ (800e394 <__sinit+0x2c>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1f5      	bne.n	800e374 <__sinit+0xc>
 800e388:	f7ff ffc4 	bl	800e314 <global_stdio_init.part.0>
 800e38c:	e7f2      	b.n	800e374 <__sinit+0xc>
 800e38e:	bf00      	nop
 800e390:	0800e2d5 	.word	0x0800e2d5
 800e394:	20005aa0 	.word	0x20005aa0

0800e398 <_fwalk_sglue>:
 800e398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e39c:	4607      	mov	r7, r0
 800e39e:	4688      	mov	r8, r1
 800e3a0:	4614      	mov	r4, r2
 800e3a2:	2600      	movs	r6, #0
 800e3a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3a8:	f1b9 0901 	subs.w	r9, r9, #1
 800e3ac:	d505      	bpl.n	800e3ba <_fwalk_sglue+0x22>
 800e3ae:	6824      	ldr	r4, [r4, #0]
 800e3b0:	2c00      	cmp	r4, #0
 800e3b2:	d1f7      	bne.n	800e3a4 <_fwalk_sglue+0xc>
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ba:	89ab      	ldrh	r3, [r5, #12]
 800e3bc:	2b01      	cmp	r3, #1
 800e3be:	d907      	bls.n	800e3d0 <_fwalk_sglue+0x38>
 800e3c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	d003      	beq.n	800e3d0 <_fwalk_sglue+0x38>
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	4638      	mov	r0, r7
 800e3cc:	47c0      	blx	r8
 800e3ce:	4306      	orrs	r6, r0
 800e3d0:	3568      	adds	r5, #104	@ 0x68
 800e3d2:	e7e9      	b.n	800e3a8 <_fwalk_sglue+0x10>

0800e3d4 <sniprintf>:
 800e3d4:	b40c      	push	{r2, r3}
 800e3d6:	b530      	push	{r4, r5, lr}
 800e3d8:	4b17      	ldr	r3, [pc, #92]	@ (800e438 <sniprintf+0x64>)
 800e3da:	1e0c      	subs	r4, r1, #0
 800e3dc:	681d      	ldr	r5, [r3, #0]
 800e3de:	b09d      	sub	sp, #116	@ 0x74
 800e3e0:	da08      	bge.n	800e3f4 <sniprintf+0x20>
 800e3e2:	238b      	movs	r3, #139	@ 0x8b
 800e3e4:	602b      	str	r3, [r5, #0]
 800e3e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ea:	b01d      	add	sp, #116	@ 0x74
 800e3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3f0:	b002      	add	sp, #8
 800e3f2:	4770      	bx	lr
 800e3f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e3f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e3fc:	bf14      	ite	ne
 800e3fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e402:	4623      	moveq	r3, r4
 800e404:	9304      	str	r3, [sp, #16]
 800e406:	9307      	str	r3, [sp, #28]
 800e408:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e40c:	9002      	str	r0, [sp, #8]
 800e40e:	9006      	str	r0, [sp, #24]
 800e410:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e414:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e416:	ab21      	add	r3, sp, #132	@ 0x84
 800e418:	a902      	add	r1, sp, #8
 800e41a:	4628      	mov	r0, r5
 800e41c:	9301      	str	r3, [sp, #4]
 800e41e:	f001 fac7 	bl	800f9b0 <_svfiprintf_r>
 800e422:	1c43      	adds	r3, r0, #1
 800e424:	bfbc      	itt	lt
 800e426:	238b      	movlt	r3, #139	@ 0x8b
 800e428:	602b      	strlt	r3, [r5, #0]
 800e42a:	2c00      	cmp	r4, #0
 800e42c:	d0dd      	beq.n	800e3ea <sniprintf+0x16>
 800e42e:	9b02      	ldr	r3, [sp, #8]
 800e430:	2200      	movs	r2, #0
 800e432:	701a      	strb	r2, [r3, #0]
 800e434:	e7d9      	b.n	800e3ea <sniprintf+0x16>
 800e436:	bf00      	nop
 800e438:	20000310 	.word	0x20000310

0800e43c <__sread>:
 800e43c:	b510      	push	{r4, lr}
 800e43e:	460c      	mov	r4, r1
 800e440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e444:	f000 f8de 	bl	800e604 <_read_r>
 800e448:	2800      	cmp	r0, #0
 800e44a:	bfab      	itete	ge
 800e44c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e44e:	89a3      	ldrhlt	r3, [r4, #12]
 800e450:	181b      	addge	r3, r3, r0
 800e452:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e456:	bfac      	ite	ge
 800e458:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e45a:	81a3      	strhlt	r3, [r4, #12]
 800e45c:	bd10      	pop	{r4, pc}

0800e45e <__swrite>:
 800e45e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e462:	461f      	mov	r7, r3
 800e464:	898b      	ldrh	r3, [r1, #12]
 800e466:	05db      	lsls	r3, r3, #23
 800e468:	4605      	mov	r5, r0
 800e46a:	460c      	mov	r4, r1
 800e46c:	4616      	mov	r6, r2
 800e46e:	d505      	bpl.n	800e47c <__swrite+0x1e>
 800e470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e474:	2302      	movs	r3, #2
 800e476:	2200      	movs	r2, #0
 800e478:	f000 f8b2 	bl	800e5e0 <_lseek_r>
 800e47c:	89a3      	ldrh	r3, [r4, #12]
 800e47e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e482:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e486:	81a3      	strh	r3, [r4, #12]
 800e488:	4632      	mov	r2, r6
 800e48a:	463b      	mov	r3, r7
 800e48c:	4628      	mov	r0, r5
 800e48e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e492:	f000 b8c9 	b.w	800e628 <_write_r>

0800e496 <__sseek>:
 800e496:	b510      	push	{r4, lr}
 800e498:	460c      	mov	r4, r1
 800e49a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e49e:	f000 f89f 	bl	800e5e0 <_lseek_r>
 800e4a2:	1c43      	adds	r3, r0, #1
 800e4a4:	89a3      	ldrh	r3, [r4, #12]
 800e4a6:	bf15      	itete	ne
 800e4a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e4aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e4ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e4b2:	81a3      	strheq	r3, [r4, #12]
 800e4b4:	bf18      	it	ne
 800e4b6:	81a3      	strhne	r3, [r4, #12]
 800e4b8:	bd10      	pop	{r4, pc}

0800e4ba <__sclose>:
 800e4ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4be:	f000 b87f 	b.w	800e5c0 <_close_r>

0800e4c2 <_vsniprintf_r>:
 800e4c2:	b530      	push	{r4, r5, lr}
 800e4c4:	4614      	mov	r4, r2
 800e4c6:	2c00      	cmp	r4, #0
 800e4c8:	b09b      	sub	sp, #108	@ 0x6c
 800e4ca:	4605      	mov	r5, r0
 800e4cc:	461a      	mov	r2, r3
 800e4ce:	da05      	bge.n	800e4dc <_vsniprintf_r+0x1a>
 800e4d0:	238b      	movs	r3, #139	@ 0x8b
 800e4d2:	6003      	str	r3, [r0, #0]
 800e4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4d8:	b01b      	add	sp, #108	@ 0x6c
 800e4da:	bd30      	pop	{r4, r5, pc}
 800e4dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e4e0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e4e4:	bf14      	ite	ne
 800e4e6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e4ea:	4623      	moveq	r3, r4
 800e4ec:	9302      	str	r3, [sp, #8]
 800e4ee:	9305      	str	r3, [sp, #20]
 800e4f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e4f4:	9100      	str	r1, [sp, #0]
 800e4f6:	9104      	str	r1, [sp, #16]
 800e4f8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800e4fc:	4669      	mov	r1, sp
 800e4fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e500:	f001 fa56 	bl	800f9b0 <_svfiprintf_r>
 800e504:	1c43      	adds	r3, r0, #1
 800e506:	bfbc      	itt	lt
 800e508:	238b      	movlt	r3, #139	@ 0x8b
 800e50a:	602b      	strlt	r3, [r5, #0]
 800e50c:	2c00      	cmp	r4, #0
 800e50e:	d0e3      	beq.n	800e4d8 <_vsniprintf_r+0x16>
 800e510:	9b00      	ldr	r3, [sp, #0]
 800e512:	2200      	movs	r2, #0
 800e514:	701a      	strb	r2, [r3, #0]
 800e516:	e7df      	b.n	800e4d8 <_vsniprintf_r+0x16>

0800e518 <vsniprintf>:
 800e518:	b507      	push	{r0, r1, r2, lr}
 800e51a:	9300      	str	r3, [sp, #0]
 800e51c:	4613      	mov	r3, r2
 800e51e:	460a      	mov	r2, r1
 800e520:	4601      	mov	r1, r0
 800e522:	4803      	ldr	r0, [pc, #12]	@ (800e530 <vsniprintf+0x18>)
 800e524:	6800      	ldr	r0, [r0, #0]
 800e526:	f7ff ffcc 	bl	800e4c2 <_vsniprintf_r>
 800e52a:	b003      	add	sp, #12
 800e52c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e530:	20000310 	.word	0x20000310

0800e534 <memset>:
 800e534:	4402      	add	r2, r0
 800e536:	4603      	mov	r3, r0
 800e538:	4293      	cmp	r3, r2
 800e53a:	d100      	bne.n	800e53e <memset+0xa>
 800e53c:	4770      	bx	lr
 800e53e:	f803 1b01 	strb.w	r1, [r3], #1
 800e542:	e7f9      	b.n	800e538 <memset+0x4>

0800e544 <strncmp>:
 800e544:	b510      	push	{r4, lr}
 800e546:	b16a      	cbz	r2, 800e564 <strncmp+0x20>
 800e548:	3901      	subs	r1, #1
 800e54a:	1884      	adds	r4, r0, r2
 800e54c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e550:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e554:	429a      	cmp	r2, r3
 800e556:	d103      	bne.n	800e560 <strncmp+0x1c>
 800e558:	42a0      	cmp	r0, r4
 800e55a:	d001      	beq.n	800e560 <strncmp+0x1c>
 800e55c:	2a00      	cmp	r2, #0
 800e55e:	d1f5      	bne.n	800e54c <strncmp+0x8>
 800e560:	1ad0      	subs	r0, r2, r3
 800e562:	bd10      	pop	{r4, pc}
 800e564:	4610      	mov	r0, r2
 800e566:	e7fc      	b.n	800e562 <strncmp+0x1e>

0800e568 <__strtok_r>:
 800e568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e56a:	4604      	mov	r4, r0
 800e56c:	b908      	cbnz	r0, 800e572 <__strtok_r+0xa>
 800e56e:	6814      	ldr	r4, [r2, #0]
 800e570:	b144      	cbz	r4, 800e584 <__strtok_r+0x1c>
 800e572:	4620      	mov	r0, r4
 800e574:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e578:	460f      	mov	r7, r1
 800e57a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e57e:	b91e      	cbnz	r6, 800e588 <__strtok_r+0x20>
 800e580:	b965      	cbnz	r5, 800e59c <__strtok_r+0x34>
 800e582:	6015      	str	r5, [r2, #0]
 800e584:	2000      	movs	r0, #0
 800e586:	e005      	b.n	800e594 <__strtok_r+0x2c>
 800e588:	42b5      	cmp	r5, r6
 800e58a:	d1f6      	bne.n	800e57a <__strtok_r+0x12>
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d1f0      	bne.n	800e572 <__strtok_r+0xa>
 800e590:	6014      	str	r4, [r2, #0]
 800e592:	7003      	strb	r3, [r0, #0]
 800e594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e596:	461c      	mov	r4, r3
 800e598:	e00c      	b.n	800e5b4 <__strtok_r+0x4c>
 800e59a:	b915      	cbnz	r5, 800e5a2 <__strtok_r+0x3a>
 800e59c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e5a0:	460e      	mov	r6, r1
 800e5a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e5a6:	42ab      	cmp	r3, r5
 800e5a8:	d1f7      	bne.n	800e59a <__strtok_r+0x32>
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d0f3      	beq.n	800e596 <__strtok_r+0x2e>
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e5b4:	6014      	str	r4, [r2, #0]
 800e5b6:	e7ed      	b.n	800e594 <__strtok_r+0x2c>

0800e5b8 <strtok_r>:
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	f7ff bfd5 	b.w	800e568 <__strtok_r>
	...

0800e5c0 <_close_r>:
 800e5c0:	b538      	push	{r3, r4, r5, lr}
 800e5c2:	4d06      	ldr	r5, [pc, #24]	@ (800e5dc <_close_r+0x1c>)
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	4604      	mov	r4, r0
 800e5c8:	4608      	mov	r0, r1
 800e5ca:	602b      	str	r3, [r5, #0]
 800e5cc:	f7f5 f9b2 	bl	8003934 <_close>
 800e5d0:	1c43      	adds	r3, r0, #1
 800e5d2:	d102      	bne.n	800e5da <_close_r+0x1a>
 800e5d4:	682b      	ldr	r3, [r5, #0]
 800e5d6:	b103      	cbz	r3, 800e5da <_close_r+0x1a>
 800e5d8:	6023      	str	r3, [r4, #0]
 800e5da:	bd38      	pop	{r3, r4, r5, pc}
 800e5dc:	20005aa4 	.word	0x20005aa4

0800e5e0 <_lseek_r>:
 800e5e0:	b538      	push	{r3, r4, r5, lr}
 800e5e2:	4d07      	ldr	r5, [pc, #28]	@ (800e600 <_lseek_r+0x20>)
 800e5e4:	4604      	mov	r4, r0
 800e5e6:	4608      	mov	r0, r1
 800e5e8:	4611      	mov	r1, r2
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	602a      	str	r2, [r5, #0]
 800e5ee:	461a      	mov	r2, r3
 800e5f0:	f7f5 f9c7 	bl	8003982 <_lseek>
 800e5f4:	1c43      	adds	r3, r0, #1
 800e5f6:	d102      	bne.n	800e5fe <_lseek_r+0x1e>
 800e5f8:	682b      	ldr	r3, [r5, #0]
 800e5fa:	b103      	cbz	r3, 800e5fe <_lseek_r+0x1e>
 800e5fc:	6023      	str	r3, [r4, #0]
 800e5fe:	bd38      	pop	{r3, r4, r5, pc}
 800e600:	20005aa4 	.word	0x20005aa4

0800e604 <_read_r>:
 800e604:	b538      	push	{r3, r4, r5, lr}
 800e606:	4d07      	ldr	r5, [pc, #28]	@ (800e624 <_read_r+0x20>)
 800e608:	4604      	mov	r4, r0
 800e60a:	4608      	mov	r0, r1
 800e60c:	4611      	mov	r1, r2
 800e60e:	2200      	movs	r2, #0
 800e610:	602a      	str	r2, [r5, #0]
 800e612:	461a      	mov	r2, r3
 800e614:	f7f5 f955 	bl	80038c2 <_read>
 800e618:	1c43      	adds	r3, r0, #1
 800e61a:	d102      	bne.n	800e622 <_read_r+0x1e>
 800e61c:	682b      	ldr	r3, [r5, #0]
 800e61e:	b103      	cbz	r3, 800e622 <_read_r+0x1e>
 800e620:	6023      	str	r3, [r4, #0]
 800e622:	bd38      	pop	{r3, r4, r5, pc}
 800e624:	20005aa4 	.word	0x20005aa4

0800e628 <_write_r>:
 800e628:	b538      	push	{r3, r4, r5, lr}
 800e62a:	4d07      	ldr	r5, [pc, #28]	@ (800e648 <_write_r+0x20>)
 800e62c:	4604      	mov	r4, r0
 800e62e:	4608      	mov	r0, r1
 800e630:	4611      	mov	r1, r2
 800e632:	2200      	movs	r2, #0
 800e634:	602a      	str	r2, [r5, #0]
 800e636:	461a      	mov	r2, r3
 800e638:	f7f5 f960 	bl	80038fc <_write>
 800e63c:	1c43      	adds	r3, r0, #1
 800e63e:	d102      	bne.n	800e646 <_write_r+0x1e>
 800e640:	682b      	ldr	r3, [r5, #0]
 800e642:	b103      	cbz	r3, 800e646 <_write_r+0x1e>
 800e644:	6023      	str	r3, [r4, #0]
 800e646:	bd38      	pop	{r3, r4, r5, pc}
 800e648:	20005aa4 	.word	0x20005aa4

0800e64c <__errno>:
 800e64c:	4b01      	ldr	r3, [pc, #4]	@ (800e654 <__errno+0x8>)
 800e64e:	6818      	ldr	r0, [r3, #0]
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	20000310 	.word	0x20000310

0800e658 <__libc_init_array>:
 800e658:	b570      	push	{r4, r5, r6, lr}
 800e65a:	4d0d      	ldr	r5, [pc, #52]	@ (800e690 <__libc_init_array+0x38>)
 800e65c:	4c0d      	ldr	r4, [pc, #52]	@ (800e694 <__libc_init_array+0x3c>)
 800e65e:	1b64      	subs	r4, r4, r5
 800e660:	10a4      	asrs	r4, r4, #2
 800e662:	2600      	movs	r6, #0
 800e664:	42a6      	cmp	r6, r4
 800e666:	d109      	bne.n	800e67c <__libc_init_array+0x24>
 800e668:	4d0b      	ldr	r5, [pc, #44]	@ (800e698 <__libc_init_array+0x40>)
 800e66a:	4c0c      	ldr	r4, [pc, #48]	@ (800e69c <__libc_init_array+0x44>)
 800e66c:	f002 f826 	bl	80106bc <_init>
 800e670:	1b64      	subs	r4, r4, r5
 800e672:	10a4      	asrs	r4, r4, #2
 800e674:	2600      	movs	r6, #0
 800e676:	42a6      	cmp	r6, r4
 800e678:	d105      	bne.n	800e686 <__libc_init_array+0x2e>
 800e67a:	bd70      	pop	{r4, r5, r6, pc}
 800e67c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e680:	4798      	blx	r3
 800e682:	3601      	adds	r6, #1
 800e684:	e7ee      	b.n	800e664 <__libc_init_array+0xc>
 800e686:	f855 3b04 	ldr.w	r3, [r5], #4
 800e68a:	4798      	blx	r3
 800e68c:	3601      	adds	r6, #1
 800e68e:	e7f2      	b.n	800e676 <__libc_init_array+0x1e>
 800e690:	08010ee8 	.word	0x08010ee8
 800e694:	08010ee8 	.word	0x08010ee8
 800e698:	08010ee8 	.word	0x08010ee8
 800e69c:	08010eec 	.word	0x08010eec

0800e6a0 <__retarget_lock_init_recursive>:
 800e6a0:	4770      	bx	lr

0800e6a2 <__retarget_lock_acquire_recursive>:
 800e6a2:	4770      	bx	lr

0800e6a4 <__retarget_lock_release_recursive>:
 800e6a4:	4770      	bx	lr

0800e6a6 <strcpy>:
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6ac:	f803 2b01 	strb.w	r2, [r3], #1
 800e6b0:	2a00      	cmp	r2, #0
 800e6b2:	d1f9      	bne.n	800e6a8 <strcpy+0x2>
 800e6b4:	4770      	bx	lr

0800e6b6 <memcpy>:
 800e6b6:	440a      	add	r2, r1
 800e6b8:	4291      	cmp	r1, r2
 800e6ba:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6be:	d100      	bne.n	800e6c2 <memcpy+0xc>
 800e6c0:	4770      	bx	lr
 800e6c2:	b510      	push	{r4, lr}
 800e6c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6cc:	4291      	cmp	r1, r2
 800e6ce:	d1f9      	bne.n	800e6c4 <memcpy+0xe>
 800e6d0:	bd10      	pop	{r4, pc}
 800e6d2:	0000      	movs	r0, r0
 800e6d4:	0000      	movs	r0, r0
	...

0800e6d8 <nan>:
 800e6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e6e0 <nan+0x8>
 800e6dc:	4770      	bx	lr
 800e6de:	bf00      	nop
 800e6e0:	00000000 	.word	0x00000000
 800e6e4:	7ff80000 	.word	0x7ff80000

0800e6e8 <nanf>:
 800e6e8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e6f0 <nanf+0x8>
 800e6ec:	4770      	bx	lr
 800e6ee:	bf00      	nop
 800e6f0:	7fc00000 	.word	0x7fc00000

0800e6f4 <_free_r>:
 800e6f4:	b538      	push	{r3, r4, r5, lr}
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	2900      	cmp	r1, #0
 800e6fa:	d041      	beq.n	800e780 <_free_r+0x8c>
 800e6fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e700:	1f0c      	subs	r4, r1, #4
 800e702:	2b00      	cmp	r3, #0
 800e704:	bfb8      	it	lt
 800e706:	18e4      	addlt	r4, r4, r3
 800e708:	f000 fc2c 	bl	800ef64 <__malloc_lock>
 800e70c:	4a1d      	ldr	r2, [pc, #116]	@ (800e784 <_free_r+0x90>)
 800e70e:	6813      	ldr	r3, [r2, #0]
 800e710:	b933      	cbnz	r3, 800e720 <_free_r+0x2c>
 800e712:	6063      	str	r3, [r4, #4]
 800e714:	6014      	str	r4, [r2, #0]
 800e716:	4628      	mov	r0, r5
 800e718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e71c:	f000 bc28 	b.w	800ef70 <__malloc_unlock>
 800e720:	42a3      	cmp	r3, r4
 800e722:	d908      	bls.n	800e736 <_free_r+0x42>
 800e724:	6820      	ldr	r0, [r4, #0]
 800e726:	1821      	adds	r1, r4, r0
 800e728:	428b      	cmp	r3, r1
 800e72a:	bf01      	itttt	eq
 800e72c:	6819      	ldreq	r1, [r3, #0]
 800e72e:	685b      	ldreq	r3, [r3, #4]
 800e730:	1809      	addeq	r1, r1, r0
 800e732:	6021      	streq	r1, [r4, #0]
 800e734:	e7ed      	b.n	800e712 <_free_r+0x1e>
 800e736:	461a      	mov	r2, r3
 800e738:	685b      	ldr	r3, [r3, #4]
 800e73a:	b10b      	cbz	r3, 800e740 <_free_r+0x4c>
 800e73c:	42a3      	cmp	r3, r4
 800e73e:	d9fa      	bls.n	800e736 <_free_r+0x42>
 800e740:	6811      	ldr	r1, [r2, #0]
 800e742:	1850      	adds	r0, r2, r1
 800e744:	42a0      	cmp	r0, r4
 800e746:	d10b      	bne.n	800e760 <_free_r+0x6c>
 800e748:	6820      	ldr	r0, [r4, #0]
 800e74a:	4401      	add	r1, r0
 800e74c:	1850      	adds	r0, r2, r1
 800e74e:	4283      	cmp	r3, r0
 800e750:	6011      	str	r1, [r2, #0]
 800e752:	d1e0      	bne.n	800e716 <_free_r+0x22>
 800e754:	6818      	ldr	r0, [r3, #0]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	6053      	str	r3, [r2, #4]
 800e75a:	4408      	add	r0, r1
 800e75c:	6010      	str	r0, [r2, #0]
 800e75e:	e7da      	b.n	800e716 <_free_r+0x22>
 800e760:	d902      	bls.n	800e768 <_free_r+0x74>
 800e762:	230c      	movs	r3, #12
 800e764:	602b      	str	r3, [r5, #0]
 800e766:	e7d6      	b.n	800e716 <_free_r+0x22>
 800e768:	6820      	ldr	r0, [r4, #0]
 800e76a:	1821      	adds	r1, r4, r0
 800e76c:	428b      	cmp	r3, r1
 800e76e:	bf04      	itt	eq
 800e770:	6819      	ldreq	r1, [r3, #0]
 800e772:	685b      	ldreq	r3, [r3, #4]
 800e774:	6063      	str	r3, [r4, #4]
 800e776:	bf04      	itt	eq
 800e778:	1809      	addeq	r1, r1, r0
 800e77a:	6021      	streq	r1, [r4, #0]
 800e77c:	6054      	str	r4, [r2, #4]
 800e77e:	e7ca      	b.n	800e716 <_free_r+0x22>
 800e780:	bd38      	pop	{r3, r4, r5, pc}
 800e782:	bf00      	nop
 800e784:	20005ab0 	.word	0x20005ab0

0800e788 <rshift>:
 800e788:	6903      	ldr	r3, [r0, #16]
 800e78a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e78e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e792:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e796:	f100 0414 	add.w	r4, r0, #20
 800e79a:	dd45      	ble.n	800e828 <rshift+0xa0>
 800e79c:	f011 011f 	ands.w	r1, r1, #31
 800e7a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e7a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e7a8:	d10c      	bne.n	800e7c4 <rshift+0x3c>
 800e7aa:	f100 0710 	add.w	r7, r0, #16
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	42b1      	cmp	r1, r6
 800e7b2:	d334      	bcc.n	800e81e <rshift+0x96>
 800e7b4:	1a9b      	subs	r3, r3, r2
 800e7b6:	009b      	lsls	r3, r3, #2
 800e7b8:	1eea      	subs	r2, r5, #3
 800e7ba:	4296      	cmp	r6, r2
 800e7bc:	bf38      	it	cc
 800e7be:	2300      	movcc	r3, #0
 800e7c0:	4423      	add	r3, r4
 800e7c2:	e015      	b.n	800e7f0 <rshift+0x68>
 800e7c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e7c8:	f1c1 0820 	rsb	r8, r1, #32
 800e7cc:	40cf      	lsrs	r7, r1
 800e7ce:	f105 0e04 	add.w	lr, r5, #4
 800e7d2:	46a1      	mov	r9, r4
 800e7d4:	4576      	cmp	r6, lr
 800e7d6:	46f4      	mov	ip, lr
 800e7d8:	d815      	bhi.n	800e806 <rshift+0x7e>
 800e7da:	1a9a      	subs	r2, r3, r2
 800e7dc:	0092      	lsls	r2, r2, #2
 800e7de:	3a04      	subs	r2, #4
 800e7e0:	3501      	adds	r5, #1
 800e7e2:	42ae      	cmp	r6, r5
 800e7e4:	bf38      	it	cc
 800e7e6:	2200      	movcc	r2, #0
 800e7e8:	18a3      	adds	r3, r4, r2
 800e7ea:	50a7      	str	r7, [r4, r2]
 800e7ec:	b107      	cbz	r7, 800e7f0 <rshift+0x68>
 800e7ee:	3304      	adds	r3, #4
 800e7f0:	1b1a      	subs	r2, r3, r4
 800e7f2:	42a3      	cmp	r3, r4
 800e7f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e7f8:	bf08      	it	eq
 800e7fa:	2300      	moveq	r3, #0
 800e7fc:	6102      	str	r2, [r0, #16]
 800e7fe:	bf08      	it	eq
 800e800:	6143      	streq	r3, [r0, #20]
 800e802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e806:	f8dc c000 	ldr.w	ip, [ip]
 800e80a:	fa0c fc08 	lsl.w	ip, ip, r8
 800e80e:	ea4c 0707 	orr.w	r7, ip, r7
 800e812:	f849 7b04 	str.w	r7, [r9], #4
 800e816:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e81a:	40cf      	lsrs	r7, r1
 800e81c:	e7da      	b.n	800e7d4 <rshift+0x4c>
 800e81e:	f851 cb04 	ldr.w	ip, [r1], #4
 800e822:	f847 cf04 	str.w	ip, [r7, #4]!
 800e826:	e7c3      	b.n	800e7b0 <rshift+0x28>
 800e828:	4623      	mov	r3, r4
 800e82a:	e7e1      	b.n	800e7f0 <rshift+0x68>

0800e82c <__hexdig_fun>:
 800e82c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e830:	2b09      	cmp	r3, #9
 800e832:	d802      	bhi.n	800e83a <__hexdig_fun+0xe>
 800e834:	3820      	subs	r0, #32
 800e836:	b2c0      	uxtb	r0, r0
 800e838:	4770      	bx	lr
 800e83a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e83e:	2b05      	cmp	r3, #5
 800e840:	d801      	bhi.n	800e846 <__hexdig_fun+0x1a>
 800e842:	3847      	subs	r0, #71	@ 0x47
 800e844:	e7f7      	b.n	800e836 <__hexdig_fun+0xa>
 800e846:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e84a:	2b05      	cmp	r3, #5
 800e84c:	d801      	bhi.n	800e852 <__hexdig_fun+0x26>
 800e84e:	3827      	subs	r0, #39	@ 0x27
 800e850:	e7f1      	b.n	800e836 <__hexdig_fun+0xa>
 800e852:	2000      	movs	r0, #0
 800e854:	4770      	bx	lr
	...

0800e858 <__gethex>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	b085      	sub	sp, #20
 800e85e:	468a      	mov	sl, r1
 800e860:	9302      	str	r3, [sp, #8]
 800e862:	680b      	ldr	r3, [r1, #0]
 800e864:	9001      	str	r0, [sp, #4]
 800e866:	4690      	mov	r8, r2
 800e868:	1c9c      	adds	r4, r3, #2
 800e86a:	46a1      	mov	r9, r4
 800e86c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e870:	2830      	cmp	r0, #48	@ 0x30
 800e872:	d0fa      	beq.n	800e86a <__gethex+0x12>
 800e874:	eba9 0303 	sub.w	r3, r9, r3
 800e878:	f1a3 0b02 	sub.w	fp, r3, #2
 800e87c:	f7ff ffd6 	bl	800e82c <__hexdig_fun>
 800e880:	4605      	mov	r5, r0
 800e882:	2800      	cmp	r0, #0
 800e884:	d168      	bne.n	800e958 <__gethex+0x100>
 800e886:	49a0      	ldr	r1, [pc, #640]	@ (800eb08 <__gethex+0x2b0>)
 800e888:	2201      	movs	r2, #1
 800e88a:	4648      	mov	r0, r9
 800e88c:	f7ff fe5a 	bl	800e544 <strncmp>
 800e890:	4607      	mov	r7, r0
 800e892:	2800      	cmp	r0, #0
 800e894:	d167      	bne.n	800e966 <__gethex+0x10e>
 800e896:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e89a:	4626      	mov	r6, r4
 800e89c:	f7ff ffc6 	bl	800e82c <__hexdig_fun>
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d062      	beq.n	800e96a <__gethex+0x112>
 800e8a4:	4623      	mov	r3, r4
 800e8a6:	7818      	ldrb	r0, [r3, #0]
 800e8a8:	2830      	cmp	r0, #48	@ 0x30
 800e8aa:	4699      	mov	r9, r3
 800e8ac:	f103 0301 	add.w	r3, r3, #1
 800e8b0:	d0f9      	beq.n	800e8a6 <__gethex+0x4e>
 800e8b2:	f7ff ffbb 	bl	800e82c <__hexdig_fun>
 800e8b6:	fab0 f580 	clz	r5, r0
 800e8ba:	096d      	lsrs	r5, r5, #5
 800e8bc:	f04f 0b01 	mov.w	fp, #1
 800e8c0:	464a      	mov	r2, r9
 800e8c2:	4616      	mov	r6, r2
 800e8c4:	3201      	adds	r2, #1
 800e8c6:	7830      	ldrb	r0, [r6, #0]
 800e8c8:	f7ff ffb0 	bl	800e82c <__hexdig_fun>
 800e8cc:	2800      	cmp	r0, #0
 800e8ce:	d1f8      	bne.n	800e8c2 <__gethex+0x6a>
 800e8d0:	498d      	ldr	r1, [pc, #564]	@ (800eb08 <__gethex+0x2b0>)
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	f7ff fe35 	bl	800e544 <strncmp>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d13f      	bne.n	800e95e <__gethex+0x106>
 800e8de:	b944      	cbnz	r4, 800e8f2 <__gethex+0x9a>
 800e8e0:	1c74      	adds	r4, r6, #1
 800e8e2:	4622      	mov	r2, r4
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	3201      	adds	r2, #1
 800e8e8:	7830      	ldrb	r0, [r6, #0]
 800e8ea:	f7ff ff9f 	bl	800e82c <__hexdig_fun>
 800e8ee:	2800      	cmp	r0, #0
 800e8f0:	d1f8      	bne.n	800e8e4 <__gethex+0x8c>
 800e8f2:	1ba4      	subs	r4, r4, r6
 800e8f4:	00a7      	lsls	r7, r4, #2
 800e8f6:	7833      	ldrb	r3, [r6, #0]
 800e8f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e8fc:	2b50      	cmp	r3, #80	@ 0x50
 800e8fe:	d13e      	bne.n	800e97e <__gethex+0x126>
 800e900:	7873      	ldrb	r3, [r6, #1]
 800e902:	2b2b      	cmp	r3, #43	@ 0x2b
 800e904:	d033      	beq.n	800e96e <__gethex+0x116>
 800e906:	2b2d      	cmp	r3, #45	@ 0x2d
 800e908:	d034      	beq.n	800e974 <__gethex+0x11c>
 800e90a:	1c71      	adds	r1, r6, #1
 800e90c:	2400      	movs	r4, #0
 800e90e:	7808      	ldrb	r0, [r1, #0]
 800e910:	f7ff ff8c 	bl	800e82c <__hexdig_fun>
 800e914:	1e43      	subs	r3, r0, #1
 800e916:	b2db      	uxtb	r3, r3
 800e918:	2b18      	cmp	r3, #24
 800e91a:	d830      	bhi.n	800e97e <__gethex+0x126>
 800e91c:	f1a0 0210 	sub.w	r2, r0, #16
 800e920:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e924:	f7ff ff82 	bl	800e82c <__hexdig_fun>
 800e928:	f100 3cff 	add.w	ip, r0, #4294967295
 800e92c:	fa5f fc8c 	uxtb.w	ip, ip
 800e930:	f1bc 0f18 	cmp.w	ip, #24
 800e934:	f04f 030a 	mov.w	r3, #10
 800e938:	d91e      	bls.n	800e978 <__gethex+0x120>
 800e93a:	b104      	cbz	r4, 800e93e <__gethex+0xe6>
 800e93c:	4252      	negs	r2, r2
 800e93e:	4417      	add	r7, r2
 800e940:	f8ca 1000 	str.w	r1, [sl]
 800e944:	b1ed      	cbz	r5, 800e982 <__gethex+0x12a>
 800e946:	f1bb 0f00 	cmp.w	fp, #0
 800e94a:	bf0c      	ite	eq
 800e94c:	2506      	moveq	r5, #6
 800e94e:	2500      	movne	r5, #0
 800e950:	4628      	mov	r0, r5
 800e952:	b005      	add	sp, #20
 800e954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e958:	2500      	movs	r5, #0
 800e95a:	462c      	mov	r4, r5
 800e95c:	e7b0      	b.n	800e8c0 <__gethex+0x68>
 800e95e:	2c00      	cmp	r4, #0
 800e960:	d1c7      	bne.n	800e8f2 <__gethex+0x9a>
 800e962:	4627      	mov	r7, r4
 800e964:	e7c7      	b.n	800e8f6 <__gethex+0x9e>
 800e966:	464e      	mov	r6, r9
 800e968:	462f      	mov	r7, r5
 800e96a:	2501      	movs	r5, #1
 800e96c:	e7c3      	b.n	800e8f6 <__gethex+0x9e>
 800e96e:	2400      	movs	r4, #0
 800e970:	1cb1      	adds	r1, r6, #2
 800e972:	e7cc      	b.n	800e90e <__gethex+0xb6>
 800e974:	2401      	movs	r4, #1
 800e976:	e7fb      	b.n	800e970 <__gethex+0x118>
 800e978:	fb03 0002 	mla	r0, r3, r2, r0
 800e97c:	e7ce      	b.n	800e91c <__gethex+0xc4>
 800e97e:	4631      	mov	r1, r6
 800e980:	e7de      	b.n	800e940 <__gethex+0xe8>
 800e982:	eba6 0309 	sub.w	r3, r6, r9
 800e986:	3b01      	subs	r3, #1
 800e988:	4629      	mov	r1, r5
 800e98a:	2b07      	cmp	r3, #7
 800e98c:	dc0a      	bgt.n	800e9a4 <__gethex+0x14c>
 800e98e:	9801      	ldr	r0, [sp, #4]
 800e990:	f000 faf4 	bl	800ef7c <_Balloc>
 800e994:	4604      	mov	r4, r0
 800e996:	b940      	cbnz	r0, 800e9aa <__gethex+0x152>
 800e998:	4b5c      	ldr	r3, [pc, #368]	@ (800eb0c <__gethex+0x2b4>)
 800e99a:	4602      	mov	r2, r0
 800e99c:	21e4      	movs	r1, #228	@ 0xe4
 800e99e:	485c      	ldr	r0, [pc, #368]	@ (800eb10 <__gethex+0x2b8>)
 800e9a0:	f001 fb66 	bl	8010070 <__assert_func>
 800e9a4:	3101      	adds	r1, #1
 800e9a6:	105b      	asrs	r3, r3, #1
 800e9a8:	e7ef      	b.n	800e98a <__gethex+0x132>
 800e9aa:	f100 0a14 	add.w	sl, r0, #20
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	4655      	mov	r5, sl
 800e9b2:	469b      	mov	fp, r3
 800e9b4:	45b1      	cmp	r9, r6
 800e9b6:	d337      	bcc.n	800ea28 <__gethex+0x1d0>
 800e9b8:	f845 bb04 	str.w	fp, [r5], #4
 800e9bc:	eba5 050a 	sub.w	r5, r5, sl
 800e9c0:	10ad      	asrs	r5, r5, #2
 800e9c2:	6125      	str	r5, [r4, #16]
 800e9c4:	4658      	mov	r0, fp
 800e9c6:	f000 fbcb 	bl	800f160 <__hi0bits>
 800e9ca:	016d      	lsls	r5, r5, #5
 800e9cc:	f8d8 6000 	ldr.w	r6, [r8]
 800e9d0:	1a2d      	subs	r5, r5, r0
 800e9d2:	42b5      	cmp	r5, r6
 800e9d4:	dd54      	ble.n	800ea80 <__gethex+0x228>
 800e9d6:	1bad      	subs	r5, r5, r6
 800e9d8:	4629      	mov	r1, r5
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f000 ff5f 	bl	800f89e <__any_on>
 800e9e0:	4681      	mov	r9, r0
 800e9e2:	b178      	cbz	r0, 800ea04 <__gethex+0x1ac>
 800e9e4:	1e6b      	subs	r3, r5, #1
 800e9e6:	1159      	asrs	r1, r3, #5
 800e9e8:	f003 021f 	and.w	r2, r3, #31
 800e9ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e9f0:	f04f 0901 	mov.w	r9, #1
 800e9f4:	fa09 f202 	lsl.w	r2, r9, r2
 800e9f8:	420a      	tst	r2, r1
 800e9fa:	d003      	beq.n	800ea04 <__gethex+0x1ac>
 800e9fc:	454b      	cmp	r3, r9
 800e9fe:	dc36      	bgt.n	800ea6e <__gethex+0x216>
 800ea00:	f04f 0902 	mov.w	r9, #2
 800ea04:	4629      	mov	r1, r5
 800ea06:	4620      	mov	r0, r4
 800ea08:	f7ff febe 	bl	800e788 <rshift>
 800ea0c:	442f      	add	r7, r5
 800ea0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea12:	42bb      	cmp	r3, r7
 800ea14:	da42      	bge.n	800ea9c <__gethex+0x244>
 800ea16:	9801      	ldr	r0, [sp, #4]
 800ea18:	4621      	mov	r1, r4
 800ea1a:	f000 faef 	bl	800effc <_Bfree>
 800ea1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea20:	2300      	movs	r3, #0
 800ea22:	6013      	str	r3, [r2, #0]
 800ea24:	25a3      	movs	r5, #163	@ 0xa3
 800ea26:	e793      	b.n	800e950 <__gethex+0xf8>
 800ea28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ea2c:	2a2e      	cmp	r2, #46	@ 0x2e
 800ea2e:	d012      	beq.n	800ea56 <__gethex+0x1fe>
 800ea30:	2b20      	cmp	r3, #32
 800ea32:	d104      	bne.n	800ea3e <__gethex+0x1e6>
 800ea34:	f845 bb04 	str.w	fp, [r5], #4
 800ea38:	f04f 0b00 	mov.w	fp, #0
 800ea3c:	465b      	mov	r3, fp
 800ea3e:	7830      	ldrb	r0, [r6, #0]
 800ea40:	9303      	str	r3, [sp, #12]
 800ea42:	f7ff fef3 	bl	800e82c <__hexdig_fun>
 800ea46:	9b03      	ldr	r3, [sp, #12]
 800ea48:	f000 000f 	and.w	r0, r0, #15
 800ea4c:	4098      	lsls	r0, r3
 800ea4e:	ea4b 0b00 	orr.w	fp, fp, r0
 800ea52:	3304      	adds	r3, #4
 800ea54:	e7ae      	b.n	800e9b4 <__gethex+0x15c>
 800ea56:	45b1      	cmp	r9, r6
 800ea58:	d8ea      	bhi.n	800ea30 <__gethex+0x1d8>
 800ea5a:	492b      	ldr	r1, [pc, #172]	@ (800eb08 <__gethex+0x2b0>)
 800ea5c:	9303      	str	r3, [sp, #12]
 800ea5e:	2201      	movs	r2, #1
 800ea60:	4630      	mov	r0, r6
 800ea62:	f7ff fd6f 	bl	800e544 <strncmp>
 800ea66:	9b03      	ldr	r3, [sp, #12]
 800ea68:	2800      	cmp	r0, #0
 800ea6a:	d1e1      	bne.n	800ea30 <__gethex+0x1d8>
 800ea6c:	e7a2      	b.n	800e9b4 <__gethex+0x15c>
 800ea6e:	1ea9      	subs	r1, r5, #2
 800ea70:	4620      	mov	r0, r4
 800ea72:	f000 ff14 	bl	800f89e <__any_on>
 800ea76:	2800      	cmp	r0, #0
 800ea78:	d0c2      	beq.n	800ea00 <__gethex+0x1a8>
 800ea7a:	f04f 0903 	mov.w	r9, #3
 800ea7e:	e7c1      	b.n	800ea04 <__gethex+0x1ac>
 800ea80:	da09      	bge.n	800ea96 <__gethex+0x23e>
 800ea82:	1b75      	subs	r5, r6, r5
 800ea84:	4621      	mov	r1, r4
 800ea86:	9801      	ldr	r0, [sp, #4]
 800ea88:	462a      	mov	r2, r5
 800ea8a:	f000 fccf 	bl	800f42c <__lshift>
 800ea8e:	1b7f      	subs	r7, r7, r5
 800ea90:	4604      	mov	r4, r0
 800ea92:	f100 0a14 	add.w	sl, r0, #20
 800ea96:	f04f 0900 	mov.w	r9, #0
 800ea9a:	e7b8      	b.n	800ea0e <__gethex+0x1b6>
 800ea9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eaa0:	42bd      	cmp	r5, r7
 800eaa2:	dd6f      	ble.n	800eb84 <__gethex+0x32c>
 800eaa4:	1bed      	subs	r5, r5, r7
 800eaa6:	42ae      	cmp	r6, r5
 800eaa8:	dc34      	bgt.n	800eb14 <__gethex+0x2bc>
 800eaaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eaae:	2b02      	cmp	r3, #2
 800eab0:	d022      	beq.n	800eaf8 <__gethex+0x2a0>
 800eab2:	2b03      	cmp	r3, #3
 800eab4:	d024      	beq.n	800eb00 <__gethex+0x2a8>
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d115      	bne.n	800eae6 <__gethex+0x28e>
 800eaba:	42ae      	cmp	r6, r5
 800eabc:	d113      	bne.n	800eae6 <__gethex+0x28e>
 800eabe:	2e01      	cmp	r6, #1
 800eac0:	d10b      	bne.n	800eada <__gethex+0x282>
 800eac2:	9a02      	ldr	r2, [sp, #8]
 800eac4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800eac8:	6013      	str	r3, [r2, #0]
 800eaca:	2301      	movs	r3, #1
 800eacc:	6123      	str	r3, [r4, #16]
 800eace:	f8ca 3000 	str.w	r3, [sl]
 800ead2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ead4:	2562      	movs	r5, #98	@ 0x62
 800ead6:	601c      	str	r4, [r3, #0]
 800ead8:	e73a      	b.n	800e950 <__gethex+0xf8>
 800eada:	1e71      	subs	r1, r6, #1
 800eadc:	4620      	mov	r0, r4
 800eade:	f000 fede 	bl	800f89e <__any_on>
 800eae2:	2800      	cmp	r0, #0
 800eae4:	d1ed      	bne.n	800eac2 <__gethex+0x26a>
 800eae6:	9801      	ldr	r0, [sp, #4]
 800eae8:	4621      	mov	r1, r4
 800eaea:	f000 fa87 	bl	800effc <_Bfree>
 800eaee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	6013      	str	r3, [r2, #0]
 800eaf4:	2550      	movs	r5, #80	@ 0x50
 800eaf6:	e72b      	b.n	800e950 <__gethex+0xf8>
 800eaf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d1f3      	bne.n	800eae6 <__gethex+0x28e>
 800eafe:	e7e0      	b.n	800eac2 <__gethex+0x26a>
 800eb00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d1dd      	bne.n	800eac2 <__gethex+0x26a>
 800eb06:	e7ee      	b.n	800eae6 <__gethex+0x28e>
 800eb08:	08010b24 	.word	0x08010b24
 800eb0c:	08010c91 	.word	0x08010c91
 800eb10:	08010ca2 	.word	0x08010ca2
 800eb14:	1e6f      	subs	r7, r5, #1
 800eb16:	f1b9 0f00 	cmp.w	r9, #0
 800eb1a:	d130      	bne.n	800eb7e <__gethex+0x326>
 800eb1c:	b127      	cbz	r7, 800eb28 <__gethex+0x2d0>
 800eb1e:	4639      	mov	r1, r7
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 febc 	bl	800f89e <__any_on>
 800eb26:	4681      	mov	r9, r0
 800eb28:	117a      	asrs	r2, r7, #5
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800eb30:	f007 071f 	and.w	r7, r7, #31
 800eb34:	40bb      	lsls	r3, r7
 800eb36:	4213      	tst	r3, r2
 800eb38:	4629      	mov	r1, r5
 800eb3a:	4620      	mov	r0, r4
 800eb3c:	bf18      	it	ne
 800eb3e:	f049 0902 	orrne.w	r9, r9, #2
 800eb42:	f7ff fe21 	bl	800e788 <rshift>
 800eb46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800eb4a:	1b76      	subs	r6, r6, r5
 800eb4c:	2502      	movs	r5, #2
 800eb4e:	f1b9 0f00 	cmp.w	r9, #0
 800eb52:	d047      	beq.n	800ebe4 <__gethex+0x38c>
 800eb54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb58:	2b02      	cmp	r3, #2
 800eb5a:	d015      	beq.n	800eb88 <__gethex+0x330>
 800eb5c:	2b03      	cmp	r3, #3
 800eb5e:	d017      	beq.n	800eb90 <__gethex+0x338>
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d109      	bne.n	800eb78 <__gethex+0x320>
 800eb64:	f019 0f02 	tst.w	r9, #2
 800eb68:	d006      	beq.n	800eb78 <__gethex+0x320>
 800eb6a:	f8da 3000 	ldr.w	r3, [sl]
 800eb6e:	ea49 0903 	orr.w	r9, r9, r3
 800eb72:	f019 0f01 	tst.w	r9, #1
 800eb76:	d10e      	bne.n	800eb96 <__gethex+0x33e>
 800eb78:	f045 0510 	orr.w	r5, r5, #16
 800eb7c:	e032      	b.n	800ebe4 <__gethex+0x38c>
 800eb7e:	f04f 0901 	mov.w	r9, #1
 800eb82:	e7d1      	b.n	800eb28 <__gethex+0x2d0>
 800eb84:	2501      	movs	r5, #1
 800eb86:	e7e2      	b.n	800eb4e <__gethex+0x2f6>
 800eb88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb8a:	f1c3 0301 	rsb	r3, r3, #1
 800eb8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eb90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d0f0      	beq.n	800eb78 <__gethex+0x320>
 800eb96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eb9a:	f104 0314 	add.w	r3, r4, #20
 800eb9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eba2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eba6:	f04f 0c00 	mov.w	ip, #0
 800ebaa:	4618      	mov	r0, r3
 800ebac:	f853 2b04 	ldr.w	r2, [r3], #4
 800ebb0:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ebb4:	d01b      	beq.n	800ebee <__gethex+0x396>
 800ebb6:	3201      	adds	r2, #1
 800ebb8:	6002      	str	r2, [r0, #0]
 800ebba:	2d02      	cmp	r5, #2
 800ebbc:	f104 0314 	add.w	r3, r4, #20
 800ebc0:	d13c      	bne.n	800ec3c <__gethex+0x3e4>
 800ebc2:	f8d8 2000 	ldr.w	r2, [r8]
 800ebc6:	3a01      	subs	r2, #1
 800ebc8:	42b2      	cmp	r2, r6
 800ebca:	d109      	bne.n	800ebe0 <__gethex+0x388>
 800ebcc:	1171      	asrs	r1, r6, #5
 800ebce:	2201      	movs	r2, #1
 800ebd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ebd4:	f006 061f 	and.w	r6, r6, #31
 800ebd8:	fa02 f606 	lsl.w	r6, r2, r6
 800ebdc:	421e      	tst	r6, r3
 800ebde:	d13a      	bne.n	800ec56 <__gethex+0x3fe>
 800ebe0:	f045 0520 	orr.w	r5, r5, #32
 800ebe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ebe6:	601c      	str	r4, [r3, #0]
 800ebe8:	9b02      	ldr	r3, [sp, #8]
 800ebea:	601f      	str	r7, [r3, #0]
 800ebec:	e6b0      	b.n	800e950 <__gethex+0xf8>
 800ebee:	4299      	cmp	r1, r3
 800ebf0:	f843 cc04 	str.w	ip, [r3, #-4]
 800ebf4:	d8d9      	bhi.n	800ebaa <__gethex+0x352>
 800ebf6:	68a3      	ldr	r3, [r4, #8]
 800ebf8:	459b      	cmp	fp, r3
 800ebfa:	db17      	blt.n	800ec2c <__gethex+0x3d4>
 800ebfc:	6861      	ldr	r1, [r4, #4]
 800ebfe:	9801      	ldr	r0, [sp, #4]
 800ec00:	3101      	adds	r1, #1
 800ec02:	f000 f9bb 	bl	800ef7c <_Balloc>
 800ec06:	4681      	mov	r9, r0
 800ec08:	b918      	cbnz	r0, 800ec12 <__gethex+0x3ba>
 800ec0a:	4b1a      	ldr	r3, [pc, #104]	@ (800ec74 <__gethex+0x41c>)
 800ec0c:	4602      	mov	r2, r0
 800ec0e:	2184      	movs	r1, #132	@ 0x84
 800ec10:	e6c5      	b.n	800e99e <__gethex+0x146>
 800ec12:	6922      	ldr	r2, [r4, #16]
 800ec14:	3202      	adds	r2, #2
 800ec16:	f104 010c 	add.w	r1, r4, #12
 800ec1a:	0092      	lsls	r2, r2, #2
 800ec1c:	300c      	adds	r0, #12
 800ec1e:	f7ff fd4a 	bl	800e6b6 <memcpy>
 800ec22:	4621      	mov	r1, r4
 800ec24:	9801      	ldr	r0, [sp, #4]
 800ec26:	f000 f9e9 	bl	800effc <_Bfree>
 800ec2a:	464c      	mov	r4, r9
 800ec2c:	6923      	ldr	r3, [r4, #16]
 800ec2e:	1c5a      	adds	r2, r3, #1
 800ec30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ec34:	6122      	str	r2, [r4, #16]
 800ec36:	2201      	movs	r2, #1
 800ec38:	615a      	str	r2, [r3, #20]
 800ec3a:	e7be      	b.n	800ebba <__gethex+0x362>
 800ec3c:	6922      	ldr	r2, [r4, #16]
 800ec3e:	455a      	cmp	r2, fp
 800ec40:	dd0b      	ble.n	800ec5a <__gethex+0x402>
 800ec42:	2101      	movs	r1, #1
 800ec44:	4620      	mov	r0, r4
 800ec46:	f7ff fd9f 	bl	800e788 <rshift>
 800ec4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ec4e:	3701      	adds	r7, #1
 800ec50:	42bb      	cmp	r3, r7
 800ec52:	f6ff aee0 	blt.w	800ea16 <__gethex+0x1be>
 800ec56:	2501      	movs	r5, #1
 800ec58:	e7c2      	b.n	800ebe0 <__gethex+0x388>
 800ec5a:	f016 061f 	ands.w	r6, r6, #31
 800ec5e:	d0fa      	beq.n	800ec56 <__gethex+0x3fe>
 800ec60:	4453      	add	r3, sl
 800ec62:	f1c6 0620 	rsb	r6, r6, #32
 800ec66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ec6a:	f000 fa79 	bl	800f160 <__hi0bits>
 800ec6e:	42b0      	cmp	r0, r6
 800ec70:	dbe7      	blt.n	800ec42 <__gethex+0x3ea>
 800ec72:	e7f0      	b.n	800ec56 <__gethex+0x3fe>
 800ec74:	08010c91 	.word	0x08010c91

0800ec78 <L_shift>:
 800ec78:	f1c2 0208 	rsb	r2, r2, #8
 800ec7c:	0092      	lsls	r2, r2, #2
 800ec7e:	b570      	push	{r4, r5, r6, lr}
 800ec80:	f1c2 0620 	rsb	r6, r2, #32
 800ec84:	6843      	ldr	r3, [r0, #4]
 800ec86:	6804      	ldr	r4, [r0, #0]
 800ec88:	fa03 f506 	lsl.w	r5, r3, r6
 800ec8c:	432c      	orrs	r4, r5
 800ec8e:	40d3      	lsrs	r3, r2
 800ec90:	6004      	str	r4, [r0, #0]
 800ec92:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec96:	4288      	cmp	r0, r1
 800ec98:	d3f4      	bcc.n	800ec84 <L_shift+0xc>
 800ec9a:	bd70      	pop	{r4, r5, r6, pc}

0800ec9c <__match>:
 800ec9c:	b530      	push	{r4, r5, lr}
 800ec9e:	6803      	ldr	r3, [r0, #0]
 800eca0:	3301      	adds	r3, #1
 800eca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eca6:	b914      	cbnz	r4, 800ecae <__match+0x12>
 800eca8:	6003      	str	r3, [r0, #0]
 800ecaa:	2001      	movs	r0, #1
 800ecac:	bd30      	pop	{r4, r5, pc}
 800ecae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ecb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ecb6:	2d19      	cmp	r5, #25
 800ecb8:	bf98      	it	ls
 800ecba:	3220      	addls	r2, #32
 800ecbc:	42a2      	cmp	r2, r4
 800ecbe:	d0f0      	beq.n	800eca2 <__match+0x6>
 800ecc0:	2000      	movs	r0, #0
 800ecc2:	e7f3      	b.n	800ecac <__match+0x10>

0800ecc4 <__hexnan>:
 800ecc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc8:	680b      	ldr	r3, [r1, #0]
 800ecca:	6801      	ldr	r1, [r0, #0]
 800eccc:	115e      	asrs	r6, r3, #5
 800ecce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ecd2:	f013 031f 	ands.w	r3, r3, #31
 800ecd6:	b087      	sub	sp, #28
 800ecd8:	bf18      	it	ne
 800ecda:	3604      	addne	r6, #4
 800ecdc:	2500      	movs	r5, #0
 800ecde:	1f37      	subs	r7, r6, #4
 800ece0:	4682      	mov	sl, r0
 800ece2:	4690      	mov	r8, r2
 800ece4:	9301      	str	r3, [sp, #4]
 800ece6:	f846 5c04 	str.w	r5, [r6, #-4]
 800ecea:	46b9      	mov	r9, r7
 800ecec:	463c      	mov	r4, r7
 800ecee:	9502      	str	r5, [sp, #8]
 800ecf0:	46ab      	mov	fp, r5
 800ecf2:	784a      	ldrb	r2, [r1, #1]
 800ecf4:	1c4b      	adds	r3, r1, #1
 800ecf6:	9303      	str	r3, [sp, #12]
 800ecf8:	b342      	cbz	r2, 800ed4c <__hexnan+0x88>
 800ecfa:	4610      	mov	r0, r2
 800ecfc:	9105      	str	r1, [sp, #20]
 800ecfe:	9204      	str	r2, [sp, #16]
 800ed00:	f7ff fd94 	bl	800e82c <__hexdig_fun>
 800ed04:	2800      	cmp	r0, #0
 800ed06:	d151      	bne.n	800edac <__hexnan+0xe8>
 800ed08:	9a04      	ldr	r2, [sp, #16]
 800ed0a:	9905      	ldr	r1, [sp, #20]
 800ed0c:	2a20      	cmp	r2, #32
 800ed0e:	d818      	bhi.n	800ed42 <__hexnan+0x7e>
 800ed10:	9b02      	ldr	r3, [sp, #8]
 800ed12:	459b      	cmp	fp, r3
 800ed14:	dd13      	ble.n	800ed3e <__hexnan+0x7a>
 800ed16:	454c      	cmp	r4, r9
 800ed18:	d206      	bcs.n	800ed28 <__hexnan+0x64>
 800ed1a:	2d07      	cmp	r5, #7
 800ed1c:	dc04      	bgt.n	800ed28 <__hexnan+0x64>
 800ed1e:	462a      	mov	r2, r5
 800ed20:	4649      	mov	r1, r9
 800ed22:	4620      	mov	r0, r4
 800ed24:	f7ff ffa8 	bl	800ec78 <L_shift>
 800ed28:	4544      	cmp	r4, r8
 800ed2a:	d952      	bls.n	800edd2 <__hexnan+0x10e>
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	f1a4 0904 	sub.w	r9, r4, #4
 800ed32:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed36:	f8cd b008 	str.w	fp, [sp, #8]
 800ed3a:	464c      	mov	r4, r9
 800ed3c:	461d      	mov	r5, r3
 800ed3e:	9903      	ldr	r1, [sp, #12]
 800ed40:	e7d7      	b.n	800ecf2 <__hexnan+0x2e>
 800ed42:	2a29      	cmp	r2, #41	@ 0x29
 800ed44:	d157      	bne.n	800edf6 <__hexnan+0x132>
 800ed46:	3102      	adds	r1, #2
 800ed48:	f8ca 1000 	str.w	r1, [sl]
 800ed4c:	f1bb 0f00 	cmp.w	fp, #0
 800ed50:	d051      	beq.n	800edf6 <__hexnan+0x132>
 800ed52:	454c      	cmp	r4, r9
 800ed54:	d206      	bcs.n	800ed64 <__hexnan+0xa0>
 800ed56:	2d07      	cmp	r5, #7
 800ed58:	dc04      	bgt.n	800ed64 <__hexnan+0xa0>
 800ed5a:	462a      	mov	r2, r5
 800ed5c:	4649      	mov	r1, r9
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f7ff ff8a 	bl	800ec78 <L_shift>
 800ed64:	4544      	cmp	r4, r8
 800ed66:	d936      	bls.n	800edd6 <__hexnan+0x112>
 800ed68:	f1a8 0204 	sub.w	r2, r8, #4
 800ed6c:	4623      	mov	r3, r4
 800ed6e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ed72:	f842 1f04 	str.w	r1, [r2, #4]!
 800ed76:	429f      	cmp	r7, r3
 800ed78:	d2f9      	bcs.n	800ed6e <__hexnan+0xaa>
 800ed7a:	1b3b      	subs	r3, r7, r4
 800ed7c:	f023 0303 	bic.w	r3, r3, #3
 800ed80:	3304      	adds	r3, #4
 800ed82:	3401      	adds	r4, #1
 800ed84:	3e03      	subs	r6, #3
 800ed86:	42b4      	cmp	r4, r6
 800ed88:	bf88      	it	hi
 800ed8a:	2304      	movhi	r3, #4
 800ed8c:	4443      	add	r3, r8
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f843 2b04 	str.w	r2, [r3], #4
 800ed94:	429f      	cmp	r7, r3
 800ed96:	d2fb      	bcs.n	800ed90 <__hexnan+0xcc>
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	b91b      	cbnz	r3, 800eda4 <__hexnan+0xe0>
 800ed9c:	4547      	cmp	r7, r8
 800ed9e:	d128      	bne.n	800edf2 <__hexnan+0x12e>
 800eda0:	2301      	movs	r3, #1
 800eda2:	603b      	str	r3, [r7, #0]
 800eda4:	2005      	movs	r0, #5
 800eda6:	b007      	add	sp, #28
 800eda8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edac:	3501      	adds	r5, #1
 800edae:	2d08      	cmp	r5, #8
 800edb0:	f10b 0b01 	add.w	fp, fp, #1
 800edb4:	dd06      	ble.n	800edc4 <__hexnan+0x100>
 800edb6:	4544      	cmp	r4, r8
 800edb8:	d9c1      	bls.n	800ed3e <__hexnan+0x7a>
 800edba:	2300      	movs	r3, #0
 800edbc:	f844 3c04 	str.w	r3, [r4, #-4]
 800edc0:	2501      	movs	r5, #1
 800edc2:	3c04      	subs	r4, #4
 800edc4:	6822      	ldr	r2, [r4, #0]
 800edc6:	f000 000f 	and.w	r0, r0, #15
 800edca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800edce:	6020      	str	r0, [r4, #0]
 800edd0:	e7b5      	b.n	800ed3e <__hexnan+0x7a>
 800edd2:	2508      	movs	r5, #8
 800edd4:	e7b3      	b.n	800ed3e <__hexnan+0x7a>
 800edd6:	9b01      	ldr	r3, [sp, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d0dd      	beq.n	800ed98 <__hexnan+0xd4>
 800eddc:	f1c3 0320 	rsb	r3, r3, #32
 800ede0:	f04f 32ff 	mov.w	r2, #4294967295
 800ede4:	40da      	lsrs	r2, r3
 800ede6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800edea:	4013      	ands	r3, r2
 800edec:	f846 3c04 	str.w	r3, [r6, #-4]
 800edf0:	e7d2      	b.n	800ed98 <__hexnan+0xd4>
 800edf2:	3f04      	subs	r7, #4
 800edf4:	e7d0      	b.n	800ed98 <__hexnan+0xd4>
 800edf6:	2004      	movs	r0, #4
 800edf8:	e7d5      	b.n	800eda6 <__hexnan+0xe2>
	...

0800edfc <sbrk_aligned>:
 800edfc:	b570      	push	{r4, r5, r6, lr}
 800edfe:	4e0f      	ldr	r6, [pc, #60]	@ (800ee3c <sbrk_aligned+0x40>)
 800ee00:	460c      	mov	r4, r1
 800ee02:	6831      	ldr	r1, [r6, #0]
 800ee04:	4605      	mov	r5, r0
 800ee06:	b911      	cbnz	r1, 800ee0e <sbrk_aligned+0x12>
 800ee08:	f001 f922 	bl	8010050 <_sbrk_r>
 800ee0c:	6030      	str	r0, [r6, #0]
 800ee0e:	4621      	mov	r1, r4
 800ee10:	4628      	mov	r0, r5
 800ee12:	f001 f91d 	bl	8010050 <_sbrk_r>
 800ee16:	1c43      	adds	r3, r0, #1
 800ee18:	d103      	bne.n	800ee22 <sbrk_aligned+0x26>
 800ee1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ee1e:	4620      	mov	r0, r4
 800ee20:	bd70      	pop	{r4, r5, r6, pc}
 800ee22:	1cc4      	adds	r4, r0, #3
 800ee24:	f024 0403 	bic.w	r4, r4, #3
 800ee28:	42a0      	cmp	r0, r4
 800ee2a:	d0f8      	beq.n	800ee1e <sbrk_aligned+0x22>
 800ee2c:	1a21      	subs	r1, r4, r0
 800ee2e:	4628      	mov	r0, r5
 800ee30:	f001 f90e 	bl	8010050 <_sbrk_r>
 800ee34:	3001      	adds	r0, #1
 800ee36:	d1f2      	bne.n	800ee1e <sbrk_aligned+0x22>
 800ee38:	e7ef      	b.n	800ee1a <sbrk_aligned+0x1e>
 800ee3a:	bf00      	nop
 800ee3c:	20005aac 	.word	0x20005aac

0800ee40 <_malloc_r>:
 800ee40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee44:	1ccd      	adds	r5, r1, #3
 800ee46:	f025 0503 	bic.w	r5, r5, #3
 800ee4a:	3508      	adds	r5, #8
 800ee4c:	2d0c      	cmp	r5, #12
 800ee4e:	bf38      	it	cc
 800ee50:	250c      	movcc	r5, #12
 800ee52:	2d00      	cmp	r5, #0
 800ee54:	4606      	mov	r6, r0
 800ee56:	db01      	blt.n	800ee5c <_malloc_r+0x1c>
 800ee58:	42a9      	cmp	r1, r5
 800ee5a:	d904      	bls.n	800ee66 <_malloc_r+0x26>
 800ee5c:	230c      	movs	r3, #12
 800ee5e:	6033      	str	r3, [r6, #0]
 800ee60:	2000      	movs	r0, #0
 800ee62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ef3c <_malloc_r+0xfc>
 800ee6a:	f000 f87b 	bl	800ef64 <__malloc_lock>
 800ee6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ee72:	461c      	mov	r4, r3
 800ee74:	bb44      	cbnz	r4, 800eec8 <_malloc_r+0x88>
 800ee76:	4629      	mov	r1, r5
 800ee78:	4630      	mov	r0, r6
 800ee7a:	f7ff ffbf 	bl	800edfc <sbrk_aligned>
 800ee7e:	1c43      	adds	r3, r0, #1
 800ee80:	4604      	mov	r4, r0
 800ee82:	d158      	bne.n	800ef36 <_malloc_r+0xf6>
 800ee84:	f8d8 4000 	ldr.w	r4, [r8]
 800ee88:	4627      	mov	r7, r4
 800ee8a:	2f00      	cmp	r7, #0
 800ee8c:	d143      	bne.n	800ef16 <_malloc_r+0xd6>
 800ee8e:	2c00      	cmp	r4, #0
 800ee90:	d04b      	beq.n	800ef2a <_malloc_r+0xea>
 800ee92:	6823      	ldr	r3, [r4, #0]
 800ee94:	4639      	mov	r1, r7
 800ee96:	4630      	mov	r0, r6
 800ee98:	eb04 0903 	add.w	r9, r4, r3
 800ee9c:	f001 f8d8 	bl	8010050 <_sbrk_r>
 800eea0:	4581      	cmp	r9, r0
 800eea2:	d142      	bne.n	800ef2a <_malloc_r+0xea>
 800eea4:	6821      	ldr	r1, [r4, #0]
 800eea6:	1a6d      	subs	r5, r5, r1
 800eea8:	4629      	mov	r1, r5
 800eeaa:	4630      	mov	r0, r6
 800eeac:	f7ff ffa6 	bl	800edfc <sbrk_aligned>
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	d03a      	beq.n	800ef2a <_malloc_r+0xea>
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	442b      	add	r3, r5
 800eeb8:	6023      	str	r3, [r4, #0]
 800eeba:	f8d8 3000 	ldr.w	r3, [r8]
 800eebe:	685a      	ldr	r2, [r3, #4]
 800eec0:	bb62      	cbnz	r2, 800ef1c <_malloc_r+0xdc>
 800eec2:	f8c8 7000 	str.w	r7, [r8]
 800eec6:	e00f      	b.n	800eee8 <_malloc_r+0xa8>
 800eec8:	6822      	ldr	r2, [r4, #0]
 800eeca:	1b52      	subs	r2, r2, r5
 800eecc:	d420      	bmi.n	800ef10 <_malloc_r+0xd0>
 800eece:	2a0b      	cmp	r2, #11
 800eed0:	d917      	bls.n	800ef02 <_malloc_r+0xc2>
 800eed2:	1961      	adds	r1, r4, r5
 800eed4:	42a3      	cmp	r3, r4
 800eed6:	6025      	str	r5, [r4, #0]
 800eed8:	bf18      	it	ne
 800eeda:	6059      	strne	r1, [r3, #4]
 800eedc:	6863      	ldr	r3, [r4, #4]
 800eede:	bf08      	it	eq
 800eee0:	f8c8 1000 	streq.w	r1, [r8]
 800eee4:	5162      	str	r2, [r4, r5]
 800eee6:	604b      	str	r3, [r1, #4]
 800eee8:	4630      	mov	r0, r6
 800eeea:	f000 f841 	bl	800ef70 <__malloc_unlock>
 800eeee:	f104 000b 	add.w	r0, r4, #11
 800eef2:	1d23      	adds	r3, r4, #4
 800eef4:	f020 0007 	bic.w	r0, r0, #7
 800eef8:	1ac2      	subs	r2, r0, r3
 800eefa:	bf1c      	itt	ne
 800eefc:	1a1b      	subne	r3, r3, r0
 800eefe:	50a3      	strne	r3, [r4, r2]
 800ef00:	e7af      	b.n	800ee62 <_malloc_r+0x22>
 800ef02:	6862      	ldr	r2, [r4, #4]
 800ef04:	42a3      	cmp	r3, r4
 800ef06:	bf0c      	ite	eq
 800ef08:	f8c8 2000 	streq.w	r2, [r8]
 800ef0c:	605a      	strne	r2, [r3, #4]
 800ef0e:	e7eb      	b.n	800eee8 <_malloc_r+0xa8>
 800ef10:	4623      	mov	r3, r4
 800ef12:	6864      	ldr	r4, [r4, #4]
 800ef14:	e7ae      	b.n	800ee74 <_malloc_r+0x34>
 800ef16:	463c      	mov	r4, r7
 800ef18:	687f      	ldr	r7, [r7, #4]
 800ef1a:	e7b6      	b.n	800ee8a <_malloc_r+0x4a>
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	685b      	ldr	r3, [r3, #4]
 800ef20:	42a3      	cmp	r3, r4
 800ef22:	d1fb      	bne.n	800ef1c <_malloc_r+0xdc>
 800ef24:	2300      	movs	r3, #0
 800ef26:	6053      	str	r3, [r2, #4]
 800ef28:	e7de      	b.n	800eee8 <_malloc_r+0xa8>
 800ef2a:	230c      	movs	r3, #12
 800ef2c:	6033      	str	r3, [r6, #0]
 800ef2e:	4630      	mov	r0, r6
 800ef30:	f000 f81e 	bl	800ef70 <__malloc_unlock>
 800ef34:	e794      	b.n	800ee60 <_malloc_r+0x20>
 800ef36:	6005      	str	r5, [r0, #0]
 800ef38:	e7d6      	b.n	800eee8 <_malloc_r+0xa8>
 800ef3a:	bf00      	nop
 800ef3c:	20005ab0 	.word	0x20005ab0

0800ef40 <__ascii_mbtowc>:
 800ef40:	b082      	sub	sp, #8
 800ef42:	b901      	cbnz	r1, 800ef46 <__ascii_mbtowc+0x6>
 800ef44:	a901      	add	r1, sp, #4
 800ef46:	b142      	cbz	r2, 800ef5a <__ascii_mbtowc+0x1a>
 800ef48:	b14b      	cbz	r3, 800ef5e <__ascii_mbtowc+0x1e>
 800ef4a:	7813      	ldrb	r3, [r2, #0]
 800ef4c:	600b      	str	r3, [r1, #0]
 800ef4e:	7812      	ldrb	r2, [r2, #0]
 800ef50:	1e10      	subs	r0, r2, #0
 800ef52:	bf18      	it	ne
 800ef54:	2001      	movne	r0, #1
 800ef56:	b002      	add	sp, #8
 800ef58:	4770      	bx	lr
 800ef5a:	4610      	mov	r0, r2
 800ef5c:	e7fb      	b.n	800ef56 <__ascii_mbtowc+0x16>
 800ef5e:	f06f 0001 	mvn.w	r0, #1
 800ef62:	e7f8      	b.n	800ef56 <__ascii_mbtowc+0x16>

0800ef64 <__malloc_lock>:
 800ef64:	4801      	ldr	r0, [pc, #4]	@ (800ef6c <__malloc_lock+0x8>)
 800ef66:	f7ff bb9c 	b.w	800e6a2 <__retarget_lock_acquire_recursive>
 800ef6a:	bf00      	nop
 800ef6c:	20005aa8 	.word	0x20005aa8

0800ef70 <__malloc_unlock>:
 800ef70:	4801      	ldr	r0, [pc, #4]	@ (800ef78 <__malloc_unlock+0x8>)
 800ef72:	f7ff bb97 	b.w	800e6a4 <__retarget_lock_release_recursive>
 800ef76:	bf00      	nop
 800ef78:	20005aa8 	.word	0x20005aa8

0800ef7c <_Balloc>:
 800ef7c:	b570      	push	{r4, r5, r6, lr}
 800ef7e:	69c6      	ldr	r6, [r0, #28]
 800ef80:	4604      	mov	r4, r0
 800ef82:	460d      	mov	r5, r1
 800ef84:	b976      	cbnz	r6, 800efa4 <_Balloc+0x28>
 800ef86:	2010      	movs	r0, #16
 800ef88:	f001 f8a4 	bl	80100d4 <malloc>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	61e0      	str	r0, [r4, #28]
 800ef90:	b920      	cbnz	r0, 800ef9c <_Balloc+0x20>
 800ef92:	4b18      	ldr	r3, [pc, #96]	@ (800eff4 <_Balloc+0x78>)
 800ef94:	4818      	ldr	r0, [pc, #96]	@ (800eff8 <_Balloc+0x7c>)
 800ef96:	216b      	movs	r1, #107	@ 0x6b
 800ef98:	f001 f86a 	bl	8010070 <__assert_func>
 800ef9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800efa0:	6006      	str	r6, [r0, #0]
 800efa2:	60c6      	str	r6, [r0, #12]
 800efa4:	69e6      	ldr	r6, [r4, #28]
 800efa6:	68f3      	ldr	r3, [r6, #12]
 800efa8:	b183      	cbz	r3, 800efcc <_Balloc+0x50>
 800efaa:	69e3      	ldr	r3, [r4, #28]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800efb2:	b9b8      	cbnz	r0, 800efe4 <_Balloc+0x68>
 800efb4:	2101      	movs	r1, #1
 800efb6:	fa01 f605 	lsl.w	r6, r1, r5
 800efba:	1d72      	adds	r2, r6, #5
 800efbc:	0092      	lsls	r2, r2, #2
 800efbe:	4620      	mov	r0, r4
 800efc0:	f001 f874 	bl	80100ac <_calloc_r>
 800efc4:	b160      	cbz	r0, 800efe0 <_Balloc+0x64>
 800efc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800efca:	e00e      	b.n	800efea <_Balloc+0x6e>
 800efcc:	2221      	movs	r2, #33	@ 0x21
 800efce:	2104      	movs	r1, #4
 800efd0:	4620      	mov	r0, r4
 800efd2:	f001 f86b 	bl	80100ac <_calloc_r>
 800efd6:	69e3      	ldr	r3, [r4, #28]
 800efd8:	60f0      	str	r0, [r6, #12]
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d1e4      	bne.n	800efaa <_Balloc+0x2e>
 800efe0:	2000      	movs	r0, #0
 800efe2:	bd70      	pop	{r4, r5, r6, pc}
 800efe4:	6802      	ldr	r2, [r0, #0]
 800efe6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800efea:	2300      	movs	r3, #0
 800efec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eff0:	e7f7      	b.n	800efe2 <_Balloc+0x66>
 800eff2:	bf00      	nop
 800eff4:	08010d02 	.word	0x08010d02
 800eff8:	08010d19 	.word	0x08010d19

0800effc <_Bfree>:
 800effc:	b570      	push	{r4, r5, r6, lr}
 800effe:	69c6      	ldr	r6, [r0, #28]
 800f000:	4605      	mov	r5, r0
 800f002:	460c      	mov	r4, r1
 800f004:	b976      	cbnz	r6, 800f024 <_Bfree+0x28>
 800f006:	2010      	movs	r0, #16
 800f008:	f001 f864 	bl	80100d4 <malloc>
 800f00c:	4602      	mov	r2, r0
 800f00e:	61e8      	str	r0, [r5, #28]
 800f010:	b920      	cbnz	r0, 800f01c <_Bfree+0x20>
 800f012:	4b09      	ldr	r3, [pc, #36]	@ (800f038 <_Bfree+0x3c>)
 800f014:	4809      	ldr	r0, [pc, #36]	@ (800f03c <_Bfree+0x40>)
 800f016:	218f      	movs	r1, #143	@ 0x8f
 800f018:	f001 f82a 	bl	8010070 <__assert_func>
 800f01c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f020:	6006      	str	r6, [r0, #0]
 800f022:	60c6      	str	r6, [r0, #12]
 800f024:	b13c      	cbz	r4, 800f036 <_Bfree+0x3a>
 800f026:	69eb      	ldr	r3, [r5, #28]
 800f028:	6862      	ldr	r2, [r4, #4]
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f030:	6021      	str	r1, [r4, #0]
 800f032:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f036:	bd70      	pop	{r4, r5, r6, pc}
 800f038:	08010d02 	.word	0x08010d02
 800f03c:	08010d19 	.word	0x08010d19

0800f040 <__multadd>:
 800f040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f044:	690d      	ldr	r5, [r1, #16]
 800f046:	4607      	mov	r7, r0
 800f048:	460c      	mov	r4, r1
 800f04a:	461e      	mov	r6, r3
 800f04c:	f101 0c14 	add.w	ip, r1, #20
 800f050:	2000      	movs	r0, #0
 800f052:	f8dc 3000 	ldr.w	r3, [ip]
 800f056:	b299      	uxth	r1, r3
 800f058:	fb02 6101 	mla	r1, r2, r1, r6
 800f05c:	0c1e      	lsrs	r6, r3, #16
 800f05e:	0c0b      	lsrs	r3, r1, #16
 800f060:	fb02 3306 	mla	r3, r2, r6, r3
 800f064:	b289      	uxth	r1, r1
 800f066:	3001      	adds	r0, #1
 800f068:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f06c:	4285      	cmp	r5, r0
 800f06e:	f84c 1b04 	str.w	r1, [ip], #4
 800f072:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f076:	dcec      	bgt.n	800f052 <__multadd+0x12>
 800f078:	b30e      	cbz	r6, 800f0be <__multadd+0x7e>
 800f07a:	68a3      	ldr	r3, [r4, #8]
 800f07c:	42ab      	cmp	r3, r5
 800f07e:	dc19      	bgt.n	800f0b4 <__multadd+0x74>
 800f080:	6861      	ldr	r1, [r4, #4]
 800f082:	4638      	mov	r0, r7
 800f084:	3101      	adds	r1, #1
 800f086:	f7ff ff79 	bl	800ef7c <_Balloc>
 800f08a:	4680      	mov	r8, r0
 800f08c:	b928      	cbnz	r0, 800f09a <__multadd+0x5a>
 800f08e:	4602      	mov	r2, r0
 800f090:	4b0c      	ldr	r3, [pc, #48]	@ (800f0c4 <__multadd+0x84>)
 800f092:	480d      	ldr	r0, [pc, #52]	@ (800f0c8 <__multadd+0x88>)
 800f094:	21ba      	movs	r1, #186	@ 0xba
 800f096:	f000 ffeb 	bl	8010070 <__assert_func>
 800f09a:	6922      	ldr	r2, [r4, #16]
 800f09c:	3202      	adds	r2, #2
 800f09e:	f104 010c 	add.w	r1, r4, #12
 800f0a2:	0092      	lsls	r2, r2, #2
 800f0a4:	300c      	adds	r0, #12
 800f0a6:	f7ff fb06 	bl	800e6b6 <memcpy>
 800f0aa:	4621      	mov	r1, r4
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f7ff ffa5 	bl	800effc <_Bfree>
 800f0b2:	4644      	mov	r4, r8
 800f0b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f0b8:	3501      	adds	r5, #1
 800f0ba:	615e      	str	r6, [r3, #20]
 800f0bc:	6125      	str	r5, [r4, #16]
 800f0be:	4620      	mov	r0, r4
 800f0c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c4:	08010c91 	.word	0x08010c91
 800f0c8:	08010d19 	.word	0x08010d19

0800f0cc <__s2b>:
 800f0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f0d0:	460c      	mov	r4, r1
 800f0d2:	4615      	mov	r5, r2
 800f0d4:	461f      	mov	r7, r3
 800f0d6:	2209      	movs	r2, #9
 800f0d8:	3308      	adds	r3, #8
 800f0da:	4606      	mov	r6, r0
 800f0dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800f0e0:	2100      	movs	r1, #0
 800f0e2:	2201      	movs	r2, #1
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	db09      	blt.n	800f0fc <__s2b+0x30>
 800f0e8:	4630      	mov	r0, r6
 800f0ea:	f7ff ff47 	bl	800ef7c <_Balloc>
 800f0ee:	b940      	cbnz	r0, 800f102 <__s2b+0x36>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	4b19      	ldr	r3, [pc, #100]	@ (800f158 <__s2b+0x8c>)
 800f0f4:	4819      	ldr	r0, [pc, #100]	@ (800f15c <__s2b+0x90>)
 800f0f6:	21d3      	movs	r1, #211	@ 0xd3
 800f0f8:	f000 ffba 	bl	8010070 <__assert_func>
 800f0fc:	0052      	lsls	r2, r2, #1
 800f0fe:	3101      	adds	r1, #1
 800f100:	e7f0      	b.n	800f0e4 <__s2b+0x18>
 800f102:	9b08      	ldr	r3, [sp, #32]
 800f104:	6143      	str	r3, [r0, #20]
 800f106:	2d09      	cmp	r5, #9
 800f108:	f04f 0301 	mov.w	r3, #1
 800f10c:	6103      	str	r3, [r0, #16]
 800f10e:	dd16      	ble.n	800f13e <__s2b+0x72>
 800f110:	f104 0909 	add.w	r9, r4, #9
 800f114:	46c8      	mov	r8, r9
 800f116:	442c      	add	r4, r5
 800f118:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f11c:	4601      	mov	r1, r0
 800f11e:	3b30      	subs	r3, #48	@ 0x30
 800f120:	220a      	movs	r2, #10
 800f122:	4630      	mov	r0, r6
 800f124:	f7ff ff8c 	bl	800f040 <__multadd>
 800f128:	45a0      	cmp	r8, r4
 800f12a:	d1f5      	bne.n	800f118 <__s2b+0x4c>
 800f12c:	f1a5 0408 	sub.w	r4, r5, #8
 800f130:	444c      	add	r4, r9
 800f132:	1b2d      	subs	r5, r5, r4
 800f134:	1963      	adds	r3, r4, r5
 800f136:	42bb      	cmp	r3, r7
 800f138:	db04      	blt.n	800f144 <__s2b+0x78>
 800f13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f13e:	340a      	adds	r4, #10
 800f140:	2509      	movs	r5, #9
 800f142:	e7f6      	b.n	800f132 <__s2b+0x66>
 800f144:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f148:	4601      	mov	r1, r0
 800f14a:	3b30      	subs	r3, #48	@ 0x30
 800f14c:	220a      	movs	r2, #10
 800f14e:	4630      	mov	r0, r6
 800f150:	f7ff ff76 	bl	800f040 <__multadd>
 800f154:	e7ee      	b.n	800f134 <__s2b+0x68>
 800f156:	bf00      	nop
 800f158:	08010c91 	.word	0x08010c91
 800f15c:	08010d19 	.word	0x08010d19

0800f160 <__hi0bits>:
 800f160:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f164:	4603      	mov	r3, r0
 800f166:	bf36      	itet	cc
 800f168:	0403      	lslcc	r3, r0, #16
 800f16a:	2000      	movcs	r0, #0
 800f16c:	2010      	movcc	r0, #16
 800f16e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f172:	bf3c      	itt	cc
 800f174:	021b      	lslcc	r3, r3, #8
 800f176:	3008      	addcc	r0, #8
 800f178:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f17c:	bf3c      	itt	cc
 800f17e:	011b      	lslcc	r3, r3, #4
 800f180:	3004      	addcc	r0, #4
 800f182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f186:	bf3c      	itt	cc
 800f188:	009b      	lslcc	r3, r3, #2
 800f18a:	3002      	addcc	r0, #2
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	db05      	blt.n	800f19c <__hi0bits+0x3c>
 800f190:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f194:	f100 0001 	add.w	r0, r0, #1
 800f198:	bf08      	it	eq
 800f19a:	2020      	moveq	r0, #32
 800f19c:	4770      	bx	lr

0800f19e <__lo0bits>:
 800f19e:	6803      	ldr	r3, [r0, #0]
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	f013 0007 	ands.w	r0, r3, #7
 800f1a6:	d00b      	beq.n	800f1c0 <__lo0bits+0x22>
 800f1a8:	07d9      	lsls	r1, r3, #31
 800f1aa:	d421      	bmi.n	800f1f0 <__lo0bits+0x52>
 800f1ac:	0798      	lsls	r0, r3, #30
 800f1ae:	bf49      	itett	mi
 800f1b0:	085b      	lsrmi	r3, r3, #1
 800f1b2:	089b      	lsrpl	r3, r3, #2
 800f1b4:	2001      	movmi	r0, #1
 800f1b6:	6013      	strmi	r3, [r2, #0]
 800f1b8:	bf5c      	itt	pl
 800f1ba:	6013      	strpl	r3, [r2, #0]
 800f1bc:	2002      	movpl	r0, #2
 800f1be:	4770      	bx	lr
 800f1c0:	b299      	uxth	r1, r3
 800f1c2:	b909      	cbnz	r1, 800f1c8 <__lo0bits+0x2a>
 800f1c4:	0c1b      	lsrs	r3, r3, #16
 800f1c6:	2010      	movs	r0, #16
 800f1c8:	b2d9      	uxtb	r1, r3
 800f1ca:	b909      	cbnz	r1, 800f1d0 <__lo0bits+0x32>
 800f1cc:	3008      	adds	r0, #8
 800f1ce:	0a1b      	lsrs	r3, r3, #8
 800f1d0:	0719      	lsls	r1, r3, #28
 800f1d2:	bf04      	itt	eq
 800f1d4:	091b      	lsreq	r3, r3, #4
 800f1d6:	3004      	addeq	r0, #4
 800f1d8:	0799      	lsls	r1, r3, #30
 800f1da:	bf04      	itt	eq
 800f1dc:	089b      	lsreq	r3, r3, #2
 800f1de:	3002      	addeq	r0, #2
 800f1e0:	07d9      	lsls	r1, r3, #31
 800f1e2:	d403      	bmi.n	800f1ec <__lo0bits+0x4e>
 800f1e4:	085b      	lsrs	r3, r3, #1
 800f1e6:	f100 0001 	add.w	r0, r0, #1
 800f1ea:	d003      	beq.n	800f1f4 <__lo0bits+0x56>
 800f1ec:	6013      	str	r3, [r2, #0]
 800f1ee:	4770      	bx	lr
 800f1f0:	2000      	movs	r0, #0
 800f1f2:	4770      	bx	lr
 800f1f4:	2020      	movs	r0, #32
 800f1f6:	4770      	bx	lr

0800f1f8 <__i2b>:
 800f1f8:	b510      	push	{r4, lr}
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	2101      	movs	r1, #1
 800f1fe:	f7ff febd 	bl	800ef7c <_Balloc>
 800f202:	4602      	mov	r2, r0
 800f204:	b928      	cbnz	r0, 800f212 <__i2b+0x1a>
 800f206:	4b05      	ldr	r3, [pc, #20]	@ (800f21c <__i2b+0x24>)
 800f208:	4805      	ldr	r0, [pc, #20]	@ (800f220 <__i2b+0x28>)
 800f20a:	f240 1145 	movw	r1, #325	@ 0x145
 800f20e:	f000 ff2f 	bl	8010070 <__assert_func>
 800f212:	2301      	movs	r3, #1
 800f214:	6144      	str	r4, [r0, #20]
 800f216:	6103      	str	r3, [r0, #16]
 800f218:	bd10      	pop	{r4, pc}
 800f21a:	bf00      	nop
 800f21c:	08010c91 	.word	0x08010c91
 800f220:	08010d19 	.word	0x08010d19

0800f224 <__multiply>:
 800f224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f228:	4614      	mov	r4, r2
 800f22a:	690a      	ldr	r2, [r1, #16]
 800f22c:	6923      	ldr	r3, [r4, #16]
 800f22e:	429a      	cmp	r2, r3
 800f230:	bfa8      	it	ge
 800f232:	4623      	movge	r3, r4
 800f234:	460f      	mov	r7, r1
 800f236:	bfa4      	itt	ge
 800f238:	460c      	movge	r4, r1
 800f23a:	461f      	movge	r7, r3
 800f23c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f240:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f244:	68a3      	ldr	r3, [r4, #8]
 800f246:	6861      	ldr	r1, [r4, #4]
 800f248:	eb0a 0609 	add.w	r6, sl, r9
 800f24c:	42b3      	cmp	r3, r6
 800f24e:	b085      	sub	sp, #20
 800f250:	bfb8      	it	lt
 800f252:	3101      	addlt	r1, #1
 800f254:	f7ff fe92 	bl	800ef7c <_Balloc>
 800f258:	b930      	cbnz	r0, 800f268 <__multiply+0x44>
 800f25a:	4602      	mov	r2, r0
 800f25c:	4b44      	ldr	r3, [pc, #272]	@ (800f370 <__multiply+0x14c>)
 800f25e:	4845      	ldr	r0, [pc, #276]	@ (800f374 <__multiply+0x150>)
 800f260:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f264:	f000 ff04 	bl	8010070 <__assert_func>
 800f268:	f100 0514 	add.w	r5, r0, #20
 800f26c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f270:	462b      	mov	r3, r5
 800f272:	2200      	movs	r2, #0
 800f274:	4543      	cmp	r3, r8
 800f276:	d321      	bcc.n	800f2bc <__multiply+0x98>
 800f278:	f107 0114 	add.w	r1, r7, #20
 800f27c:	f104 0214 	add.w	r2, r4, #20
 800f280:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f284:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f288:	9302      	str	r3, [sp, #8]
 800f28a:	1b13      	subs	r3, r2, r4
 800f28c:	3b15      	subs	r3, #21
 800f28e:	f023 0303 	bic.w	r3, r3, #3
 800f292:	3304      	adds	r3, #4
 800f294:	f104 0715 	add.w	r7, r4, #21
 800f298:	42ba      	cmp	r2, r7
 800f29a:	bf38      	it	cc
 800f29c:	2304      	movcc	r3, #4
 800f29e:	9301      	str	r3, [sp, #4]
 800f2a0:	9b02      	ldr	r3, [sp, #8]
 800f2a2:	9103      	str	r1, [sp, #12]
 800f2a4:	428b      	cmp	r3, r1
 800f2a6:	d80c      	bhi.n	800f2c2 <__multiply+0x9e>
 800f2a8:	2e00      	cmp	r6, #0
 800f2aa:	dd03      	ble.n	800f2b4 <__multiply+0x90>
 800f2ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d05b      	beq.n	800f36c <__multiply+0x148>
 800f2b4:	6106      	str	r6, [r0, #16]
 800f2b6:	b005      	add	sp, #20
 800f2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2bc:	f843 2b04 	str.w	r2, [r3], #4
 800f2c0:	e7d8      	b.n	800f274 <__multiply+0x50>
 800f2c2:	f8b1 a000 	ldrh.w	sl, [r1]
 800f2c6:	f1ba 0f00 	cmp.w	sl, #0
 800f2ca:	d024      	beq.n	800f316 <__multiply+0xf2>
 800f2cc:	f104 0e14 	add.w	lr, r4, #20
 800f2d0:	46a9      	mov	r9, r5
 800f2d2:	f04f 0c00 	mov.w	ip, #0
 800f2d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f2da:	f8d9 3000 	ldr.w	r3, [r9]
 800f2de:	fa1f fb87 	uxth.w	fp, r7
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800f2e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f2ec:	f8d9 7000 	ldr.w	r7, [r9]
 800f2f0:	4463      	add	r3, ip
 800f2f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f2f6:	fb0a c70b 	mla	r7, sl, fp, ip
 800f2fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f304:	4572      	cmp	r2, lr
 800f306:	f849 3b04 	str.w	r3, [r9], #4
 800f30a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f30e:	d8e2      	bhi.n	800f2d6 <__multiply+0xb2>
 800f310:	9b01      	ldr	r3, [sp, #4]
 800f312:	f845 c003 	str.w	ip, [r5, r3]
 800f316:	9b03      	ldr	r3, [sp, #12]
 800f318:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f31c:	3104      	adds	r1, #4
 800f31e:	f1b9 0f00 	cmp.w	r9, #0
 800f322:	d021      	beq.n	800f368 <__multiply+0x144>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	f104 0c14 	add.w	ip, r4, #20
 800f32a:	46ae      	mov	lr, r5
 800f32c:	f04f 0a00 	mov.w	sl, #0
 800f330:	f8bc b000 	ldrh.w	fp, [ip]
 800f334:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f338:	fb09 770b 	mla	r7, r9, fp, r7
 800f33c:	4457      	add	r7, sl
 800f33e:	b29b      	uxth	r3, r3
 800f340:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f344:	f84e 3b04 	str.w	r3, [lr], #4
 800f348:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f34c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f350:	f8be 3000 	ldrh.w	r3, [lr]
 800f354:	fb09 330a 	mla	r3, r9, sl, r3
 800f358:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f35c:	4562      	cmp	r2, ip
 800f35e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f362:	d8e5      	bhi.n	800f330 <__multiply+0x10c>
 800f364:	9f01      	ldr	r7, [sp, #4]
 800f366:	51eb      	str	r3, [r5, r7]
 800f368:	3504      	adds	r5, #4
 800f36a:	e799      	b.n	800f2a0 <__multiply+0x7c>
 800f36c:	3e01      	subs	r6, #1
 800f36e:	e79b      	b.n	800f2a8 <__multiply+0x84>
 800f370:	08010c91 	.word	0x08010c91
 800f374:	08010d19 	.word	0x08010d19

0800f378 <__pow5mult>:
 800f378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f37c:	4615      	mov	r5, r2
 800f37e:	f012 0203 	ands.w	r2, r2, #3
 800f382:	4607      	mov	r7, r0
 800f384:	460e      	mov	r6, r1
 800f386:	d007      	beq.n	800f398 <__pow5mult+0x20>
 800f388:	4c25      	ldr	r4, [pc, #148]	@ (800f420 <__pow5mult+0xa8>)
 800f38a:	3a01      	subs	r2, #1
 800f38c:	2300      	movs	r3, #0
 800f38e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f392:	f7ff fe55 	bl	800f040 <__multadd>
 800f396:	4606      	mov	r6, r0
 800f398:	10ad      	asrs	r5, r5, #2
 800f39a:	d03d      	beq.n	800f418 <__pow5mult+0xa0>
 800f39c:	69fc      	ldr	r4, [r7, #28]
 800f39e:	b97c      	cbnz	r4, 800f3c0 <__pow5mult+0x48>
 800f3a0:	2010      	movs	r0, #16
 800f3a2:	f000 fe97 	bl	80100d4 <malloc>
 800f3a6:	4602      	mov	r2, r0
 800f3a8:	61f8      	str	r0, [r7, #28]
 800f3aa:	b928      	cbnz	r0, 800f3b8 <__pow5mult+0x40>
 800f3ac:	4b1d      	ldr	r3, [pc, #116]	@ (800f424 <__pow5mult+0xac>)
 800f3ae:	481e      	ldr	r0, [pc, #120]	@ (800f428 <__pow5mult+0xb0>)
 800f3b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f3b4:	f000 fe5c 	bl	8010070 <__assert_func>
 800f3b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f3bc:	6004      	str	r4, [r0, #0]
 800f3be:	60c4      	str	r4, [r0, #12]
 800f3c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f3c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f3c8:	b94c      	cbnz	r4, 800f3de <__pow5mult+0x66>
 800f3ca:	f240 2171 	movw	r1, #625	@ 0x271
 800f3ce:	4638      	mov	r0, r7
 800f3d0:	f7ff ff12 	bl	800f1f8 <__i2b>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800f3da:	4604      	mov	r4, r0
 800f3dc:	6003      	str	r3, [r0, #0]
 800f3de:	f04f 0900 	mov.w	r9, #0
 800f3e2:	07eb      	lsls	r3, r5, #31
 800f3e4:	d50a      	bpl.n	800f3fc <__pow5mult+0x84>
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	4622      	mov	r2, r4
 800f3ea:	4638      	mov	r0, r7
 800f3ec:	f7ff ff1a 	bl	800f224 <__multiply>
 800f3f0:	4631      	mov	r1, r6
 800f3f2:	4680      	mov	r8, r0
 800f3f4:	4638      	mov	r0, r7
 800f3f6:	f7ff fe01 	bl	800effc <_Bfree>
 800f3fa:	4646      	mov	r6, r8
 800f3fc:	106d      	asrs	r5, r5, #1
 800f3fe:	d00b      	beq.n	800f418 <__pow5mult+0xa0>
 800f400:	6820      	ldr	r0, [r4, #0]
 800f402:	b938      	cbnz	r0, 800f414 <__pow5mult+0x9c>
 800f404:	4622      	mov	r2, r4
 800f406:	4621      	mov	r1, r4
 800f408:	4638      	mov	r0, r7
 800f40a:	f7ff ff0b 	bl	800f224 <__multiply>
 800f40e:	6020      	str	r0, [r4, #0]
 800f410:	f8c0 9000 	str.w	r9, [r0]
 800f414:	4604      	mov	r4, r0
 800f416:	e7e4      	b.n	800f3e2 <__pow5mult+0x6a>
 800f418:	4630      	mov	r0, r6
 800f41a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f41e:	bf00      	nop
 800f420:	08010d74 	.word	0x08010d74
 800f424:	08010d02 	.word	0x08010d02
 800f428:	08010d19 	.word	0x08010d19

0800f42c <__lshift>:
 800f42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f430:	460c      	mov	r4, r1
 800f432:	6849      	ldr	r1, [r1, #4]
 800f434:	6923      	ldr	r3, [r4, #16]
 800f436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f43a:	68a3      	ldr	r3, [r4, #8]
 800f43c:	4607      	mov	r7, r0
 800f43e:	4691      	mov	r9, r2
 800f440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f444:	f108 0601 	add.w	r6, r8, #1
 800f448:	42b3      	cmp	r3, r6
 800f44a:	db0b      	blt.n	800f464 <__lshift+0x38>
 800f44c:	4638      	mov	r0, r7
 800f44e:	f7ff fd95 	bl	800ef7c <_Balloc>
 800f452:	4605      	mov	r5, r0
 800f454:	b948      	cbnz	r0, 800f46a <__lshift+0x3e>
 800f456:	4602      	mov	r2, r0
 800f458:	4b28      	ldr	r3, [pc, #160]	@ (800f4fc <__lshift+0xd0>)
 800f45a:	4829      	ldr	r0, [pc, #164]	@ (800f500 <__lshift+0xd4>)
 800f45c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f460:	f000 fe06 	bl	8010070 <__assert_func>
 800f464:	3101      	adds	r1, #1
 800f466:	005b      	lsls	r3, r3, #1
 800f468:	e7ee      	b.n	800f448 <__lshift+0x1c>
 800f46a:	2300      	movs	r3, #0
 800f46c:	f100 0114 	add.w	r1, r0, #20
 800f470:	f100 0210 	add.w	r2, r0, #16
 800f474:	4618      	mov	r0, r3
 800f476:	4553      	cmp	r3, sl
 800f478:	db33      	blt.n	800f4e2 <__lshift+0xb6>
 800f47a:	6920      	ldr	r0, [r4, #16]
 800f47c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f480:	f104 0314 	add.w	r3, r4, #20
 800f484:	f019 091f 	ands.w	r9, r9, #31
 800f488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f48c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f490:	d02b      	beq.n	800f4ea <__lshift+0xbe>
 800f492:	f1c9 0e20 	rsb	lr, r9, #32
 800f496:	468a      	mov	sl, r1
 800f498:	2200      	movs	r2, #0
 800f49a:	6818      	ldr	r0, [r3, #0]
 800f49c:	fa00 f009 	lsl.w	r0, r0, r9
 800f4a0:	4310      	orrs	r0, r2
 800f4a2:	f84a 0b04 	str.w	r0, [sl], #4
 800f4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4aa:	459c      	cmp	ip, r3
 800f4ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800f4b0:	d8f3      	bhi.n	800f49a <__lshift+0x6e>
 800f4b2:	ebac 0304 	sub.w	r3, ip, r4
 800f4b6:	3b15      	subs	r3, #21
 800f4b8:	f023 0303 	bic.w	r3, r3, #3
 800f4bc:	3304      	adds	r3, #4
 800f4be:	f104 0015 	add.w	r0, r4, #21
 800f4c2:	4584      	cmp	ip, r0
 800f4c4:	bf38      	it	cc
 800f4c6:	2304      	movcc	r3, #4
 800f4c8:	50ca      	str	r2, [r1, r3]
 800f4ca:	b10a      	cbz	r2, 800f4d0 <__lshift+0xa4>
 800f4cc:	f108 0602 	add.w	r6, r8, #2
 800f4d0:	3e01      	subs	r6, #1
 800f4d2:	4638      	mov	r0, r7
 800f4d4:	612e      	str	r6, [r5, #16]
 800f4d6:	4621      	mov	r1, r4
 800f4d8:	f7ff fd90 	bl	800effc <_Bfree>
 800f4dc:	4628      	mov	r0, r5
 800f4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	e7c5      	b.n	800f476 <__lshift+0x4a>
 800f4ea:	3904      	subs	r1, #4
 800f4ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800f4f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f4f4:	459c      	cmp	ip, r3
 800f4f6:	d8f9      	bhi.n	800f4ec <__lshift+0xc0>
 800f4f8:	e7ea      	b.n	800f4d0 <__lshift+0xa4>
 800f4fa:	bf00      	nop
 800f4fc:	08010c91 	.word	0x08010c91
 800f500:	08010d19 	.word	0x08010d19

0800f504 <__mcmp>:
 800f504:	690a      	ldr	r2, [r1, #16]
 800f506:	4603      	mov	r3, r0
 800f508:	6900      	ldr	r0, [r0, #16]
 800f50a:	1a80      	subs	r0, r0, r2
 800f50c:	b530      	push	{r4, r5, lr}
 800f50e:	d10e      	bne.n	800f52e <__mcmp+0x2a>
 800f510:	3314      	adds	r3, #20
 800f512:	3114      	adds	r1, #20
 800f514:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f518:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f51c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f520:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f524:	4295      	cmp	r5, r2
 800f526:	d003      	beq.n	800f530 <__mcmp+0x2c>
 800f528:	d205      	bcs.n	800f536 <__mcmp+0x32>
 800f52a:	f04f 30ff 	mov.w	r0, #4294967295
 800f52e:	bd30      	pop	{r4, r5, pc}
 800f530:	42a3      	cmp	r3, r4
 800f532:	d3f3      	bcc.n	800f51c <__mcmp+0x18>
 800f534:	e7fb      	b.n	800f52e <__mcmp+0x2a>
 800f536:	2001      	movs	r0, #1
 800f538:	e7f9      	b.n	800f52e <__mcmp+0x2a>
	...

0800f53c <__mdiff>:
 800f53c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f540:	4689      	mov	r9, r1
 800f542:	4606      	mov	r6, r0
 800f544:	4611      	mov	r1, r2
 800f546:	4648      	mov	r0, r9
 800f548:	4614      	mov	r4, r2
 800f54a:	f7ff ffdb 	bl	800f504 <__mcmp>
 800f54e:	1e05      	subs	r5, r0, #0
 800f550:	d112      	bne.n	800f578 <__mdiff+0x3c>
 800f552:	4629      	mov	r1, r5
 800f554:	4630      	mov	r0, r6
 800f556:	f7ff fd11 	bl	800ef7c <_Balloc>
 800f55a:	4602      	mov	r2, r0
 800f55c:	b928      	cbnz	r0, 800f56a <__mdiff+0x2e>
 800f55e:	4b3f      	ldr	r3, [pc, #252]	@ (800f65c <__mdiff+0x120>)
 800f560:	f240 2137 	movw	r1, #567	@ 0x237
 800f564:	483e      	ldr	r0, [pc, #248]	@ (800f660 <__mdiff+0x124>)
 800f566:	f000 fd83 	bl	8010070 <__assert_func>
 800f56a:	2301      	movs	r3, #1
 800f56c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f570:	4610      	mov	r0, r2
 800f572:	b003      	add	sp, #12
 800f574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f578:	bfbc      	itt	lt
 800f57a:	464b      	movlt	r3, r9
 800f57c:	46a1      	movlt	r9, r4
 800f57e:	4630      	mov	r0, r6
 800f580:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f584:	bfba      	itte	lt
 800f586:	461c      	movlt	r4, r3
 800f588:	2501      	movlt	r5, #1
 800f58a:	2500      	movge	r5, #0
 800f58c:	f7ff fcf6 	bl	800ef7c <_Balloc>
 800f590:	4602      	mov	r2, r0
 800f592:	b918      	cbnz	r0, 800f59c <__mdiff+0x60>
 800f594:	4b31      	ldr	r3, [pc, #196]	@ (800f65c <__mdiff+0x120>)
 800f596:	f240 2145 	movw	r1, #581	@ 0x245
 800f59a:	e7e3      	b.n	800f564 <__mdiff+0x28>
 800f59c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f5a0:	6926      	ldr	r6, [r4, #16]
 800f5a2:	60c5      	str	r5, [r0, #12]
 800f5a4:	f109 0310 	add.w	r3, r9, #16
 800f5a8:	f109 0514 	add.w	r5, r9, #20
 800f5ac:	f104 0e14 	add.w	lr, r4, #20
 800f5b0:	f100 0b14 	add.w	fp, r0, #20
 800f5b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f5b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f5bc:	9301      	str	r3, [sp, #4]
 800f5be:	46d9      	mov	r9, fp
 800f5c0:	f04f 0c00 	mov.w	ip, #0
 800f5c4:	9b01      	ldr	r3, [sp, #4]
 800f5c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f5ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f5ce:	9301      	str	r3, [sp, #4]
 800f5d0:	fa1f f38a 	uxth.w	r3, sl
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	b283      	uxth	r3, r0
 800f5d8:	1acb      	subs	r3, r1, r3
 800f5da:	0c00      	lsrs	r0, r0, #16
 800f5dc:	4463      	add	r3, ip
 800f5de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f5e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f5ec:	4576      	cmp	r6, lr
 800f5ee:	f849 3b04 	str.w	r3, [r9], #4
 800f5f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f5f6:	d8e5      	bhi.n	800f5c4 <__mdiff+0x88>
 800f5f8:	1b33      	subs	r3, r6, r4
 800f5fa:	3b15      	subs	r3, #21
 800f5fc:	f023 0303 	bic.w	r3, r3, #3
 800f600:	3415      	adds	r4, #21
 800f602:	3304      	adds	r3, #4
 800f604:	42a6      	cmp	r6, r4
 800f606:	bf38      	it	cc
 800f608:	2304      	movcc	r3, #4
 800f60a:	441d      	add	r5, r3
 800f60c:	445b      	add	r3, fp
 800f60e:	461e      	mov	r6, r3
 800f610:	462c      	mov	r4, r5
 800f612:	4544      	cmp	r4, r8
 800f614:	d30e      	bcc.n	800f634 <__mdiff+0xf8>
 800f616:	f108 0103 	add.w	r1, r8, #3
 800f61a:	1b49      	subs	r1, r1, r5
 800f61c:	f021 0103 	bic.w	r1, r1, #3
 800f620:	3d03      	subs	r5, #3
 800f622:	45a8      	cmp	r8, r5
 800f624:	bf38      	it	cc
 800f626:	2100      	movcc	r1, #0
 800f628:	440b      	add	r3, r1
 800f62a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f62e:	b191      	cbz	r1, 800f656 <__mdiff+0x11a>
 800f630:	6117      	str	r7, [r2, #16]
 800f632:	e79d      	b.n	800f570 <__mdiff+0x34>
 800f634:	f854 1b04 	ldr.w	r1, [r4], #4
 800f638:	46e6      	mov	lr, ip
 800f63a:	0c08      	lsrs	r0, r1, #16
 800f63c:	fa1c fc81 	uxtah	ip, ip, r1
 800f640:	4471      	add	r1, lr
 800f642:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f646:	b289      	uxth	r1, r1
 800f648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f64c:	f846 1b04 	str.w	r1, [r6], #4
 800f650:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f654:	e7dd      	b.n	800f612 <__mdiff+0xd6>
 800f656:	3f01      	subs	r7, #1
 800f658:	e7e7      	b.n	800f62a <__mdiff+0xee>
 800f65a:	bf00      	nop
 800f65c:	08010c91 	.word	0x08010c91
 800f660:	08010d19 	.word	0x08010d19

0800f664 <__ulp>:
 800f664:	b082      	sub	sp, #8
 800f666:	ed8d 0b00 	vstr	d0, [sp]
 800f66a:	9a01      	ldr	r2, [sp, #4]
 800f66c:	4b0f      	ldr	r3, [pc, #60]	@ (800f6ac <__ulp+0x48>)
 800f66e:	4013      	ands	r3, r2
 800f670:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800f674:	2b00      	cmp	r3, #0
 800f676:	dc08      	bgt.n	800f68a <__ulp+0x26>
 800f678:	425b      	negs	r3, r3
 800f67a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800f67e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800f682:	da04      	bge.n	800f68e <__ulp+0x2a>
 800f684:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800f688:	4113      	asrs	r3, r2
 800f68a:	2200      	movs	r2, #0
 800f68c:	e008      	b.n	800f6a0 <__ulp+0x3c>
 800f68e:	f1a2 0314 	sub.w	r3, r2, #20
 800f692:	2b1e      	cmp	r3, #30
 800f694:	bfda      	itte	le
 800f696:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800f69a:	40da      	lsrle	r2, r3
 800f69c:	2201      	movgt	r2, #1
 800f69e:	2300      	movs	r3, #0
 800f6a0:	4619      	mov	r1, r3
 800f6a2:	4610      	mov	r0, r2
 800f6a4:	ec41 0b10 	vmov	d0, r0, r1
 800f6a8:	b002      	add	sp, #8
 800f6aa:	4770      	bx	lr
 800f6ac:	7ff00000 	.word	0x7ff00000

0800f6b0 <__b2d>:
 800f6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6b4:	6906      	ldr	r6, [r0, #16]
 800f6b6:	f100 0814 	add.w	r8, r0, #20
 800f6ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f6be:	1f37      	subs	r7, r6, #4
 800f6c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	f7ff fd4b 	bl	800f160 <__hi0bits>
 800f6ca:	f1c0 0320 	rsb	r3, r0, #32
 800f6ce:	280a      	cmp	r0, #10
 800f6d0:	600b      	str	r3, [r1, #0]
 800f6d2:	491b      	ldr	r1, [pc, #108]	@ (800f740 <__b2d+0x90>)
 800f6d4:	dc15      	bgt.n	800f702 <__b2d+0x52>
 800f6d6:	f1c0 0c0b 	rsb	ip, r0, #11
 800f6da:	fa22 f30c 	lsr.w	r3, r2, ip
 800f6de:	45b8      	cmp	r8, r7
 800f6e0:	ea43 0501 	orr.w	r5, r3, r1
 800f6e4:	bf34      	ite	cc
 800f6e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f6ea:	2300      	movcs	r3, #0
 800f6ec:	3015      	adds	r0, #21
 800f6ee:	fa02 f000 	lsl.w	r0, r2, r0
 800f6f2:	fa23 f30c 	lsr.w	r3, r3, ip
 800f6f6:	4303      	orrs	r3, r0
 800f6f8:	461c      	mov	r4, r3
 800f6fa:	ec45 4b10 	vmov	d0, r4, r5
 800f6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f702:	45b8      	cmp	r8, r7
 800f704:	bf3a      	itte	cc
 800f706:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800f70a:	f1a6 0708 	subcc.w	r7, r6, #8
 800f70e:	2300      	movcs	r3, #0
 800f710:	380b      	subs	r0, #11
 800f712:	d012      	beq.n	800f73a <__b2d+0x8a>
 800f714:	f1c0 0120 	rsb	r1, r0, #32
 800f718:	fa23 f401 	lsr.w	r4, r3, r1
 800f71c:	4082      	lsls	r2, r0
 800f71e:	4322      	orrs	r2, r4
 800f720:	4547      	cmp	r7, r8
 800f722:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800f726:	bf8c      	ite	hi
 800f728:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800f72c:	2200      	movls	r2, #0
 800f72e:	4083      	lsls	r3, r0
 800f730:	40ca      	lsrs	r2, r1
 800f732:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f736:	4313      	orrs	r3, r2
 800f738:	e7de      	b.n	800f6f8 <__b2d+0x48>
 800f73a:	ea42 0501 	orr.w	r5, r2, r1
 800f73e:	e7db      	b.n	800f6f8 <__b2d+0x48>
 800f740:	3ff00000 	.word	0x3ff00000

0800f744 <__d2b>:
 800f744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f748:	460f      	mov	r7, r1
 800f74a:	2101      	movs	r1, #1
 800f74c:	ec59 8b10 	vmov	r8, r9, d0
 800f750:	4616      	mov	r6, r2
 800f752:	f7ff fc13 	bl	800ef7c <_Balloc>
 800f756:	4604      	mov	r4, r0
 800f758:	b930      	cbnz	r0, 800f768 <__d2b+0x24>
 800f75a:	4602      	mov	r2, r0
 800f75c:	4b23      	ldr	r3, [pc, #140]	@ (800f7ec <__d2b+0xa8>)
 800f75e:	4824      	ldr	r0, [pc, #144]	@ (800f7f0 <__d2b+0xac>)
 800f760:	f240 310f 	movw	r1, #783	@ 0x30f
 800f764:	f000 fc84 	bl	8010070 <__assert_func>
 800f768:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f76c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f770:	b10d      	cbz	r5, 800f776 <__d2b+0x32>
 800f772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f776:	9301      	str	r3, [sp, #4]
 800f778:	f1b8 0300 	subs.w	r3, r8, #0
 800f77c:	d023      	beq.n	800f7c6 <__d2b+0x82>
 800f77e:	4668      	mov	r0, sp
 800f780:	9300      	str	r3, [sp, #0]
 800f782:	f7ff fd0c 	bl	800f19e <__lo0bits>
 800f786:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f78a:	b1d0      	cbz	r0, 800f7c2 <__d2b+0x7e>
 800f78c:	f1c0 0320 	rsb	r3, r0, #32
 800f790:	fa02 f303 	lsl.w	r3, r2, r3
 800f794:	430b      	orrs	r3, r1
 800f796:	40c2      	lsrs	r2, r0
 800f798:	6163      	str	r3, [r4, #20]
 800f79a:	9201      	str	r2, [sp, #4]
 800f79c:	9b01      	ldr	r3, [sp, #4]
 800f79e:	61a3      	str	r3, [r4, #24]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	bf0c      	ite	eq
 800f7a4:	2201      	moveq	r2, #1
 800f7a6:	2202      	movne	r2, #2
 800f7a8:	6122      	str	r2, [r4, #16]
 800f7aa:	b1a5      	cbz	r5, 800f7d6 <__d2b+0x92>
 800f7ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f7b0:	4405      	add	r5, r0
 800f7b2:	603d      	str	r5, [r7, #0]
 800f7b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f7b8:	6030      	str	r0, [r6, #0]
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	b003      	add	sp, #12
 800f7be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7c2:	6161      	str	r1, [r4, #20]
 800f7c4:	e7ea      	b.n	800f79c <__d2b+0x58>
 800f7c6:	a801      	add	r0, sp, #4
 800f7c8:	f7ff fce9 	bl	800f19e <__lo0bits>
 800f7cc:	9b01      	ldr	r3, [sp, #4]
 800f7ce:	6163      	str	r3, [r4, #20]
 800f7d0:	3020      	adds	r0, #32
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	e7e8      	b.n	800f7a8 <__d2b+0x64>
 800f7d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f7da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f7de:	6038      	str	r0, [r7, #0]
 800f7e0:	6918      	ldr	r0, [r3, #16]
 800f7e2:	f7ff fcbd 	bl	800f160 <__hi0bits>
 800f7e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f7ea:	e7e5      	b.n	800f7b8 <__d2b+0x74>
 800f7ec:	08010c91 	.word	0x08010c91
 800f7f0:	08010d19 	.word	0x08010d19

0800f7f4 <__ratio>:
 800f7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7f8:	b085      	sub	sp, #20
 800f7fa:	e9cd 1000 	strd	r1, r0, [sp]
 800f7fe:	a902      	add	r1, sp, #8
 800f800:	f7ff ff56 	bl	800f6b0 <__b2d>
 800f804:	9800      	ldr	r0, [sp, #0]
 800f806:	a903      	add	r1, sp, #12
 800f808:	ec55 4b10 	vmov	r4, r5, d0
 800f80c:	f7ff ff50 	bl	800f6b0 <__b2d>
 800f810:	9b01      	ldr	r3, [sp, #4]
 800f812:	6919      	ldr	r1, [r3, #16]
 800f814:	9b00      	ldr	r3, [sp, #0]
 800f816:	691b      	ldr	r3, [r3, #16]
 800f818:	1ac9      	subs	r1, r1, r3
 800f81a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f81e:	1a9b      	subs	r3, r3, r2
 800f820:	ec5b ab10 	vmov	sl, fp, d0
 800f824:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800f828:	2b00      	cmp	r3, #0
 800f82a:	bfce      	itee	gt
 800f82c:	462a      	movgt	r2, r5
 800f82e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f832:	465a      	movle	r2, fp
 800f834:	462f      	mov	r7, r5
 800f836:	46d9      	mov	r9, fp
 800f838:	bfcc      	ite	gt
 800f83a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f83e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800f842:	464b      	mov	r3, r9
 800f844:	4652      	mov	r2, sl
 800f846:	4620      	mov	r0, r4
 800f848:	4639      	mov	r1, r7
 800f84a:	f7f1 f82f 	bl	80008ac <__aeabi_ddiv>
 800f84e:	ec41 0b10 	vmov	d0, r0, r1
 800f852:	b005      	add	sp, #20
 800f854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f858 <__copybits>:
 800f858:	3901      	subs	r1, #1
 800f85a:	b570      	push	{r4, r5, r6, lr}
 800f85c:	1149      	asrs	r1, r1, #5
 800f85e:	6914      	ldr	r4, [r2, #16]
 800f860:	3101      	adds	r1, #1
 800f862:	f102 0314 	add.w	r3, r2, #20
 800f866:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f86a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f86e:	1f05      	subs	r5, r0, #4
 800f870:	42a3      	cmp	r3, r4
 800f872:	d30c      	bcc.n	800f88e <__copybits+0x36>
 800f874:	1aa3      	subs	r3, r4, r2
 800f876:	3b11      	subs	r3, #17
 800f878:	f023 0303 	bic.w	r3, r3, #3
 800f87c:	3211      	adds	r2, #17
 800f87e:	42a2      	cmp	r2, r4
 800f880:	bf88      	it	hi
 800f882:	2300      	movhi	r3, #0
 800f884:	4418      	add	r0, r3
 800f886:	2300      	movs	r3, #0
 800f888:	4288      	cmp	r0, r1
 800f88a:	d305      	bcc.n	800f898 <__copybits+0x40>
 800f88c:	bd70      	pop	{r4, r5, r6, pc}
 800f88e:	f853 6b04 	ldr.w	r6, [r3], #4
 800f892:	f845 6f04 	str.w	r6, [r5, #4]!
 800f896:	e7eb      	b.n	800f870 <__copybits+0x18>
 800f898:	f840 3b04 	str.w	r3, [r0], #4
 800f89c:	e7f4      	b.n	800f888 <__copybits+0x30>

0800f89e <__any_on>:
 800f89e:	f100 0214 	add.w	r2, r0, #20
 800f8a2:	6900      	ldr	r0, [r0, #16]
 800f8a4:	114b      	asrs	r3, r1, #5
 800f8a6:	4298      	cmp	r0, r3
 800f8a8:	b510      	push	{r4, lr}
 800f8aa:	db11      	blt.n	800f8d0 <__any_on+0x32>
 800f8ac:	dd0a      	ble.n	800f8c4 <__any_on+0x26>
 800f8ae:	f011 011f 	ands.w	r1, r1, #31
 800f8b2:	d007      	beq.n	800f8c4 <__any_on+0x26>
 800f8b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f8b8:	fa24 f001 	lsr.w	r0, r4, r1
 800f8bc:	fa00 f101 	lsl.w	r1, r0, r1
 800f8c0:	428c      	cmp	r4, r1
 800f8c2:	d10b      	bne.n	800f8dc <__any_on+0x3e>
 800f8c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d803      	bhi.n	800f8d4 <__any_on+0x36>
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	bd10      	pop	{r4, pc}
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	e7f7      	b.n	800f8c4 <__any_on+0x26>
 800f8d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f8d8:	2900      	cmp	r1, #0
 800f8da:	d0f5      	beq.n	800f8c8 <__any_on+0x2a>
 800f8dc:	2001      	movs	r0, #1
 800f8de:	e7f6      	b.n	800f8ce <__any_on+0x30>

0800f8e0 <__ascii_wctomb>:
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	4608      	mov	r0, r1
 800f8e4:	b141      	cbz	r1, 800f8f8 <__ascii_wctomb+0x18>
 800f8e6:	2aff      	cmp	r2, #255	@ 0xff
 800f8e8:	d904      	bls.n	800f8f4 <__ascii_wctomb+0x14>
 800f8ea:	228a      	movs	r2, #138	@ 0x8a
 800f8ec:	601a      	str	r2, [r3, #0]
 800f8ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f8f2:	4770      	bx	lr
 800f8f4:	700a      	strb	r2, [r1, #0]
 800f8f6:	2001      	movs	r0, #1
 800f8f8:	4770      	bx	lr

0800f8fa <__ssputs_r>:
 800f8fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8fe:	688e      	ldr	r6, [r1, #8]
 800f900:	461f      	mov	r7, r3
 800f902:	42be      	cmp	r6, r7
 800f904:	680b      	ldr	r3, [r1, #0]
 800f906:	4682      	mov	sl, r0
 800f908:	460c      	mov	r4, r1
 800f90a:	4690      	mov	r8, r2
 800f90c:	d82d      	bhi.n	800f96a <__ssputs_r+0x70>
 800f90e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f912:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f916:	d026      	beq.n	800f966 <__ssputs_r+0x6c>
 800f918:	6965      	ldr	r5, [r4, #20]
 800f91a:	6909      	ldr	r1, [r1, #16]
 800f91c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f920:	eba3 0901 	sub.w	r9, r3, r1
 800f924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f928:	1c7b      	adds	r3, r7, #1
 800f92a:	444b      	add	r3, r9
 800f92c:	106d      	asrs	r5, r5, #1
 800f92e:	429d      	cmp	r5, r3
 800f930:	bf38      	it	cc
 800f932:	461d      	movcc	r5, r3
 800f934:	0553      	lsls	r3, r2, #21
 800f936:	d527      	bpl.n	800f988 <__ssputs_r+0x8e>
 800f938:	4629      	mov	r1, r5
 800f93a:	f7ff fa81 	bl	800ee40 <_malloc_r>
 800f93e:	4606      	mov	r6, r0
 800f940:	b360      	cbz	r0, 800f99c <__ssputs_r+0xa2>
 800f942:	6921      	ldr	r1, [r4, #16]
 800f944:	464a      	mov	r2, r9
 800f946:	f7fe feb6 	bl	800e6b6 <memcpy>
 800f94a:	89a3      	ldrh	r3, [r4, #12]
 800f94c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f954:	81a3      	strh	r3, [r4, #12]
 800f956:	6126      	str	r6, [r4, #16]
 800f958:	6165      	str	r5, [r4, #20]
 800f95a:	444e      	add	r6, r9
 800f95c:	eba5 0509 	sub.w	r5, r5, r9
 800f960:	6026      	str	r6, [r4, #0]
 800f962:	60a5      	str	r5, [r4, #8]
 800f964:	463e      	mov	r6, r7
 800f966:	42be      	cmp	r6, r7
 800f968:	d900      	bls.n	800f96c <__ssputs_r+0x72>
 800f96a:	463e      	mov	r6, r7
 800f96c:	6820      	ldr	r0, [r4, #0]
 800f96e:	4632      	mov	r2, r6
 800f970:	4641      	mov	r1, r8
 800f972:	f000 fb53 	bl	801001c <memmove>
 800f976:	68a3      	ldr	r3, [r4, #8]
 800f978:	1b9b      	subs	r3, r3, r6
 800f97a:	60a3      	str	r3, [r4, #8]
 800f97c:	6823      	ldr	r3, [r4, #0]
 800f97e:	4433      	add	r3, r6
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	2000      	movs	r0, #0
 800f984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f988:	462a      	mov	r2, r5
 800f98a:	f000 fbab 	bl	80100e4 <_realloc_r>
 800f98e:	4606      	mov	r6, r0
 800f990:	2800      	cmp	r0, #0
 800f992:	d1e0      	bne.n	800f956 <__ssputs_r+0x5c>
 800f994:	6921      	ldr	r1, [r4, #16]
 800f996:	4650      	mov	r0, sl
 800f998:	f7fe feac 	bl	800e6f4 <_free_r>
 800f99c:	230c      	movs	r3, #12
 800f99e:	f8ca 3000 	str.w	r3, [sl]
 800f9a2:	89a3      	ldrh	r3, [r4, #12]
 800f9a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f9a8:	81a3      	strh	r3, [r4, #12]
 800f9aa:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ae:	e7e9      	b.n	800f984 <__ssputs_r+0x8a>

0800f9b0 <_svfiprintf_r>:
 800f9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b4:	4698      	mov	r8, r3
 800f9b6:	898b      	ldrh	r3, [r1, #12]
 800f9b8:	061b      	lsls	r3, r3, #24
 800f9ba:	b09d      	sub	sp, #116	@ 0x74
 800f9bc:	4607      	mov	r7, r0
 800f9be:	460d      	mov	r5, r1
 800f9c0:	4614      	mov	r4, r2
 800f9c2:	d510      	bpl.n	800f9e6 <_svfiprintf_r+0x36>
 800f9c4:	690b      	ldr	r3, [r1, #16]
 800f9c6:	b973      	cbnz	r3, 800f9e6 <_svfiprintf_r+0x36>
 800f9c8:	2140      	movs	r1, #64	@ 0x40
 800f9ca:	f7ff fa39 	bl	800ee40 <_malloc_r>
 800f9ce:	6028      	str	r0, [r5, #0]
 800f9d0:	6128      	str	r0, [r5, #16]
 800f9d2:	b930      	cbnz	r0, 800f9e2 <_svfiprintf_r+0x32>
 800f9d4:	230c      	movs	r3, #12
 800f9d6:	603b      	str	r3, [r7, #0]
 800f9d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9dc:	b01d      	add	sp, #116	@ 0x74
 800f9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e2:	2340      	movs	r3, #64	@ 0x40
 800f9e4:	616b      	str	r3, [r5, #20]
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f9ea:	2320      	movs	r3, #32
 800f9ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f9f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9f4:	2330      	movs	r3, #48	@ 0x30
 800f9f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fb94 <_svfiprintf_r+0x1e4>
 800f9fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f9fe:	f04f 0901 	mov.w	r9, #1
 800fa02:	4623      	mov	r3, r4
 800fa04:	469a      	mov	sl, r3
 800fa06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa0a:	b10a      	cbz	r2, 800fa10 <_svfiprintf_r+0x60>
 800fa0c:	2a25      	cmp	r2, #37	@ 0x25
 800fa0e:	d1f9      	bne.n	800fa04 <_svfiprintf_r+0x54>
 800fa10:	ebba 0b04 	subs.w	fp, sl, r4
 800fa14:	d00b      	beq.n	800fa2e <_svfiprintf_r+0x7e>
 800fa16:	465b      	mov	r3, fp
 800fa18:	4622      	mov	r2, r4
 800fa1a:	4629      	mov	r1, r5
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	f7ff ff6c 	bl	800f8fa <__ssputs_r>
 800fa22:	3001      	adds	r0, #1
 800fa24:	f000 80a7 	beq.w	800fb76 <_svfiprintf_r+0x1c6>
 800fa28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fa2a:	445a      	add	r2, fp
 800fa2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800fa2e:	f89a 3000 	ldrb.w	r3, [sl]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	f000 809f 	beq.w	800fb76 <_svfiprintf_r+0x1c6>
 800fa38:	2300      	movs	r3, #0
 800fa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa42:	f10a 0a01 	add.w	sl, sl, #1
 800fa46:	9304      	str	r3, [sp, #16]
 800fa48:	9307      	str	r3, [sp, #28]
 800fa4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fa4e:	931a      	str	r3, [sp, #104]	@ 0x68
 800fa50:	4654      	mov	r4, sl
 800fa52:	2205      	movs	r2, #5
 800fa54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa58:	484e      	ldr	r0, [pc, #312]	@ (800fb94 <_svfiprintf_r+0x1e4>)
 800fa5a:	f7f0 fbf1 	bl	8000240 <memchr>
 800fa5e:	9a04      	ldr	r2, [sp, #16]
 800fa60:	b9d8      	cbnz	r0, 800fa9a <_svfiprintf_r+0xea>
 800fa62:	06d0      	lsls	r0, r2, #27
 800fa64:	bf44      	itt	mi
 800fa66:	2320      	movmi	r3, #32
 800fa68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa6c:	0711      	lsls	r1, r2, #28
 800fa6e:	bf44      	itt	mi
 800fa70:	232b      	movmi	r3, #43	@ 0x2b
 800fa72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fa76:	f89a 3000 	ldrb.w	r3, [sl]
 800fa7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa7c:	d015      	beq.n	800faaa <_svfiprintf_r+0xfa>
 800fa7e:	9a07      	ldr	r2, [sp, #28]
 800fa80:	4654      	mov	r4, sl
 800fa82:	2000      	movs	r0, #0
 800fa84:	f04f 0c0a 	mov.w	ip, #10
 800fa88:	4621      	mov	r1, r4
 800fa8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa8e:	3b30      	subs	r3, #48	@ 0x30
 800fa90:	2b09      	cmp	r3, #9
 800fa92:	d94b      	bls.n	800fb2c <_svfiprintf_r+0x17c>
 800fa94:	b1b0      	cbz	r0, 800fac4 <_svfiprintf_r+0x114>
 800fa96:	9207      	str	r2, [sp, #28]
 800fa98:	e014      	b.n	800fac4 <_svfiprintf_r+0x114>
 800fa9a:	eba0 0308 	sub.w	r3, r0, r8
 800fa9e:	fa09 f303 	lsl.w	r3, r9, r3
 800faa2:	4313      	orrs	r3, r2
 800faa4:	9304      	str	r3, [sp, #16]
 800faa6:	46a2      	mov	sl, r4
 800faa8:	e7d2      	b.n	800fa50 <_svfiprintf_r+0xa0>
 800faaa:	9b03      	ldr	r3, [sp, #12]
 800faac:	1d19      	adds	r1, r3, #4
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	9103      	str	r1, [sp, #12]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	bfbb      	ittet	lt
 800fab6:	425b      	neglt	r3, r3
 800fab8:	f042 0202 	orrlt.w	r2, r2, #2
 800fabc:	9307      	strge	r3, [sp, #28]
 800fabe:	9307      	strlt	r3, [sp, #28]
 800fac0:	bfb8      	it	lt
 800fac2:	9204      	strlt	r2, [sp, #16]
 800fac4:	7823      	ldrb	r3, [r4, #0]
 800fac6:	2b2e      	cmp	r3, #46	@ 0x2e
 800fac8:	d10a      	bne.n	800fae0 <_svfiprintf_r+0x130>
 800faca:	7863      	ldrb	r3, [r4, #1]
 800facc:	2b2a      	cmp	r3, #42	@ 0x2a
 800face:	d132      	bne.n	800fb36 <_svfiprintf_r+0x186>
 800fad0:	9b03      	ldr	r3, [sp, #12]
 800fad2:	1d1a      	adds	r2, r3, #4
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	9203      	str	r2, [sp, #12]
 800fad8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fadc:	3402      	adds	r4, #2
 800fade:	9305      	str	r3, [sp, #20]
 800fae0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fba4 <_svfiprintf_r+0x1f4>
 800fae4:	7821      	ldrb	r1, [r4, #0]
 800fae6:	2203      	movs	r2, #3
 800fae8:	4650      	mov	r0, sl
 800faea:	f7f0 fba9 	bl	8000240 <memchr>
 800faee:	b138      	cbz	r0, 800fb00 <_svfiprintf_r+0x150>
 800faf0:	9b04      	ldr	r3, [sp, #16]
 800faf2:	eba0 000a 	sub.w	r0, r0, sl
 800faf6:	2240      	movs	r2, #64	@ 0x40
 800faf8:	4082      	lsls	r2, r0
 800fafa:	4313      	orrs	r3, r2
 800fafc:	3401      	adds	r4, #1
 800fafe:	9304      	str	r3, [sp, #16]
 800fb00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb04:	4824      	ldr	r0, [pc, #144]	@ (800fb98 <_svfiprintf_r+0x1e8>)
 800fb06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fb0a:	2206      	movs	r2, #6
 800fb0c:	f7f0 fb98 	bl	8000240 <memchr>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	d036      	beq.n	800fb82 <_svfiprintf_r+0x1d2>
 800fb14:	4b21      	ldr	r3, [pc, #132]	@ (800fb9c <_svfiprintf_r+0x1ec>)
 800fb16:	bb1b      	cbnz	r3, 800fb60 <_svfiprintf_r+0x1b0>
 800fb18:	9b03      	ldr	r3, [sp, #12]
 800fb1a:	3307      	adds	r3, #7
 800fb1c:	f023 0307 	bic.w	r3, r3, #7
 800fb20:	3308      	adds	r3, #8
 800fb22:	9303      	str	r3, [sp, #12]
 800fb24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb26:	4433      	add	r3, r6
 800fb28:	9309      	str	r3, [sp, #36]	@ 0x24
 800fb2a:	e76a      	b.n	800fa02 <_svfiprintf_r+0x52>
 800fb2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fb30:	460c      	mov	r4, r1
 800fb32:	2001      	movs	r0, #1
 800fb34:	e7a8      	b.n	800fa88 <_svfiprintf_r+0xd8>
 800fb36:	2300      	movs	r3, #0
 800fb38:	3401      	adds	r4, #1
 800fb3a:	9305      	str	r3, [sp, #20]
 800fb3c:	4619      	mov	r1, r3
 800fb3e:	f04f 0c0a 	mov.w	ip, #10
 800fb42:	4620      	mov	r0, r4
 800fb44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb48:	3a30      	subs	r2, #48	@ 0x30
 800fb4a:	2a09      	cmp	r2, #9
 800fb4c:	d903      	bls.n	800fb56 <_svfiprintf_r+0x1a6>
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d0c6      	beq.n	800fae0 <_svfiprintf_r+0x130>
 800fb52:	9105      	str	r1, [sp, #20]
 800fb54:	e7c4      	b.n	800fae0 <_svfiprintf_r+0x130>
 800fb56:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e7f0      	b.n	800fb42 <_svfiprintf_r+0x192>
 800fb60:	ab03      	add	r3, sp, #12
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	462a      	mov	r2, r5
 800fb66:	4b0e      	ldr	r3, [pc, #56]	@ (800fba0 <_svfiprintf_r+0x1f0>)
 800fb68:	a904      	add	r1, sp, #16
 800fb6a:	4638      	mov	r0, r7
 800fb6c:	f3af 8000 	nop.w
 800fb70:	1c42      	adds	r2, r0, #1
 800fb72:	4606      	mov	r6, r0
 800fb74:	d1d6      	bne.n	800fb24 <_svfiprintf_r+0x174>
 800fb76:	89ab      	ldrh	r3, [r5, #12]
 800fb78:	065b      	lsls	r3, r3, #25
 800fb7a:	f53f af2d 	bmi.w	800f9d8 <_svfiprintf_r+0x28>
 800fb7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fb80:	e72c      	b.n	800f9dc <_svfiprintf_r+0x2c>
 800fb82:	ab03      	add	r3, sp, #12
 800fb84:	9300      	str	r3, [sp, #0]
 800fb86:	462a      	mov	r2, r5
 800fb88:	4b05      	ldr	r3, [pc, #20]	@ (800fba0 <_svfiprintf_r+0x1f0>)
 800fb8a:	a904      	add	r1, sp, #16
 800fb8c:	4638      	mov	r0, r7
 800fb8e:	f000 f879 	bl	800fc84 <_printf_i>
 800fb92:	e7ed      	b.n	800fb70 <_svfiprintf_r+0x1c0>
 800fb94:	08010e70 	.word	0x08010e70
 800fb98:	08010e7a 	.word	0x08010e7a
 800fb9c:	00000000 	.word	0x00000000
 800fba0:	0800f8fb 	.word	0x0800f8fb
 800fba4:	08010e76 	.word	0x08010e76

0800fba8 <_printf_common>:
 800fba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbac:	4616      	mov	r6, r2
 800fbae:	4698      	mov	r8, r3
 800fbb0:	688a      	ldr	r2, [r1, #8]
 800fbb2:	690b      	ldr	r3, [r1, #16]
 800fbb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	bfb8      	it	lt
 800fbbc:	4613      	movlt	r3, r2
 800fbbe:	6033      	str	r3, [r6, #0]
 800fbc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fbc4:	4607      	mov	r7, r0
 800fbc6:	460c      	mov	r4, r1
 800fbc8:	b10a      	cbz	r2, 800fbce <_printf_common+0x26>
 800fbca:	3301      	adds	r3, #1
 800fbcc:	6033      	str	r3, [r6, #0]
 800fbce:	6823      	ldr	r3, [r4, #0]
 800fbd0:	0699      	lsls	r1, r3, #26
 800fbd2:	bf42      	ittt	mi
 800fbd4:	6833      	ldrmi	r3, [r6, #0]
 800fbd6:	3302      	addmi	r3, #2
 800fbd8:	6033      	strmi	r3, [r6, #0]
 800fbda:	6825      	ldr	r5, [r4, #0]
 800fbdc:	f015 0506 	ands.w	r5, r5, #6
 800fbe0:	d106      	bne.n	800fbf0 <_printf_common+0x48>
 800fbe2:	f104 0a19 	add.w	sl, r4, #25
 800fbe6:	68e3      	ldr	r3, [r4, #12]
 800fbe8:	6832      	ldr	r2, [r6, #0]
 800fbea:	1a9b      	subs	r3, r3, r2
 800fbec:	42ab      	cmp	r3, r5
 800fbee:	dc26      	bgt.n	800fc3e <_printf_common+0x96>
 800fbf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fbf4:	6822      	ldr	r2, [r4, #0]
 800fbf6:	3b00      	subs	r3, #0
 800fbf8:	bf18      	it	ne
 800fbfa:	2301      	movne	r3, #1
 800fbfc:	0692      	lsls	r2, r2, #26
 800fbfe:	d42b      	bmi.n	800fc58 <_printf_common+0xb0>
 800fc00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fc04:	4641      	mov	r1, r8
 800fc06:	4638      	mov	r0, r7
 800fc08:	47c8      	blx	r9
 800fc0a:	3001      	adds	r0, #1
 800fc0c:	d01e      	beq.n	800fc4c <_printf_common+0xa4>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	6922      	ldr	r2, [r4, #16]
 800fc12:	f003 0306 	and.w	r3, r3, #6
 800fc16:	2b04      	cmp	r3, #4
 800fc18:	bf02      	ittt	eq
 800fc1a:	68e5      	ldreq	r5, [r4, #12]
 800fc1c:	6833      	ldreq	r3, [r6, #0]
 800fc1e:	1aed      	subeq	r5, r5, r3
 800fc20:	68a3      	ldr	r3, [r4, #8]
 800fc22:	bf0c      	ite	eq
 800fc24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fc28:	2500      	movne	r5, #0
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	bfc4      	itt	gt
 800fc2e:	1a9b      	subgt	r3, r3, r2
 800fc30:	18ed      	addgt	r5, r5, r3
 800fc32:	2600      	movs	r6, #0
 800fc34:	341a      	adds	r4, #26
 800fc36:	42b5      	cmp	r5, r6
 800fc38:	d11a      	bne.n	800fc70 <_printf_common+0xc8>
 800fc3a:	2000      	movs	r0, #0
 800fc3c:	e008      	b.n	800fc50 <_printf_common+0xa8>
 800fc3e:	2301      	movs	r3, #1
 800fc40:	4652      	mov	r2, sl
 800fc42:	4641      	mov	r1, r8
 800fc44:	4638      	mov	r0, r7
 800fc46:	47c8      	blx	r9
 800fc48:	3001      	adds	r0, #1
 800fc4a:	d103      	bne.n	800fc54 <_printf_common+0xac>
 800fc4c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc54:	3501      	adds	r5, #1
 800fc56:	e7c6      	b.n	800fbe6 <_printf_common+0x3e>
 800fc58:	18e1      	adds	r1, r4, r3
 800fc5a:	1c5a      	adds	r2, r3, #1
 800fc5c:	2030      	movs	r0, #48	@ 0x30
 800fc5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fc62:	4422      	add	r2, r4
 800fc64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fc68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fc6c:	3302      	adds	r3, #2
 800fc6e:	e7c7      	b.n	800fc00 <_printf_common+0x58>
 800fc70:	2301      	movs	r3, #1
 800fc72:	4622      	mov	r2, r4
 800fc74:	4641      	mov	r1, r8
 800fc76:	4638      	mov	r0, r7
 800fc78:	47c8      	blx	r9
 800fc7a:	3001      	adds	r0, #1
 800fc7c:	d0e6      	beq.n	800fc4c <_printf_common+0xa4>
 800fc7e:	3601      	adds	r6, #1
 800fc80:	e7d9      	b.n	800fc36 <_printf_common+0x8e>
	...

0800fc84 <_printf_i>:
 800fc84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fc88:	7e0f      	ldrb	r7, [r1, #24]
 800fc8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fc8c:	2f78      	cmp	r7, #120	@ 0x78
 800fc8e:	4691      	mov	r9, r2
 800fc90:	4680      	mov	r8, r0
 800fc92:	460c      	mov	r4, r1
 800fc94:	469a      	mov	sl, r3
 800fc96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fc9a:	d807      	bhi.n	800fcac <_printf_i+0x28>
 800fc9c:	2f62      	cmp	r7, #98	@ 0x62
 800fc9e:	d80a      	bhi.n	800fcb6 <_printf_i+0x32>
 800fca0:	2f00      	cmp	r7, #0
 800fca2:	f000 80d2 	beq.w	800fe4a <_printf_i+0x1c6>
 800fca6:	2f58      	cmp	r7, #88	@ 0x58
 800fca8:	f000 80b9 	beq.w	800fe1e <_printf_i+0x19a>
 800fcac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fcb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fcb4:	e03a      	b.n	800fd2c <_printf_i+0xa8>
 800fcb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fcba:	2b15      	cmp	r3, #21
 800fcbc:	d8f6      	bhi.n	800fcac <_printf_i+0x28>
 800fcbe:	a101      	add	r1, pc, #4	@ (adr r1, 800fcc4 <_printf_i+0x40>)
 800fcc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fcc4:	0800fd1d 	.word	0x0800fd1d
 800fcc8:	0800fd31 	.word	0x0800fd31
 800fccc:	0800fcad 	.word	0x0800fcad
 800fcd0:	0800fcad 	.word	0x0800fcad
 800fcd4:	0800fcad 	.word	0x0800fcad
 800fcd8:	0800fcad 	.word	0x0800fcad
 800fcdc:	0800fd31 	.word	0x0800fd31
 800fce0:	0800fcad 	.word	0x0800fcad
 800fce4:	0800fcad 	.word	0x0800fcad
 800fce8:	0800fcad 	.word	0x0800fcad
 800fcec:	0800fcad 	.word	0x0800fcad
 800fcf0:	0800fe31 	.word	0x0800fe31
 800fcf4:	0800fd5b 	.word	0x0800fd5b
 800fcf8:	0800fdeb 	.word	0x0800fdeb
 800fcfc:	0800fcad 	.word	0x0800fcad
 800fd00:	0800fcad 	.word	0x0800fcad
 800fd04:	0800fe53 	.word	0x0800fe53
 800fd08:	0800fcad 	.word	0x0800fcad
 800fd0c:	0800fd5b 	.word	0x0800fd5b
 800fd10:	0800fcad 	.word	0x0800fcad
 800fd14:	0800fcad 	.word	0x0800fcad
 800fd18:	0800fdf3 	.word	0x0800fdf3
 800fd1c:	6833      	ldr	r3, [r6, #0]
 800fd1e:	1d1a      	adds	r2, r3, #4
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	6032      	str	r2, [r6, #0]
 800fd24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fd28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	e09d      	b.n	800fe6c <_printf_i+0x1e8>
 800fd30:	6833      	ldr	r3, [r6, #0]
 800fd32:	6820      	ldr	r0, [r4, #0]
 800fd34:	1d19      	adds	r1, r3, #4
 800fd36:	6031      	str	r1, [r6, #0]
 800fd38:	0606      	lsls	r6, r0, #24
 800fd3a:	d501      	bpl.n	800fd40 <_printf_i+0xbc>
 800fd3c:	681d      	ldr	r5, [r3, #0]
 800fd3e:	e003      	b.n	800fd48 <_printf_i+0xc4>
 800fd40:	0645      	lsls	r5, r0, #25
 800fd42:	d5fb      	bpl.n	800fd3c <_printf_i+0xb8>
 800fd44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fd48:	2d00      	cmp	r5, #0
 800fd4a:	da03      	bge.n	800fd54 <_printf_i+0xd0>
 800fd4c:	232d      	movs	r3, #45	@ 0x2d
 800fd4e:	426d      	negs	r5, r5
 800fd50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd54:	4859      	ldr	r0, [pc, #356]	@ (800febc <_printf_i+0x238>)
 800fd56:	230a      	movs	r3, #10
 800fd58:	e011      	b.n	800fd7e <_printf_i+0xfa>
 800fd5a:	6821      	ldr	r1, [r4, #0]
 800fd5c:	6833      	ldr	r3, [r6, #0]
 800fd5e:	0608      	lsls	r0, r1, #24
 800fd60:	f853 5b04 	ldr.w	r5, [r3], #4
 800fd64:	d402      	bmi.n	800fd6c <_printf_i+0xe8>
 800fd66:	0649      	lsls	r1, r1, #25
 800fd68:	bf48      	it	mi
 800fd6a:	b2ad      	uxthmi	r5, r5
 800fd6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fd6e:	4853      	ldr	r0, [pc, #332]	@ (800febc <_printf_i+0x238>)
 800fd70:	6033      	str	r3, [r6, #0]
 800fd72:	bf14      	ite	ne
 800fd74:	230a      	movne	r3, #10
 800fd76:	2308      	moveq	r3, #8
 800fd78:	2100      	movs	r1, #0
 800fd7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fd7e:	6866      	ldr	r6, [r4, #4]
 800fd80:	60a6      	str	r6, [r4, #8]
 800fd82:	2e00      	cmp	r6, #0
 800fd84:	bfa2      	ittt	ge
 800fd86:	6821      	ldrge	r1, [r4, #0]
 800fd88:	f021 0104 	bicge.w	r1, r1, #4
 800fd8c:	6021      	strge	r1, [r4, #0]
 800fd8e:	b90d      	cbnz	r5, 800fd94 <_printf_i+0x110>
 800fd90:	2e00      	cmp	r6, #0
 800fd92:	d04b      	beq.n	800fe2c <_printf_i+0x1a8>
 800fd94:	4616      	mov	r6, r2
 800fd96:	fbb5 f1f3 	udiv	r1, r5, r3
 800fd9a:	fb03 5711 	mls	r7, r3, r1, r5
 800fd9e:	5dc7      	ldrb	r7, [r0, r7]
 800fda0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fda4:	462f      	mov	r7, r5
 800fda6:	42bb      	cmp	r3, r7
 800fda8:	460d      	mov	r5, r1
 800fdaa:	d9f4      	bls.n	800fd96 <_printf_i+0x112>
 800fdac:	2b08      	cmp	r3, #8
 800fdae:	d10b      	bne.n	800fdc8 <_printf_i+0x144>
 800fdb0:	6823      	ldr	r3, [r4, #0]
 800fdb2:	07df      	lsls	r7, r3, #31
 800fdb4:	d508      	bpl.n	800fdc8 <_printf_i+0x144>
 800fdb6:	6923      	ldr	r3, [r4, #16]
 800fdb8:	6861      	ldr	r1, [r4, #4]
 800fdba:	4299      	cmp	r1, r3
 800fdbc:	bfde      	ittt	le
 800fdbe:	2330      	movle	r3, #48	@ 0x30
 800fdc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fdc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fdc8:	1b92      	subs	r2, r2, r6
 800fdca:	6122      	str	r2, [r4, #16]
 800fdcc:	f8cd a000 	str.w	sl, [sp]
 800fdd0:	464b      	mov	r3, r9
 800fdd2:	aa03      	add	r2, sp, #12
 800fdd4:	4621      	mov	r1, r4
 800fdd6:	4640      	mov	r0, r8
 800fdd8:	f7ff fee6 	bl	800fba8 <_printf_common>
 800fddc:	3001      	adds	r0, #1
 800fdde:	d14a      	bne.n	800fe76 <_printf_i+0x1f2>
 800fde0:	f04f 30ff 	mov.w	r0, #4294967295
 800fde4:	b004      	add	sp, #16
 800fde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdea:	6823      	ldr	r3, [r4, #0]
 800fdec:	f043 0320 	orr.w	r3, r3, #32
 800fdf0:	6023      	str	r3, [r4, #0]
 800fdf2:	4833      	ldr	r0, [pc, #204]	@ (800fec0 <_printf_i+0x23c>)
 800fdf4:	2778      	movs	r7, #120	@ 0x78
 800fdf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fdfa:	6823      	ldr	r3, [r4, #0]
 800fdfc:	6831      	ldr	r1, [r6, #0]
 800fdfe:	061f      	lsls	r7, r3, #24
 800fe00:	f851 5b04 	ldr.w	r5, [r1], #4
 800fe04:	d402      	bmi.n	800fe0c <_printf_i+0x188>
 800fe06:	065f      	lsls	r7, r3, #25
 800fe08:	bf48      	it	mi
 800fe0a:	b2ad      	uxthmi	r5, r5
 800fe0c:	6031      	str	r1, [r6, #0]
 800fe0e:	07d9      	lsls	r1, r3, #31
 800fe10:	bf44      	itt	mi
 800fe12:	f043 0320 	orrmi.w	r3, r3, #32
 800fe16:	6023      	strmi	r3, [r4, #0]
 800fe18:	b11d      	cbz	r5, 800fe22 <_printf_i+0x19e>
 800fe1a:	2310      	movs	r3, #16
 800fe1c:	e7ac      	b.n	800fd78 <_printf_i+0xf4>
 800fe1e:	4827      	ldr	r0, [pc, #156]	@ (800febc <_printf_i+0x238>)
 800fe20:	e7e9      	b.n	800fdf6 <_printf_i+0x172>
 800fe22:	6823      	ldr	r3, [r4, #0]
 800fe24:	f023 0320 	bic.w	r3, r3, #32
 800fe28:	6023      	str	r3, [r4, #0]
 800fe2a:	e7f6      	b.n	800fe1a <_printf_i+0x196>
 800fe2c:	4616      	mov	r6, r2
 800fe2e:	e7bd      	b.n	800fdac <_printf_i+0x128>
 800fe30:	6833      	ldr	r3, [r6, #0]
 800fe32:	6825      	ldr	r5, [r4, #0]
 800fe34:	6961      	ldr	r1, [r4, #20]
 800fe36:	1d18      	adds	r0, r3, #4
 800fe38:	6030      	str	r0, [r6, #0]
 800fe3a:	062e      	lsls	r6, r5, #24
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	d501      	bpl.n	800fe44 <_printf_i+0x1c0>
 800fe40:	6019      	str	r1, [r3, #0]
 800fe42:	e002      	b.n	800fe4a <_printf_i+0x1c6>
 800fe44:	0668      	lsls	r0, r5, #25
 800fe46:	d5fb      	bpl.n	800fe40 <_printf_i+0x1bc>
 800fe48:	8019      	strh	r1, [r3, #0]
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	6123      	str	r3, [r4, #16]
 800fe4e:	4616      	mov	r6, r2
 800fe50:	e7bc      	b.n	800fdcc <_printf_i+0x148>
 800fe52:	6833      	ldr	r3, [r6, #0]
 800fe54:	1d1a      	adds	r2, r3, #4
 800fe56:	6032      	str	r2, [r6, #0]
 800fe58:	681e      	ldr	r6, [r3, #0]
 800fe5a:	6862      	ldr	r2, [r4, #4]
 800fe5c:	2100      	movs	r1, #0
 800fe5e:	4630      	mov	r0, r6
 800fe60:	f7f0 f9ee 	bl	8000240 <memchr>
 800fe64:	b108      	cbz	r0, 800fe6a <_printf_i+0x1e6>
 800fe66:	1b80      	subs	r0, r0, r6
 800fe68:	6060      	str	r0, [r4, #4]
 800fe6a:	6863      	ldr	r3, [r4, #4]
 800fe6c:	6123      	str	r3, [r4, #16]
 800fe6e:	2300      	movs	r3, #0
 800fe70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fe74:	e7aa      	b.n	800fdcc <_printf_i+0x148>
 800fe76:	6923      	ldr	r3, [r4, #16]
 800fe78:	4632      	mov	r2, r6
 800fe7a:	4649      	mov	r1, r9
 800fe7c:	4640      	mov	r0, r8
 800fe7e:	47d0      	blx	sl
 800fe80:	3001      	adds	r0, #1
 800fe82:	d0ad      	beq.n	800fde0 <_printf_i+0x15c>
 800fe84:	6823      	ldr	r3, [r4, #0]
 800fe86:	079b      	lsls	r3, r3, #30
 800fe88:	d413      	bmi.n	800feb2 <_printf_i+0x22e>
 800fe8a:	68e0      	ldr	r0, [r4, #12]
 800fe8c:	9b03      	ldr	r3, [sp, #12]
 800fe8e:	4298      	cmp	r0, r3
 800fe90:	bfb8      	it	lt
 800fe92:	4618      	movlt	r0, r3
 800fe94:	e7a6      	b.n	800fde4 <_printf_i+0x160>
 800fe96:	2301      	movs	r3, #1
 800fe98:	4632      	mov	r2, r6
 800fe9a:	4649      	mov	r1, r9
 800fe9c:	4640      	mov	r0, r8
 800fe9e:	47d0      	blx	sl
 800fea0:	3001      	adds	r0, #1
 800fea2:	d09d      	beq.n	800fde0 <_printf_i+0x15c>
 800fea4:	3501      	adds	r5, #1
 800fea6:	68e3      	ldr	r3, [r4, #12]
 800fea8:	9903      	ldr	r1, [sp, #12]
 800feaa:	1a5b      	subs	r3, r3, r1
 800feac:	42ab      	cmp	r3, r5
 800feae:	dcf2      	bgt.n	800fe96 <_printf_i+0x212>
 800feb0:	e7eb      	b.n	800fe8a <_printf_i+0x206>
 800feb2:	2500      	movs	r5, #0
 800feb4:	f104 0619 	add.w	r6, r4, #25
 800feb8:	e7f5      	b.n	800fea6 <_printf_i+0x222>
 800feba:	bf00      	nop
 800febc:	08010e81 	.word	0x08010e81
 800fec0:	08010e92 	.word	0x08010e92

0800fec4 <__sflush_r>:
 800fec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fecc:	0716      	lsls	r6, r2, #28
 800fece:	4605      	mov	r5, r0
 800fed0:	460c      	mov	r4, r1
 800fed2:	d454      	bmi.n	800ff7e <__sflush_r+0xba>
 800fed4:	684b      	ldr	r3, [r1, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	dc02      	bgt.n	800fee0 <__sflush_r+0x1c>
 800feda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800fedc:	2b00      	cmp	r3, #0
 800fede:	dd48      	ble.n	800ff72 <__sflush_r+0xae>
 800fee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fee2:	2e00      	cmp	r6, #0
 800fee4:	d045      	beq.n	800ff72 <__sflush_r+0xae>
 800fee6:	2300      	movs	r3, #0
 800fee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800feec:	682f      	ldr	r7, [r5, #0]
 800feee:	6a21      	ldr	r1, [r4, #32]
 800fef0:	602b      	str	r3, [r5, #0]
 800fef2:	d030      	beq.n	800ff56 <__sflush_r+0x92>
 800fef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fef6:	89a3      	ldrh	r3, [r4, #12]
 800fef8:	0759      	lsls	r1, r3, #29
 800fefa:	d505      	bpl.n	800ff08 <__sflush_r+0x44>
 800fefc:	6863      	ldr	r3, [r4, #4]
 800fefe:	1ad2      	subs	r2, r2, r3
 800ff00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ff02:	b10b      	cbz	r3, 800ff08 <__sflush_r+0x44>
 800ff04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ff06:	1ad2      	subs	r2, r2, r3
 800ff08:	2300      	movs	r3, #0
 800ff0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ff0c:	6a21      	ldr	r1, [r4, #32]
 800ff0e:	4628      	mov	r0, r5
 800ff10:	47b0      	blx	r6
 800ff12:	1c43      	adds	r3, r0, #1
 800ff14:	89a3      	ldrh	r3, [r4, #12]
 800ff16:	d106      	bne.n	800ff26 <__sflush_r+0x62>
 800ff18:	6829      	ldr	r1, [r5, #0]
 800ff1a:	291d      	cmp	r1, #29
 800ff1c:	d82b      	bhi.n	800ff76 <__sflush_r+0xb2>
 800ff1e:	4a2a      	ldr	r2, [pc, #168]	@ (800ffc8 <__sflush_r+0x104>)
 800ff20:	410a      	asrs	r2, r1
 800ff22:	07d6      	lsls	r6, r2, #31
 800ff24:	d427      	bmi.n	800ff76 <__sflush_r+0xb2>
 800ff26:	2200      	movs	r2, #0
 800ff28:	6062      	str	r2, [r4, #4]
 800ff2a:	04d9      	lsls	r1, r3, #19
 800ff2c:	6922      	ldr	r2, [r4, #16]
 800ff2e:	6022      	str	r2, [r4, #0]
 800ff30:	d504      	bpl.n	800ff3c <__sflush_r+0x78>
 800ff32:	1c42      	adds	r2, r0, #1
 800ff34:	d101      	bne.n	800ff3a <__sflush_r+0x76>
 800ff36:	682b      	ldr	r3, [r5, #0]
 800ff38:	b903      	cbnz	r3, 800ff3c <__sflush_r+0x78>
 800ff3a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ff3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ff3e:	602f      	str	r7, [r5, #0]
 800ff40:	b1b9      	cbz	r1, 800ff72 <__sflush_r+0xae>
 800ff42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ff46:	4299      	cmp	r1, r3
 800ff48:	d002      	beq.n	800ff50 <__sflush_r+0x8c>
 800ff4a:	4628      	mov	r0, r5
 800ff4c:	f7fe fbd2 	bl	800e6f4 <_free_r>
 800ff50:	2300      	movs	r3, #0
 800ff52:	6363      	str	r3, [r4, #52]	@ 0x34
 800ff54:	e00d      	b.n	800ff72 <__sflush_r+0xae>
 800ff56:	2301      	movs	r3, #1
 800ff58:	4628      	mov	r0, r5
 800ff5a:	47b0      	blx	r6
 800ff5c:	4602      	mov	r2, r0
 800ff5e:	1c50      	adds	r0, r2, #1
 800ff60:	d1c9      	bne.n	800fef6 <__sflush_r+0x32>
 800ff62:	682b      	ldr	r3, [r5, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d0c6      	beq.n	800fef6 <__sflush_r+0x32>
 800ff68:	2b1d      	cmp	r3, #29
 800ff6a:	d001      	beq.n	800ff70 <__sflush_r+0xac>
 800ff6c:	2b16      	cmp	r3, #22
 800ff6e:	d11e      	bne.n	800ffae <__sflush_r+0xea>
 800ff70:	602f      	str	r7, [r5, #0]
 800ff72:	2000      	movs	r0, #0
 800ff74:	e022      	b.n	800ffbc <__sflush_r+0xf8>
 800ff76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff7a:	b21b      	sxth	r3, r3
 800ff7c:	e01b      	b.n	800ffb6 <__sflush_r+0xf2>
 800ff7e:	690f      	ldr	r7, [r1, #16]
 800ff80:	2f00      	cmp	r7, #0
 800ff82:	d0f6      	beq.n	800ff72 <__sflush_r+0xae>
 800ff84:	0793      	lsls	r3, r2, #30
 800ff86:	680e      	ldr	r6, [r1, #0]
 800ff88:	bf08      	it	eq
 800ff8a:	694b      	ldreq	r3, [r1, #20]
 800ff8c:	600f      	str	r7, [r1, #0]
 800ff8e:	bf18      	it	ne
 800ff90:	2300      	movne	r3, #0
 800ff92:	eba6 0807 	sub.w	r8, r6, r7
 800ff96:	608b      	str	r3, [r1, #8]
 800ff98:	f1b8 0f00 	cmp.w	r8, #0
 800ff9c:	dde9      	ble.n	800ff72 <__sflush_r+0xae>
 800ff9e:	6a21      	ldr	r1, [r4, #32]
 800ffa0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ffa2:	4643      	mov	r3, r8
 800ffa4:	463a      	mov	r2, r7
 800ffa6:	4628      	mov	r0, r5
 800ffa8:	47b0      	blx	r6
 800ffaa:	2800      	cmp	r0, #0
 800ffac:	dc08      	bgt.n	800ffc0 <__sflush_r+0xfc>
 800ffae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ffb6:	81a3      	strh	r3, [r4, #12]
 800ffb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ffbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffc0:	4407      	add	r7, r0
 800ffc2:	eba8 0800 	sub.w	r8, r8, r0
 800ffc6:	e7e7      	b.n	800ff98 <__sflush_r+0xd4>
 800ffc8:	dfbffffe 	.word	0xdfbffffe

0800ffcc <_fflush_r>:
 800ffcc:	b538      	push	{r3, r4, r5, lr}
 800ffce:	690b      	ldr	r3, [r1, #16]
 800ffd0:	4605      	mov	r5, r0
 800ffd2:	460c      	mov	r4, r1
 800ffd4:	b913      	cbnz	r3, 800ffdc <_fflush_r+0x10>
 800ffd6:	2500      	movs	r5, #0
 800ffd8:	4628      	mov	r0, r5
 800ffda:	bd38      	pop	{r3, r4, r5, pc}
 800ffdc:	b118      	cbz	r0, 800ffe6 <_fflush_r+0x1a>
 800ffde:	6a03      	ldr	r3, [r0, #32]
 800ffe0:	b90b      	cbnz	r3, 800ffe6 <_fflush_r+0x1a>
 800ffe2:	f7fe f9c1 	bl	800e368 <__sinit>
 800ffe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d0f3      	beq.n	800ffd6 <_fflush_r+0xa>
 800ffee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fff0:	07d0      	lsls	r0, r2, #31
 800fff2:	d404      	bmi.n	800fffe <_fflush_r+0x32>
 800fff4:	0599      	lsls	r1, r3, #22
 800fff6:	d402      	bmi.n	800fffe <_fflush_r+0x32>
 800fff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fffa:	f7fe fb52 	bl	800e6a2 <__retarget_lock_acquire_recursive>
 800fffe:	4628      	mov	r0, r5
 8010000:	4621      	mov	r1, r4
 8010002:	f7ff ff5f 	bl	800fec4 <__sflush_r>
 8010006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010008:	07da      	lsls	r2, r3, #31
 801000a:	4605      	mov	r5, r0
 801000c:	d4e4      	bmi.n	800ffd8 <_fflush_r+0xc>
 801000e:	89a3      	ldrh	r3, [r4, #12]
 8010010:	059b      	lsls	r3, r3, #22
 8010012:	d4e1      	bmi.n	800ffd8 <_fflush_r+0xc>
 8010014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010016:	f7fe fb45 	bl	800e6a4 <__retarget_lock_release_recursive>
 801001a:	e7dd      	b.n	800ffd8 <_fflush_r+0xc>

0801001c <memmove>:
 801001c:	4288      	cmp	r0, r1
 801001e:	b510      	push	{r4, lr}
 8010020:	eb01 0402 	add.w	r4, r1, r2
 8010024:	d902      	bls.n	801002c <memmove+0x10>
 8010026:	4284      	cmp	r4, r0
 8010028:	4623      	mov	r3, r4
 801002a:	d807      	bhi.n	801003c <memmove+0x20>
 801002c:	1e43      	subs	r3, r0, #1
 801002e:	42a1      	cmp	r1, r4
 8010030:	d008      	beq.n	8010044 <memmove+0x28>
 8010032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010036:	f803 2f01 	strb.w	r2, [r3, #1]!
 801003a:	e7f8      	b.n	801002e <memmove+0x12>
 801003c:	4402      	add	r2, r0
 801003e:	4601      	mov	r1, r0
 8010040:	428a      	cmp	r2, r1
 8010042:	d100      	bne.n	8010046 <memmove+0x2a>
 8010044:	bd10      	pop	{r4, pc}
 8010046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801004a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801004e:	e7f7      	b.n	8010040 <memmove+0x24>

08010050 <_sbrk_r>:
 8010050:	b538      	push	{r3, r4, r5, lr}
 8010052:	4d06      	ldr	r5, [pc, #24]	@ (801006c <_sbrk_r+0x1c>)
 8010054:	2300      	movs	r3, #0
 8010056:	4604      	mov	r4, r0
 8010058:	4608      	mov	r0, r1
 801005a:	602b      	str	r3, [r5, #0]
 801005c:	f7f3 fc9e 	bl	800399c <_sbrk>
 8010060:	1c43      	adds	r3, r0, #1
 8010062:	d102      	bne.n	801006a <_sbrk_r+0x1a>
 8010064:	682b      	ldr	r3, [r5, #0]
 8010066:	b103      	cbz	r3, 801006a <_sbrk_r+0x1a>
 8010068:	6023      	str	r3, [r4, #0]
 801006a:	bd38      	pop	{r3, r4, r5, pc}
 801006c:	20005aa4 	.word	0x20005aa4

08010070 <__assert_func>:
 8010070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010072:	4614      	mov	r4, r2
 8010074:	461a      	mov	r2, r3
 8010076:	4b09      	ldr	r3, [pc, #36]	@ (801009c <__assert_func+0x2c>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	4605      	mov	r5, r0
 801007c:	68d8      	ldr	r0, [r3, #12]
 801007e:	b954      	cbnz	r4, 8010096 <__assert_func+0x26>
 8010080:	4b07      	ldr	r3, [pc, #28]	@ (80100a0 <__assert_func+0x30>)
 8010082:	461c      	mov	r4, r3
 8010084:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010088:	9100      	str	r1, [sp, #0]
 801008a:	462b      	mov	r3, r5
 801008c:	4905      	ldr	r1, [pc, #20]	@ (80100a4 <__assert_func+0x34>)
 801008e:	f000 f857 	bl	8010140 <fiprintf>
 8010092:	f000 f867 	bl	8010164 <abort>
 8010096:	4b04      	ldr	r3, [pc, #16]	@ (80100a8 <__assert_func+0x38>)
 8010098:	e7f4      	b.n	8010084 <__assert_func+0x14>
 801009a:	bf00      	nop
 801009c:	20000310 	.word	0x20000310
 80100a0:	08010ede 	.word	0x08010ede
 80100a4:	08010eb0 	.word	0x08010eb0
 80100a8:	08010ea3 	.word	0x08010ea3

080100ac <_calloc_r>:
 80100ac:	b570      	push	{r4, r5, r6, lr}
 80100ae:	fba1 5402 	umull	r5, r4, r1, r2
 80100b2:	b93c      	cbnz	r4, 80100c4 <_calloc_r+0x18>
 80100b4:	4629      	mov	r1, r5
 80100b6:	f7fe fec3 	bl	800ee40 <_malloc_r>
 80100ba:	4606      	mov	r6, r0
 80100bc:	b928      	cbnz	r0, 80100ca <_calloc_r+0x1e>
 80100be:	2600      	movs	r6, #0
 80100c0:	4630      	mov	r0, r6
 80100c2:	bd70      	pop	{r4, r5, r6, pc}
 80100c4:	220c      	movs	r2, #12
 80100c6:	6002      	str	r2, [r0, #0]
 80100c8:	e7f9      	b.n	80100be <_calloc_r+0x12>
 80100ca:	462a      	mov	r2, r5
 80100cc:	4621      	mov	r1, r4
 80100ce:	f7fe fa31 	bl	800e534 <memset>
 80100d2:	e7f5      	b.n	80100c0 <_calloc_r+0x14>

080100d4 <malloc>:
 80100d4:	4b02      	ldr	r3, [pc, #8]	@ (80100e0 <malloc+0xc>)
 80100d6:	4601      	mov	r1, r0
 80100d8:	6818      	ldr	r0, [r3, #0]
 80100da:	f7fe beb1 	b.w	800ee40 <_malloc_r>
 80100de:	bf00      	nop
 80100e0:	20000310 	.word	0x20000310

080100e4 <_realloc_r>:
 80100e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e8:	4680      	mov	r8, r0
 80100ea:	4615      	mov	r5, r2
 80100ec:	460c      	mov	r4, r1
 80100ee:	b921      	cbnz	r1, 80100fa <_realloc_r+0x16>
 80100f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80100f4:	4611      	mov	r1, r2
 80100f6:	f7fe bea3 	b.w	800ee40 <_malloc_r>
 80100fa:	b92a      	cbnz	r2, 8010108 <_realloc_r+0x24>
 80100fc:	f7fe fafa 	bl	800e6f4 <_free_r>
 8010100:	2400      	movs	r4, #0
 8010102:	4620      	mov	r0, r4
 8010104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010108:	f000 f833 	bl	8010172 <_malloc_usable_size_r>
 801010c:	4285      	cmp	r5, r0
 801010e:	4606      	mov	r6, r0
 8010110:	d802      	bhi.n	8010118 <_realloc_r+0x34>
 8010112:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010116:	d8f4      	bhi.n	8010102 <_realloc_r+0x1e>
 8010118:	4629      	mov	r1, r5
 801011a:	4640      	mov	r0, r8
 801011c:	f7fe fe90 	bl	800ee40 <_malloc_r>
 8010120:	4607      	mov	r7, r0
 8010122:	2800      	cmp	r0, #0
 8010124:	d0ec      	beq.n	8010100 <_realloc_r+0x1c>
 8010126:	42b5      	cmp	r5, r6
 8010128:	462a      	mov	r2, r5
 801012a:	4621      	mov	r1, r4
 801012c:	bf28      	it	cs
 801012e:	4632      	movcs	r2, r6
 8010130:	f7fe fac1 	bl	800e6b6 <memcpy>
 8010134:	4621      	mov	r1, r4
 8010136:	4640      	mov	r0, r8
 8010138:	f7fe fadc 	bl	800e6f4 <_free_r>
 801013c:	463c      	mov	r4, r7
 801013e:	e7e0      	b.n	8010102 <_realloc_r+0x1e>

08010140 <fiprintf>:
 8010140:	b40e      	push	{r1, r2, r3}
 8010142:	b503      	push	{r0, r1, lr}
 8010144:	4601      	mov	r1, r0
 8010146:	ab03      	add	r3, sp, #12
 8010148:	4805      	ldr	r0, [pc, #20]	@ (8010160 <fiprintf+0x20>)
 801014a:	f853 2b04 	ldr.w	r2, [r3], #4
 801014e:	6800      	ldr	r0, [r0, #0]
 8010150:	9301      	str	r3, [sp, #4]
 8010152:	f000 f83f 	bl	80101d4 <_vfiprintf_r>
 8010156:	b002      	add	sp, #8
 8010158:	f85d eb04 	ldr.w	lr, [sp], #4
 801015c:	b003      	add	sp, #12
 801015e:	4770      	bx	lr
 8010160:	20000310 	.word	0x20000310

08010164 <abort>:
 8010164:	b508      	push	{r3, lr}
 8010166:	2006      	movs	r0, #6
 8010168:	f000 fa08 	bl	801057c <raise>
 801016c:	2001      	movs	r0, #1
 801016e:	f7f3 fb9d 	bl	80038ac <_exit>

08010172 <_malloc_usable_size_r>:
 8010172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010176:	1f18      	subs	r0, r3, #4
 8010178:	2b00      	cmp	r3, #0
 801017a:	bfbc      	itt	lt
 801017c:	580b      	ldrlt	r3, [r1, r0]
 801017e:	18c0      	addlt	r0, r0, r3
 8010180:	4770      	bx	lr

08010182 <__sfputc_r>:
 8010182:	6893      	ldr	r3, [r2, #8]
 8010184:	3b01      	subs	r3, #1
 8010186:	2b00      	cmp	r3, #0
 8010188:	b410      	push	{r4}
 801018a:	6093      	str	r3, [r2, #8]
 801018c:	da08      	bge.n	80101a0 <__sfputc_r+0x1e>
 801018e:	6994      	ldr	r4, [r2, #24]
 8010190:	42a3      	cmp	r3, r4
 8010192:	db01      	blt.n	8010198 <__sfputc_r+0x16>
 8010194:	290a      	cmp	r1, #10
 8010196:	d103      	bne.n	80101a0 <__sfputc_r+0x1e>
 8010198:	f85d 4b04 	ldr.w	r4, [sp], #4
 801019c:	f000 b932 	b.w	8010404 <__swbuf_r>
 80101a0:	6813      	ldr	r3, [r2, #0]
 80101a2:	1c58      	adds	r0, r3, #1
 80101a4:	6010      	str	r0, [r2, #0]
 80101a6:	7019      	strb	r1, [r3, #0]
 80101a8:	4608      	mov	r0, r1
 80101aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80101ae:	4770      	bx	lr

080101b0 <__sfputs_r>:
 80101b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101b2:	4606      	mov	r6, r0
 80101b4:	460f      	mov	r7, r1
 80101b6:	4614      	mov	r4, r2
 80101b8:	18d5      	adds	r5, r2, r3
 80101ba:	42ac      	cmp	r4, r5
 80101bc:	d101      	bne.n	80101c2 <__sfputs_r+0x12>
 80101be:	2000      	movs	r0, #0
 80101c0:	e007      	b.n	80101d2 <__sfputs_r+0x22>
 80101c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101c6:	463a      	mov	r2, r7
 80101c8:	4630      	mov	r0, r6
 80101ca:	f7ff ffda 	bl	8010182 <__sfputc_r>
 80101ce:	1c43      	adds	r3, r0, #1
 80101d0:	d1f3      	bne.n	80101ba <__sfputs_r+0xa>
 80101d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080101d4 <_vfiprintf_r>:
 80101d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101d8:	460d      	mov	r5, r1
 80101da:	b09d      	sub	sp, #116	@ 0x74
 80101dc:	4614      	mov	r4, r2
 80101de:	4698      	mov	r8, r3
 80101e0:	4606      	mov	r6, r0
 80101e2:	b118      	cbz	r0, 80101ec <_vfiprintf_r+0x18>
 80101e4:	6a03      	ldr	r3, [r0, #32]
 80101e6:	b90b      	cbnz	r3, 80101ec <_vfiprintf_r+0x18>
 80101e8:	f7fe f8be 	bl	800e368 <__sinit>
 80101ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80101ee:	07d9      	lsls	r1, r3, #31
 80101f0:	d405      	bmi.n	80101fe <_vfiprintf_r+0x2a>
 80101f2:	89ab      	ldrh	r3, [r5, #12]
 80101f4:	059a      	lsls	r2, r3, #22
 80101f6:	d402      	bmi.n	80101fe <_vfiprintf_r+0x2a>
 80101f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80101fa:	f7fe fa52 	bl	800e6a2 <__retarget_lock_acquire_recursive>
 80101fe:	89ab      	ldrh	r3, [r5, #12]
 8010200:	071b      	lsls	r3, r3, #28
 8010202:	d501      	bpl.n	8010208 <_vfiprintf_r+0x34>
 8010204:	692b      	ldr	r3, [r5, #16]
 8010206:	b99b      	cbnz	r3, 8010230 <_vfiprintf_r+0x5c>
 8010208:	4629      	mov	r1, r5
 801020a:	4630      	mov	r0, r6
 801020c:	f000 f938 	bl	8010480 <__swsetup_r>
 8010210:	b170      	cbz	r0, 8010230 <_vfiprintf_r+0x5c>
 8010212:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010214:	07dc      	lsls	r4, r3, #31
 8010216:	d504      	bpl.n	8010222 <_vfiprintf_r+0x4e>
 8010218:	f04f 30ff 	mov.w	r0, #4294967295
 801021c:	b01d      	add	sp, #116	@ 0x74
 801021e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010222:	89ab      	ldrh	r3, [r5, #12]
 8010224:	0598      	lsls	r0, r3, #22
 8010226:	d4f7      	bmi.n	8010218 <_vfiprintf_r+0x44>
 8010228:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801022a:	f7fe fa3b 	bl	800e6a4 <__retarget_lock_release_recursive>
 801022e:	e7f3      	b.n	8010218 <_vfiprintf_r+0x44>
 8010230:	2300      	movs	r3, #0
 8010232:	9309      	str	r3, [sp, #36]	@ 0x24
 8010234:	2320      	movs	r3, #32
 8010236:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801023a:	f8cd 800c 	str.w	r8, [sp, #12]
 801023e:	2330      	movs	r3, #48	@ 0x30
 8010240:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80103f0 <_vfiprintf_r+0x21c>
 8010244:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010248:	f04f 0901 	mov.w	r9, #1
 801024c:	4623      	mov	r3, r4
 801024e:	469a      	mov	sl, r3
 8010250:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010254:	b10a      	cbz	r2, 801025a <_vfiprintf_r+0x86>
 8010256:	2a25      	cmp	r2, #37	@ 0x25
 8010258:	d1f9      	bne.n	801024e <_vfiprintf_r+0x7a>
 801025a:	ebba 0b04 	subs.w	fp, sl, r4
 801025e:	d00b      	beq.n	8010278 <_vfiprintf_r+0xa4>
 8010260:	465b      	mov	r3, fp
 8010262:	4622      	mov	r2, r4
 8010264:	4629      	mov	r1, r5
 8010266:	4630      	mov	r0, r6
 8010268:	f7ff ffa2 	bl	80101b0 <__sfputs_r>
 801026c:	3001      	adds	r0, #1
 801026e:	f000 80a7 	beq.w	80103c0 <_vfiprintf_r+0x1ec>
 8010272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010274:	445a      	add	r2, fp
 8010276:	9209      	str	r2, [sp, #36]	@ 0x24
 8010278:	f89a 3000 	ldrb.w	r3, [sl]
 801027c:	2b00      	cmp	r3, #0
 801027e:	f000 809f 	beq.w	80103c0 <_vfiprintf_r+0x1ec>
 8010282:	2300      	movs	r3, #0
 8010284:	f04f 32ff 	mov.w	r2, #4294967295
 8010288:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801028c:	f10a 0a01 	add.w	sl, sl, #1
 8010290:	9304      	str	r3, [sp, #16]
 8010292:	9307      	str	r3, [sp, #28]
 8010294:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010298:	931a      	str	r3, [sp, #104]	@ 0x68
 801029a:	4654      	mov	r4, sl
 801029c:	2205      	movs	r2, #5
 801029e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102a2:	4853      	ldr	r0, [pc, #332]	@ (80103f0 <_vfiprintf_r+0x21c>)
 80102a4:	f7ef ffcc 	bl	8000240 <memchr>
 80102a8:	9a04      	ldr	r2, [sp, #16]
 80102aa:	b9d8      	cbnz	r0, 80102e4 <_vfiprintf_r+0x110>
 80102ac:	06d1      	lsls	r1, r2, #27
 80102ae:	bf44      	itt	mi
 80102b0:	2320      	movmi	r3, #32
 80102b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102b6:	0713      	lsls	r3, r2, #28
 80102b8:	bf44      	itt	mi
 80102ba:	232b      	movmi	r3, #43	@ 0x2b
 80102bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80102c0:	f89a 3000 	ldrb.w	r3, [sl]
 80102c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80102c6:	d015      	beq.n	80102f4 <_vfiprintf_r+0x120>
 80102c8:	9a07      	ldr	r2, [sp, #28]
 80102ca:	4654      	mov	r4, sl
 80102cc:	2000      	movs	r0, #0
 80102ce:	f04f 0c0a 	mov.w	ip, #10
 80102d2:	4621      	mov	r1, r4
 80102d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80102d8:	3b30      	subs	r3, #48	@ 0x30
 80102da:	2b09      	cmp	r3, #9
 80102dc:	d94b      	bls.n	8010376 <_vfiprintf_r+0x1a2>
 80102de:	b1b0      	cbz	r0, 801030e <_vfiprintf_r+0x13a>
 80102e0:	9207      	str	r2, [sp, #28]
 80102e2:	e014      	b.n	801030e <_vfiprintf_r+0x13a>
 80102e4:	eba0 0308 	sub.w	r3, r0, r8
 80102e8:	fa09 f303 	lsl.w	r3, r9, r3
 80102ec:	4313      	orrs	r3, r2
 80102ee:	9304      	str	r3, [sp, #16]
 80102f0:	46a2      	mov	sl, r4
 80102f2:	e7d2      	b.n	801029a <_vfiprintf_r+0xc6>
 80102f4:	9b03      	ldr	r3, [sp, #12]
 80102f6:	1d19      	adds	r1, r3, #4
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	9103      	str	r1, [sp, #12]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	bfbb      	ittet	lt
 8010300:	425b      	neglt	r3, r3
 8010302:	f042 0202 	orrlt.w	r2, r2, #2
 8010306:	9307      	strge	r3, [sp, #28]
 8010308:	9307      	strlt	r3, [sp, #28]
 801030a:	bfb8      	it	lt
 801030c:	9204      	strlt	r2, [sp, #16]
 801030e:	7823      	ldrb	r3, [r4, #0]
 8010310:	2b2e      	cmp	r3, #46	@ 0x2e
 8010312:	d10a      	bne.n	801032a <_vfiprintf_r+0x156>
 8010314:	7863      	ldrb	r3, [r4, #1]
 8010316:	2b2a      	cmp	r3, #42	@ 0x2a
 8010318:	d132      	bne.n	8010380 <_vfiprintf_r+0x1ac>
 801031a:	9b03      	ldr	r3, [sp, #12]
 801031c:	1d1a      	adds	r2, r3, #4
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	9203      	str	r2, [sp, #12]
 8010322:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010326:	3402      	adds	r4, #2
 8010328:	9305      	str	r3, [sp, #20]
 801032a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010400 <_vfiprintf_r+0x22c>
 801032e:	7821      	ldrb	r1, [r4, #0]
 8010330:	2203      	movs	r2, #3
 8010332:	4650      	mov	r0, sl
 8010334:	f7ef ff84 	bl	8000240 <memchr>
 8010338:	b138      	cbz	r0, 801034a <_vfiprintf_r+0x176>
 801033a:	9b04      	ldr	r3, [sp, #16]
 801033c:	eba0 000a 	sub.w	r0, r0, sl
 8010340:	2240      	movs	r2, #64	@ 0x40
 8010342:	4082      	lsls	r2, r0
 8010344:	4313      	orrs	r3, r2
 8010346:	3401      	adds	r4, #1
 8010348:	9304      	str	r3, [sp, #16]
 801034a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801034e:	4829      	ldr	r0, [pc, #164]	@ (80103f4 <_vfiprintf_r+0x220>)
 8010350:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010354:	2206      	movs	r2, #6
 8010356:	f7ef ff73 	bl	8000240 <memchr>
 801035a:	2800      	cmp	r0, #0
 801035c:	d03f      	beq.n	80103de <_vfiprintf_r+0x20a>
 801035e:	4b26      	ldr	r3, [pc, #152]	@ (80103f8 <_vfiprintf_r+0x224>)
 8010360:	bb1b      	cbnz	r3, 80103aa <_vfiprintf_r+0x1d6>
 8010362:	9b03      	ldr	r3, [sp, #12]
 8010364:	3307      	adds	r3, #7
 8010366:	f023 0307 	bic.w	r3, r3, #7
 801036a:	3308      	adds	r3, #8
 801036c:	9303      	str	r3, [sp, #12]
 801036e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010370:	443b      	add	r3, r7
 8010372:	9309      	str	r3, [sp, #36]	@ 0x24
 8010374:	e76a      	b.n	801024c <_vfiprintf_r+0x78>
 8010376:	fb0c 3202 	mla	r2, ip, r2, r3
 801037a:	460c      	mov	r4, r1
 801037c:	2001      	movs	r0, #1
 801037e:	e7a8      	b.n	80102d2 <_vfiprintf_r+0xfe>
 8010380:	2300      	movs	r3, #0
 8010382:	3401      	adds	r4, #1
 8010384:	9305      	str	r3, [sp, #20]
 8010386:	4619      	mov	r1, r3
 8010388:	f04f 0c0a 	mov.w	ip, #10
 801038c:	4620      	mov	r0, r4
 801038e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010392:	3a30      	subs	r2, #48	@ 0x30
 8010394:	2a09      	cmp	r2, #9
 8010396:	d903      	bls.n	80103a0 <_vfiprintf_r+0x1cc>
 8010398:	2b00      	cmp	r3, #0
 801039a:	d0c6      	beq.n	801032a <_vfiprintf_r+0x156>
 801039c:	9105      	str	r1, [sp, #20]
 801039e:	e7c4      	b.n	801032a <_vfiprintf_r+0x156>
 80103a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80103a4:	4604      	mov	r4, r0
 80103a6:	2301      	movs	r3, #1
 80103a8:	e7f0      	b.n	801038c <_vfiprintf_r+0x1b8>
 80103aa:	ab03      	add	r3, sp, #12
 80103ac:	9300      	str	r3, [sp, #0]
 80103ae:	462a      	mov	r2, r5
 80103b0:	4b12      	ldr	r3, [pc, #72]	@ (80103fc <_vfiprintf_r+0x228>)
 80103b2:	a904      	add	r1, sp, #16
 80103b4:	4630      	mov	r0, r6
 80103b6:	f3af 8000 	nop.w
 80103ba:	4607      	mov	r7, r0
 80103bc:	1c78      	adds	r0, r7, #1
 80103be:	d1d6      	bne.n	801036e <_vfiprintf_r+0x19a>
 80103c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80103c2:	07d9      	lsls	r1, r3, #31
 80103c4:	d405      	bmi.n	80103d2 <_vfiprintf_r+0x1fe>
 80103c6:	89ab      	ldrh	r3, [r5, #12]
 80103c8:	059a      	lsls	r2, r3, #22
 80103ca:	d402      	bmi.n	80103d2 <_vfiprintf_r+0x1fe>
 80103cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80103ce:	f7fe f969 	bl	800e6a4 <__retarget_lock_release_recursive>
 80103d2:	89ab      	ldrh	r3, [r5, #12]
 80103d4:	065b      	lsls	r3, r3, #25
 80103d6:	f53f af1f 	bmi.w	8010218 <_vfiprintf_r+0x44>
 80103da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80103dc:	e71e      	b.n	801021c <_vfiprintf_r+0x48>
 80103de:	ab03      	add	r3, sp, #12
 80103e0:	9300      	str	r3, [sp, #0]
 80103e2:	462a      	mov	r2, r5
 80103e4:	4b05      	ldr	r3, [pc, #20]	@ (80103fc <_vfiprintf_r+0x228>)
 80103e6:	a904      	add	r1, sp, #16
 80103e8:	4630      	mov	r0, r6
 80103ea:	f7ff fc4b 	bl	800fc84 <_printf_i>
 80103ee:	e7e4      	b.n	80103ba <_vfiprintf_r+0x1e6>
 80103f0:	08010e70 	.word	0x08010e70
 80103f4:	08010e7a 	.word	0x08010e7a
 80103f8:	00000000 	.word	0x00000000
 80103fc:	080101b1 	.word	0x080101b1
 8010400:	08010e76 	.word	0x08010e76

08010404 <__swbuf_r>:
 8010404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010406:	460e      	mov	r6, r1
 8010408:	4614      	mov	r4, r2
 801040a:	4605      	mov	r5, r0
 801040c:	b118      	cbz	r0, 8010416 <__swbuf_r+0x12>
 801040e:	6a03      	ldr	r3, [r0, #32]
 8010410:	b90b      	cbnz	r3, 8010416 <__swbuf_r+0x12>
 8010412:	f7fd ffa9 	bl	800e368 <__sinit>
 8010416:	69a3      	ldr	r3, [r4, #24]
 8010418:	60a3      	str	r3, [r4, #8]
 801041a:	89a3      	ldrh	r3, [r4, #12]
 801041c:	071a      	lsls	r2, r3, #28
 801041e:	d501      	bpl.n	8010424 <__swbuf_r+0x20>
 8010420:	6923      	ldr	r3, [r4, #16]
 8010422:	b943      	cbnz	r3, 8010436 <__swbuf_r+0x32>
 8010424:	4621      	mov	r1, r4
 8010426:	4628      	mov	r0, r5
 8010428:	f000 f82a 	bl	8010480 <__swsetup_r>
 801042c:	b118      	cbz	r0, 8010436 <__swbuf_r+0x32>
 801042e:	f04f 37ff 	mov.w	r7, #4294967295
 8010432:	4638      	mov	r0, r7
 8010434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010436:	6823      	ldr	r3, [r4, #0]
 8010438:	6922      	ldr	r2, [r4, #16]
 801043a:	1a98      	subs	r0, r3, r2
 801043c:	6963      	ldr	r3, [r4, #20]
 801043e:	b2f6      	uxtb	r6, r6
 8010440:	4283      	cmp	r3, r0
 8010442:	4637      	mov	r7, r6
 8010444:	dc05      	bgt.n	8010452 <__swbuf_r+0x4e>
 8010446:	4621      	mov	r1, r4
 8010448:	4628      	mov	r0, r5
 801044a:	f7ff fdbf 	bl	800ffcc <_fflush_r>
 801044e:	2800      	cmp	r0, #0
 8010450:	d1ed      	bne.n	801042e <__swbuf_r+0x2a>
 8010452:	68a3      	ldr	r3, [r4, #8]
 8010454:	3b01      	subs	r3, #1
 8010456:	60a3      	str	r3, [r4, #8]
 8010458:	6823      	ldr	r3, [r4, #0]
 801045a:	1c5a      	adds	r2, r3, #1
 801045c:	6022      	str	r2, [r4, #0]
 801045e:	701e      	strb	r6, [r3, #0]
 8010460:	6962      	ldr	r2, [r4, #20]
 8010462:	1c43      	adds	r3, r0, #1
 8010464:	429a      	cmp	r2, r3
 8010466:	d004      	beq.n	8010472 <__swbuf_r+0x6e>
 8010468:	89a3      	ldrh	r3, [r4, #12]
 801046a:	07db      	lsls	r3, r3, #31
 801046c:	d5e1      	bpl.n	8010432 <__swbuf_r+0x2e>
 801046e:	2e0a      	cmp	r6, #10
 8010470:	d1df      	bne.n	8010432 <__swbuf_r+0x2e>
 8010472:	4621      	mov	r1, r4
 8010474:	4628      	mov	r0, r5
 8010476:	f7ff fda9 	bl	800ffcc <_fflush_r>
 801047a:	2800      	cmp	r0, #0
 801047c:	d0d9      	beq.n	8010432 <__swbuf_r+0x2e>
 801047e:	e7d6      	b.n	801042e <__swbuf_r+0x2a>

08010480 <__swsetup_r>:
 8010480:	b538      	push	{r3, r4, r5, lr}
 8010482:	4b29      	ldr	r3, [pc, #164]	@ (8010528 <__swsetup_r+0xa8>)
 8010484:	4605      	mov	r5, r0
 8010486:	6818      	ldr	r0, [r3, #0]
 8010488:	460c      	mov	r4, r1
 801048a:	b118      	cbz	r0, 8010494 <__swsetup_r+0x14>
 801048c:	6a03      	ldr	r3, [r0, #32]
 801048e:	b90b      	cbnz	r3, 8010494 <__swsetup_r+0x14>
 8010490:	f7fd ff6a 	bl	800e368 <__sinit>
 8010494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010498:	0719      	lsls	r1, r3, #28
 801049a:	d422      	bmi.n	80104e2 <__swsetup_r+0x62>
 801049c:	06da      	lsls	r2, r3, #27
 801049e:	d407      	bmi.n	80104b0 <__swsetup_r+0x30>
 80104a0:	2209      	movs	r2, #9
 80104a2:	602a      	str	r2, [r5, #0]
 80104a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104a8:	81a3      	strh	r3, [r4, #12]
 80104aa:	f04f 30ff 	mov.w	r0, #4294967295
 80104ae:	e033      	b.n	8010518 <__swsetup_r+0x98>
 80104b0:	0758      	lsls	r0, r3, #29
 80104b2:	d512      	bpl.n	80104da <__swsetup_r+0x5a>
 80104b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80104b6:	b141      	cbz	r1, 80104ca <__swsetup_r+0x4a>
 80104b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80104bc:	4299      	cmp	r1, r3
 80104be:	d002      	beq.n	80104c6 <__swsetup_r+0x46>
 80104c0:	4628      	mov	r0, r5
 80104c2:	f7fe f917 	bl	800e6f4 <_free_r>
 80104c6:	2300      	movs	r3, #0
 80104c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80104ca:	89a3      	ldrh	r3, [r4, #12]
 80104cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80104d0:	81a3      	strh	r3, [r4, #12]
 80104d2:	2300      	movs	r3, #0
 80104d4:	6063      	str	r3, [r4, #4]
 80104d6:	6923      	ldr	r3, [r4, #16]
 80104d8:	6023      	str	r3, [r4, #0]
 80104da:	89a3      	ldrh	r3, [r4, #12]
 80104dc:	f043 0308 	orr.w	r3, r3, #8
 80104e0:	81a3      	strh	r3, [r4, #12]
 80104e2:	6923      	ldr	r3, [r4, #16]
 80104e4:	b94b      	cbnz	r3, 80104fa <__swsetup_r+0x7a>
 80104e6:	89a3      	ldrh	r3, [r4, #12]
 80104e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80104ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80104f0:	d003      	beq.n	80104fa <__swsetup_r+0x7a>
 80104f2:	4621      	mov	r1, r4
 80104f4:	4628      	mov	r0, r5
 80104f6:	f000 f883 	bl	8010600 <__smakebuf_r>
 80104fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104fe:	f013 0201 	ands.w	r2, r3, #1
 8010502:	d00a      	beq.n	801051a <__swsetup_r+0x9a>
 8010504:	2200      	movs	r2, #0
 8010506:	60a2      	str	r2, [r4, #8]
 8010508:	6962      	ldr	r2, [r4, #20]
 801050a:	4252      	negs	r2, r2
 801050c:	61a2      	str	r2, [r4, #24]
 801050e:	6922      	ldr	r2, [r4, #16]
 8010510:	b942      	cbnz	r2, 8010524 <__swsetup_r+0xa4>
 8010512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010516:	d1c5      	bne.n	80104a4 <__swsetup_r+0x24>
 8010518:	bd38      	pop	{r3, r4, r5, pc}
 801051a:	0799      	lsls	r1, r3, #30
 801051c:	bf58      	it	pl
 801051e:	6962      	ldrpl	r2, [r4, #20]
 8010520:	60a2      	str	r2, [r4, #8]
 8010522:	e7f4      	b.n	801050e <__swsetup_r+0x8e>
 8010524:	2000      	movs	r0, #0
 8010526:	e7f7      	b.n	8010518 <__swsetup_r+0x98>
 8010528:	20000310 	.word	0x20000310

0801052c <_raise_r>:
 801052c:	291f      	cmp	r1, #31
 801052e:	b538      	push	{r3, r4, r5, lr}
 8010530:	4605      	mov	r5, r0
 8010532:	460c      	mov	r4, r1
 8010534:	d904      	bls.n	8010540 <_raise_r+0x14>
 8010536:	2316      	movs	r3, #22
 8010538:	6003      	str	r3, [r0, #0]
 801053a:	f04f 30ff 	mov.w	r0, #4294967295
 801053e:	bd38      	pop	{r3, r4, r5, pc}
 8010540:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010542:	b112      	cbz	r2, 801054a <_raise_r+0x1e>
 8010544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010548:	b94b      	cbnz	r3, 801055e <_raise_r+0x32>
 801054a:	4628      	mov	r0, r5
 801054c:	f000 f830 	bl	80105b0 <_getpid_r>
 8010550:	4622      	mov	r2, r4
 8010552:	4601      	mov	r1, r0
 8010554:	4628      	mov	r0, r5
 8010556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801055a:	f000 b817 	b.w	801058c <_kill_r>
 801055e:	2b01      	cmp	r3, #1
 8010560:	d00a      	beq.n	8010578 <_raise_r+0x4c>
 8010562:	1c59      	adds	r1, r3, #1
 8010564:	d103      	bne.n	801056e <_raise_r+0x42>
 8010566:	2316      	movs	r3, #22
 8010568:	6003      	str	r3, [r0, #0]
 801056a:	2001      	movs	r0, #1
 801056c:	e7e7      	b.n	801053e <_raise_r+0x12>
 801056e:	2100      	movs	r1, #0
 8010570:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010574:	4620      	mov	r0, r4
 8010576:	4798      	blx	r3
 8010578:	2000      	movs	r0, #0
 801057a:	e7e0      	b.n	801053e <_raise_r+0x12>

0801057c <raise>:
 801057c:	4b02      	ldr	r3, [pc, #8]	@ (8010588 <raise+0xc>)
 801057e:	4601      	mov	r1, r0
 8010580:	6818      	ldr	r0, [r3, #0]
 8010582:	f7ff bfd3 	b.w	801052c <_raise_r>
 8010586:	bf00      	nop
 8010588:	20000310 	.word	0x20000310

0801058c <_kill_r>:
 801058c:	b538      	push	{r3, r4, r5, lr}
 801058e:	4d07      	ldr	r5, [pc, #28]	@ (80105ac <_kill_r+0x20>)
 8010590:	2300      	movs	r3, #0
 8010592:	4604      	mov	r4, r0
 8010594:	4608      	mov	r0, r1
 8010596:	4611      	mov	r1, r2
 8010598:	602b      	str	r3, [r5, #0]
 801059a:	f7f3 f977 	bl	800388c <_kill>
 801059e:	1c43      	adds	r3, r0, #1
 80105a0:	d102      	bne.n	80105a8 <_kill_r+0x1c>
 80105a2:	682b      	ldr	r3, [r5, #0]
 80105a4:	b103      	cbz	r3, 80105a8 <_kill_r+0x1c>
 80105a6:	6023      	str	r3, [r4, #0]
 80105a8:	bd38      	pop	{r3, r4, r5, pc}
 80105aa:	bf00      	nop
 80105ac:	20005aa4 	.word	0x20005aa4

080105b0 <_getpid_r>:
 80105b0:	f7f3 b964 	b.w	800387c <_getpid>

080105b4 <__swhatbuf_r>:
 80105b4:	b570      	push	{r4, r5, r6, lr}
 80105b6:	460c      	mov	r4, r1
 80105b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105bc:	2900      	cmp	r1, #0
 80105be:	b096      	sub	sp, #88	@ 0x58
 80105c0:	4615      	mov	r5, r2
 80105c2:	461e      	mov	r6, r3
 80105c4:	da0d      	bge.n	80105e2 <__swhatbuf_r+0x2e>
 80105c6:	89a3      	ldrh	r3, [r4, #12]
 80105c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80105cc:	f04f 0100 	mov.w	r1, #0
 80105d0:	bf14      	ite	ne
 80105d2:	2340      	movne	r3, #64	@ 0x40
 80105d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80105d8:	2000      	movs	r0, #0
 80105da:	6031      	str	r1, [r6, #0]
 80105dc:	602b      	str	r3, [r5, #0]
 80105de:	b016      	add	sp, #88	@ 0x58
 80105e0:	bd70      	pop	{r4, r5, r6, pc}
 80105e2:	466a      	mov	r2, sp
 80105e4:	f000 f848 	bl	8010678 <_fstat_r>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	dbec      	blt.n	80105c6 <__swhatbuf_r+0x12>
 80105ec:	9901      	ldr	r1, [sp, #4]
 80105ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80105f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80105f6:	4259      	negs	r1, r3
 80105f8:	4159      	adcs	r1, r3
 80105fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80105fe:	e7eb      	b.n	80105d8 <__swhatbuf_r+0x24>

08010600 <__smakebuf_r>:
 8010600:	898b      	ldrh	r3, [r1, #12]
 8010602:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010604:	079d      	lsls	r5, r3, #30
 8010606:	4606      	mov	r6, r0
 8010608:	460c      	mov	r4, r1
 801060a:	d507      	bpl.n	801061c <__smakebuf_r+0x1c>
 801060c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	6123      	str	r3, [r4, #16]
 8010614:	2301      	movs	r3, #1
 8010616:	6163      	str	r3, [r4, #20]
 8010618:	b003      	add	sp, #12
 801061a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801061c:	ab01      	add	r3, sp, #4
 801061e:	466a      	mov	r2, sp
 8010620:	f7ff ffc8 	bl	80105b4 <__swhatbuf_r>
 8010624:	9f00      	ldr	r7, [sp, #0]
 8010626:	4605      	mov	r5, r0
 8010628:	4639      	mov	r1, r7
 801062a:	4630      	mov	r0, r6
 801062c:	f7fe fc08 	bl	800ee40 <_malloc_r>
 8010630:	b948      	cbnz	r0, 8010646 <__smakebuf_r+0x46>
 8010632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010636:	059a      	lsls	r2, r3, #22
 8010638:	d4ee      	bmi.n	8010618 <__smakebuf_r+0x18>
 801063a:	f023 0303 	bic.w	r3, r3, #3
 801063e:	f043 0302 	orr.w	r3, r3, #2
 8010642:	81a3      	strh	r3, [r4, #12]
 8010644:	e7e2      	b.n	801060c <__smakebuf_r+0xc>
 8010646:	89a3      	ldrh	r3, [r4, #12]
 8010648:	6020      	str	r0, [r4, #0]
 801064a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801064e:	81a3      	strh	r3, [r4, #12]
 8010650:	9b01      	ldr	r3, [sp, #4]
 8010652:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010656:	b15b      	cbz	r3, 8010670 <__smakebuf_r+0x70>
 8010658:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801065c:	4630      	mov	r0, r6
 801065e:	f000 f81d 	bl	801069c <_isatty_r>
 8010662:	b128      	cbz	r0, 8010670 <__smakebuf_r+0x70>
 8010664:	89a3      	ldrh	r3, [r4, #12]
 8010666:	f023 0303 	bic.w	r3, r3, #3
 801066a:	f043 0301 	orr.w	r3, r3, #1
 801066e:	81a3      	strh	r3, [r4, #12]
 8010670:	89a3      	ldrh	r3, [r4, #12]
 8010672:	431d      	orrs	r5, r3
 8010674:	81a5      	strh	r5, [r4, #12]
 8010676:	e7cf      	b.n	8010618 <__smakebuf_r+0x18>

08010678 <_fstat_r>:
 8010678:	b538      	push	{r3, r4, r5, lr}
 801067a:	4d07      	ldr	r5, [pc, #28]	@ (8010698 <_fstat_r+0x20>)
 801067c:	2300      	movs	r3, #0
 801067e:	4604      	mov	r4, r0
 8010680:	4608      	mov	r0, r1
 8010682:	4611      	mov	r1, r2
 8010684:	602b      	str	r3, [r5, #0]
 8010686:	f7f3 f961 	bl	800394c <_fstat>
 801068a:	1c43      	adds	r3, r0, #1
 801068c:	d102      	bne.n	8010694 <_fstat_r+0x1c>
 801068e:	682b      	ldr	r3, [r5, #0]
 8010690:	b103      	cbz	r3, 8010694 <_fstat_r+0x1c>
 8010692:	6023      	str	r3, [r4, #0]
 8010694:	bd38      	pop	{r3, r4, r5, pc}
 8010696:	bf00      	nop
 8010698:	20005aa4 	.word	0x20005aa4

0801069c <_isatty_r>:
 801069c:	b538      	push	{r3, r4, r5, lr}
 801069e:	4d06      	ldr	r5, [pc, #24]	@ (80106b8 <_isatty_r+0x1c>)
 80106a0:	2300      	movs	r3, #0
 80106a2:	4604      	mov	r4, r0
 80106a4:	4608      	mov	r0, r1
 80106a6:	602b      	str	r3, [r5, #0]
 80106a8:	f7f3 f960 	bl	800396c <_isatty>
 80106ac:	1c43      	adds	r3, r0, #1
 80106ae:	d102      	bne.n	80106b6 <_isatty_r+0x1a>
 80106b0:	682b      	ldr	r3, [r5, #0]
 80106b2:	b103      	cbz	r3, 80106b6 <_isatty_r+0x1a>
 80106b4:	6023      	str	r3, [r4, #0]
 80106b6:	bd38      	pop	{r3, r4, r5, pc}
 80106b8:	20005aa4 	.word	0x20005aa4

080106bc <_init>:
 80106bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106be:	bf00      	nop
 80106c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106c2:	bc08      	pop	{r3}
 80106c4:	469e      	mov	lr, r3
 80106c6:	4770      	bx	lr

080106c8 <_fini>:
 80106c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106ca:	bf00      	nop
 80106cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80106ce:	bc08      	pop	{r3}
 80106d0:	469e      	mov	lr, r3
 80106d2:	4770      	bx	lr
